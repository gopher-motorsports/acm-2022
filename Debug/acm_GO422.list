
acm_GO422.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006f94  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000078  08007164  08007164  00017164  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080071dc  080071dc  000203c4  2**0
                  CONTENTS
  4 .ARM          00000008  080071dc  080071dc  000171dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080071e4  080071e4  000203c4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080071e4  080071e4  000171e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080071e8  080071e8  000171e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000003c4  20000000  080071ec  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000050c8  200003c4  080075b0  000203c4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000548c  080075b0  0002548c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000203c4  2**0
                  CONTENTS, READONLY
 12 .debug_info   000180f3  00000000  00000000  000203f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003453  00000000  00000000  000384e7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001310  00000000  00000000  0003b940  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001180  00000000  00000000  0003cc50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000292d6  00000000  00000000  0003ddd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000152d9  00000000  00000000  000670a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ffacb  00000000  00000000  0007c37f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0017be4a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004eac  00000000  00000000  0017be9c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200003c4 	.word	0x200003c4
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800714c 	.word	0x0800714c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200003c8 	.word	0x200003c8
 800020c:	0800714c 	.word	0x0800714c

08000210 <__aeabi_uldivmod>:
 8000210:	b953      	cbnz	r3, 8000228 <__aeabi_uldivmod+0x18>
 8000212:	b94a      	cbnz	r2, 8000228 <__aeabi_uldivmod+0x18>
 8000214:	2900      	cmp	r1, #0
 8000216:	bf08      	it	eq
 8000218:	2800      	cmpeq	r0, #0
 800021a:	bf1c      	itt	ne
 800021c:	f04f 31ff 	movne.w	r1, #4294967295
 8000220:	f04f 30ff 	movne.w	r0, #4294967295
 8000224:	f000 b974 	b.w	8000510 <__aeabi_idiv0>
 8000228:	f1ad 0c08 	sub.w	ip, sp, #8
 800022c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000230:	f000 f806 	bl	8000240 <__udivmoddi4>
 8000234:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000238:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800023c:	b004      	add	sp, #16
 800023e:	4770      	bx	lr

08000240 <__udivmoddi4>:
 8000240:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000244:	9d08      	ldr	r5, [sp, #32]
 8000246:	4604      	mov	r4, r0
 8000248:	468e      	mov	lr, r1
 800024a:	2b00      	cmp	r3, #0
 800024c:	d14d      	bne.n	80002ea <__udivmoddi4+0xaa>
 800024e:	428a      	cmp	r2, r1
 8000250:	4694      	mov	ip, r2
 8000252:	d969      	bls.n	8000328 <__udivmoddi4+0xe8>
 8000254:	fab2 f282 	clz	r2, r2
 8000258:	b152      	cbz	r2, 8000270 <__udivmoddi4+0x30>
 800025a:	fa01 f302 	lsl.w	r3, r1, r2
 800025e:	f1c2 0120 	rsb	r1, r2, #32
 8000262:	fa20 f101 	lsr.w	r1, r0, r1
 8000266:	fa0c fc02 	lsl.w	ip, ip, r2
 800026a:	ea41 0e03 	orr.w	lr, r1, r3
 800026e:	4094      	lsls	r4, r2
 8000270:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000274:	0c21      	lsrs	r1, r4, #16
 8000276:	fbbe f6f8 	udiv	r6, lr, r8
 800027a:	fa1f f78c 	uxth.w	r7, ip
 800027e:	fb08 e316 	mls	r3, r8, r6, lr
 8000282:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000286:	fb06 f107 	mul.w	r1, r6, r7
 800028a:	4299      	cmp	r1, r3
 800028c:	d90a      	bls.n	80002a4 <__udivmoddi4+0x64>
 800028e:	eb1c 0303 	adds.w	r3, ip, r3
 8000292:	f106 30ff 	add.w	r0, r6, #4294967295
 8000296:	f080 811f 	bcs.w	80004d8 <__udivmoddi4+0x298>
 800029a:	4299      	cmp	r1, r3
 800029c:	f240 811c 	bls.w	80004d8 <__udivmoddi4+0x298>
 80002a0:	3e02      	subs	r6, #2
 80002a2:	4463      	add	r3, ip
 80002a4:	1a5b      	subs	r3, r3, r1
 80002a6:	b2a4      	uxth	r4, r4
 80002a8:	fbb3 f0f8 	udiv	r0, r3, r8
 80002ac:	fb08 3310 	mls	r3, r8, r0, r3
 80002b0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002b4:	fb00 f707 	mul.w	r7, r0, r7
 80002b8:	42a7      	cmp	r7, r4
 80002ba:	d90a      	bls.n	80002d2 <__udivmoddi4+0x92>
 80002bc:	eb1c 0404 	adds.w	r4, ip, r4
 80002c0:	f100 33ff 	add.w	r3, r0, #4294967295
 80002c4:	f080 810a 	bcs.w	80004dc <__udivmoddi4+0x29c>
 80002c8:	42a7      	cmp	r7, r4
 80002ca:	f240 8107 	bls.w	80004dc <__udivmoddi4+0x29c>
 80002ce:	4464      	add	r4, ip
 80002d0:	3802      	subs	r0, #2
 80002d2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002d6:	1be4      	subs	r4, r4, r7
 80002d8:	2600      	movs	r6, #0
 80002da:	b11d      	cbz	r5, 80002e4 <__udivmoddi4+0xa4>
 80002dc:	40d4      	lsrs	r4, r2
 80002de:	2300      	movs	r3, #0
 80002e0:	e9c5 4300 	strd	r4, r3, [r5]
 80002e4:	4631      	mov	r1, r6
 80002e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ea:	428b      	cmp	r3, r1
 80002ec:	d909      	bls.n	8000302 <__udivmoddi4+0xc2>
 80002ee:	2d00      	cmp	r5, #0
 80002f0:	f000 80ef 	beq.w	80004d2 <__udivmoddi4+0x292>
 80002f4:	2600      	movs	r6, #0
 80002f6:	e9c5 0100 	strd	r0, r1, [r5]
 80002fa:	4630      	mov	r0, r6
 80002fc:	4631      	mov	r1, r6
 80002fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000302:	fab3 f683 	clz	r6, r3
 8000306:	2e00      	cmp	r6, #0
 8000308:	d14a      	bne.n	80003a0 <__udivmoddi4+0x160>
 800030a:	428b      	cmp	r3, r1
 800030c:	d302      	bcc.n	8000314 <__udivmoddi4+0xd4>
 800030e:	4282      	cmp	r2, r0
 8000310:	f200 80f9 	bhi.w	8000506 <__udivmoddi4+0x2c6>
 8000314:	1a84      	subs	r4, r0, r2
 8000316:	eb61 0303 	sbc.w	r3, r1, r3
 800031a:	2001      	movs	r0, #1
 800031c:	469e      	mov	lr, r3
 800031e:	2d00      	cmp	r5, #0
 8000320:	d0e0      	beq.n	80002e4 <__udivmoddi4+0xa4>
 8000322:	e9c5 4e00 	strd	r4, lr, [r5]
 8000326:	e7dd      	b.n	80002e4 <__udivmoddi4+0xa4>
 8000328:	b902      	cbnz	r2, 800032c <__udivmoddi4+0xec>
 800032a:	deff      	udf	#255	; 0xff
 800032c:	fab2 f282 	clz	r2, r2
 8000330:	2a00      	cmp	r2, #0
 8000332:	f040 8092 	bne.w	800045a <__udivmoddi4+0x21a>
 8000336:	eba1 010c 	sub.w	r1, r1, ip
 800033a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800033e:	fa1f fe8c 	uxth.w	lr, ip
 8000342:	2601      	movs	r6, #1
 8000344:	0c20      	lsrs	r0, r4, #16
 8000346:	fbb1 f3f7 	udiv	r3, r1, r7
 800034a:	fb07 1113 	mls	r1, r7, r3, r1
 800034e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000352:	fb0e f003 	mul.w	r0, lr, r3
 8000356:	4288      	cmp	r0, r1
 8000358:	d908      	bls.n	800036c <__udivmoddi4+0x12c>
 800035a:	eb1c 0101 	adds.w	r1, ip, r1
 800035e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000362:	d202      	bcs.n	800036a <__udivmoddi4+0x12a>
 8000364:	4288      	cmp	r0, r1
 8000366:	f200 80cb 	bhi.w	8000500 <__udivmoddi4+0x2c0>
 800036a:	4643      	mov	r3, r8
 800036c:	1a09      	subs	r1, r1, r0
 800036e:	b2a4      	uxth	r4, r4
 8000370:	fbb1 f0f7 	udiv	r0, r1, r7
 8000374:	fb07 1110 	mls	r1, r7, r0, r1
 8000378:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800037c:	fb0e fe00 	mul.w	lr, lr, r0
 8000380:	45a6      	cmp	lr, r4
 8000382:	d908      	bls.n	8000396 <__udivmoddi4+0x156>
 8000384:	eb1c 0404 	adds.w	r4, ip, r4
 8000388:	f100 31ff 	add.w	r1, r0, #4294967295
 800038c:	d202      	bcs.n	8000394 <__udivmoddi4+0x154>
 800038e:	45a6      	cmp	lr, r4
 8000390:	f200 80bb 	bhi.w	800050a <__udivmoddi4+0x2ca>
 8000394:	4608      	mov	r0, r1
 8000396:	eba4 040e 	sub.w	r4, r4, lr
 800039a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800039e:	e79c      	b.n	80002da <__udivmoddi4+0x9a>
 80003a0:	f1c6 0720 	rsb	r7, r6, #32
 80003a4:	40b3      	lsls	r3, r6
 80003a6:	fa22 fc07 	lsr.w	ip, r2, r7
 80003aa:	ea4c 0c03 	orr.w	ip, ip, r3
 80003ae:	fa20 f407 	lsr.w	r4, r0, r7
 80003b2:	fa01 f306 	lsl.w	r3, r1, r6
 80003b6:	431c      	orrs	r4, r3
 80003b8:	40f9      	lsrs	r1, r7
 80003ba:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003be:	fa00 f306 	lsl.w	r3, r0, r6
 80003c2:	fbb1 f8f9 	udiv	r8, r1, r9
 80003c6:	0c20      	lsrs	r0, r4, #16
 80003c8:	fa1f fe8c 	uxth.w	lr, ip
 80003cc:	fb09 1118 	mls	r1, r9, r8, r1
 80003d0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003d4:	fb08 f00e 	mul.w	r0, r8, lr
 80003d8:	4288      	cmp	r0, r1
 80003da:	fa02 f206 	lsl.w	r2, r2, r6
 80003de:	d90b      	bls.n	80003f8 <__udivmoddi4+0x1b8>
 80003e0:	eb1c 0101 	adds.w	r1, ip, r1
 80003e4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003e8:	f080 8088 	bcs.w	80004fc <__udivmoddi4+0x2bc>
 80003ec:	4288      	cmp	r0, r1
 80003ee:	f240 8085 	bls.w	80004fc <__udivmoddi4+0x2bc>
 80003f2:	f1a8 0802 	sub.w	r8, r8, #2
 80003f6:	4461      	add	r1, ip
 80003f8:	1a09      	subs	r1, r1, r0
 80003fa:	b2a4      	uxth	r4, r4
 80003fc:	fbb1 f0f9 	udiv	r0, r1, r9
 8000400:	fb09 1110 	mls	r1, r9, r0, r1
 8000404:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000408:	fb00 fe0e 	mul.w	lr, r0, lr
 800040c:	458e      	cmp	lr, r1
 800040e:	d908      	bls.n	8000422 <__udivmoddi4+0x1e2>
 8000410:	eb1c 0101 	adds.w	r1, ip, r1
 8000414:	f100 34ff 	add.w	r4, r0, #4294967295
 8000418:	d26c      	bcs.n	80004f4 <__udivmoddi4+0x2b4>
 800041a:	458e      	cmp	lr, r1
 800041c:	d96a      	bls.n	80004f4 <__udivmoddi4+0x2b4>
 800041e:	3802      	subs	r0, #2
 8000420:	4461      	add	r1, ip
 8000422:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000426:	fba0 9402 	umull	r9, r4, r0, r2
 800042a:	eba1 010e 	sub.w	r1, r1, lr
 800042e:	42a1      	cmp	r1, r4
 8000430:	46c8      	mov	r8, r9
 8000432:	46a6      	mov	lr, r4
 8000434:	d356      	bcc.n	80004e4 <__udivmoddi4+0x2a4>
 8000436:	d053      	beq.n	80004e0 <__udivmoddi4+0x2a0>
 8000438:	b15d      	cbz	r5, 8000452 <__udivmoddi4+0x212>
 800043a:	ebb3 0208 	subs.w	r2, r3, r8
 800043e:	eb61 010e 	sbc.w	r1, r1, lr
 8000442:	fa01 f707 	lsl.w	r7, r1, r7
 8000446:	fa22 f306 	lsr.w	r3, r2, r6
 800044a:	40f1      	lsrs	r1, r6
 800044c:	431f      	orrs	r7, r3
 800044e:	e9c5 7100 	strd	r7, r1, [r5]
 8000452:	2600      	movs	r6, #0
 8000454:	4631      	mov	r1, r6
 8000456:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800045a:	f1c2 0320 	rsb	r3, r2, #32
 800045e:	40d8      	lsrs	r0, r3
 8000460:	fa0c fc02 	lsl.w	ip, ip, r2
 8000464:	fa21 f303 	lsr.w	r3, r1, r3
 8000468:	4091      	lsls	r1, r2
 800046a:	4301      	orrs	r1, r0
 800046c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000470:	fa1f fe8c 	uxth.w	lr, ip
 8000474:	fbb3 f0f7 	udiv	r0, r3, r7
 8000478:	fb07 3610 	mls	r6, r7, r0, r3
 800047c:	0c0b      	lsrs	r3, r1, #16
 800047e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000482:	fb00 f60e 	mul.w	r6, r0, lr
 8000486:	429e      	cmp	r6, r3
 8000488:	fa04 f402 	lsl.w	r4, r4, r2
 800048c:	d908      	bls.n	80004a0 <__udivmoddi4+0x260>
 800048e:	eb1c 0303 	adds.w	r3, ip, r3
 8000492:	f100 38ff 	add.w	r8, r0, #4294967295
 8000496:	d22f      	bcs.n	80004f8 <__udivmoddi4+0x2b8>
 8000498:	429e      	cmp	r6, r3
 800049a:	d92d      	bls.n	80004f8 <__udivmoddi4+0x2b8>
 800049c:	3802      	subs	r0, #2
 800049e:	4463      	add	r3, ip
 80004a0:	1b9b      	subs	r3, r3, r6
 80004a2:	b289      	uxth	r1, r1
 80004a4:	fbb3 f6f7 	udiv	r6, r3, r7
 80004a8:	fb07 3316 	mls	r3, r7, r6, r3
 80004ac:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004b0:	fb06 f30e 	mul.w	r3, r6, lr
 80004b4:	428b      	cmp	r3, r1
 80004b6:	d908      	bls.n	80004ca <__udivmoddi4+0x28a>
 80004b8:	eb1c 0101 	adds.w	r1, ip, r1
 80004bc:	f106 38ff 	add.w	r8, r6, #4294967295
 80004c0:	d216      	bcs.n	80004f0 <__udivmoddi4+0x2b0>
 80004c2:	428b      	cmp	r3, r1
 80004c4:	d914      	bls.n	80004f0 <__udivmoddi4+0x2b0>
 80004c6:	3e02      	subs	r6, #2
 80004c8:	4461      	add	r1, ip
 80004ca:	1ac9      	subs	r1, r1, r3
 80004cc:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004d0:	e738      	b.n	8000344 <__udivmoddi4+0x104>
 80004d2:	462e      	mov	r6, r5
 80004d4:	4628      	mov	r0, r5
 80004d6:	e705      	b.n	80002e4 <__udivmoddi4+0xa4>
 80004d8:	4606      	mov	r6, r0
 80004da:	e6e3      	b.n	80002a4 <__udivmoddi4+0x64>
 80004dc:	4618      	mov	r0, r3
 80004de:	e6f8      	b.n	80002d2 <__udivmoddi4+0x92>
 80004e0:	454b      	cmp	r3, r9
 80004e2:	d2a9      	bcs.n	8000438 <__udivmoddi4+0x1f8>
 80004e4:	ebb9 0802 	subs.w	r8, r9, r2
 80004e8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004ec:	3801      	subs	r0, #1
 80004ee:	e7a3      	b.n	8000438 <__udivmoddi4+0x1f8>
 80004f0:	4646      	mov	r6, r8
 80004f2:	e7ea      	b.n	80004ca <__udivmoddi4+0x28a>
 80004f4:	4620      	mov	r0, r4
 80004f6:	e794      	b.n	8000422 <__udivmoddi4+0x1e2>
 80004f8:	4640      	mov	r0, r8
 80004fa:	e7d1      	b.n	80004a0 <__udivmoddi4+0x260>
 80004fc:	46d0      	mov	r8, sl
 80004fe:	e77b      	b.n	80003f8 <__udivmoddi4+0x1b8>
 8000500:	3b02      	subs	r3, #2
 8000502:	4461      	add	r1, ip
 8000504:	e732      	b.n	800036c <__udivmoddi4+0x12c>
 8000506:	4630      	mov	r0, r6
 8000508:	e709      	b.n	800031e <__udivmoddi4+0xde>
 800050a:	4464      	add	r4, ip
 800050c:	3802      	subs	r0, #2
 800050e:	e742      	b.n	8000396 <__udivmoddi4+0x156>

08000510 <__aeabi_idiv0>:
 8000510:	4770      	bx	lr
 8000512:	bf00      	nop

08000514 <init>:
// initialize GopherCAN
// What needs to happen on startup in order to run GopherCAN
data_thresholds used_data_channels[NUM_CHANNELS];

data_thresholds* init(CAN_HandleTypeDef* hcan_ptr)
{
 8000514:	b5b0      	push	{r4, r5, r7, lr}
 8000516:	b082      	sub	sp, #8
 8000518:	af00      	add	r7, sp, #0
 800051a:	6078      	str	r0, [r7, #4]
	acm_hcan = hcan_ptr;
 800051c:	4a3a      	ldr	r2, [pc, #232]	; (8000608 <init+0xf4>)
 800051e:	687b      	ldr	r3, [r7, #4]
 8000520:	6013      	str	r3, [r2, #0]

	// initialize CAN
	// NOTE: CAN will also need to be added in CubeMX and code must be generated
	// Check the STM_CAN repo for the file "F0xx CAN Config Settings.pptx" for the correct settings
	if (init_can(acm_hcan, THIS_MODULE_ID, BXTYPE_MASTER))
 8000522:	4b39      	ldr	r3, [pc, #228]	; (8000608 <init+0xf4>)
 8000524:	681b      	ldr	r3, [r3, #0]
 8000526:	2200      	movs	r2, #0
 8000528:	2106      	movs	r1, #6
 800052a:	4618      	mov	r0, r3
 800052c:	f001 f8e0 	bl	80016f0 <init_can>
 8000530:	4603      	mov	r3, r0
 8000532:	2b00      	cmp	r3, #0
 8000534:	d000      	beq.n	8000538 <init+0x24>
	{
		// an error has occurred, stay here
		while (1);
 8000536:	e7fe      	b.n	8000536 <init+0x22>
	}

	// enable updating for data channels
	DATA_CHANNEL_1.update_enabled = TRUE;
 8000538:	4b34      	ldr	r3, [pc, #208]	; (800060c <init+0xf8>)
 800053a:	2201      	movs	r2, #1
 800053c:	711a      	strb	r2, [r3, #4]
	DATA_CHANNEL_2.update_enabled = TRUE;
 800053e:	4b34      	ldr	r3, [pc, #208]	; (8000610 <init+0xfc>)
 8000540:	2201      	movs	r2, #1
 8000542:	711a      	strb	r2, [r3, #4]
	DATA_CHANNEL_3.update_enabled = TRUE;
 8000544:	4b33      	ldr	r3, [pc, #204]	; (8000614 <init+0x100>)
 8000546:	2201      	movs	r2, #1
 8000548:	711a      	strb	r2, [r3, #4]

	// enable all of the variables in GopherCAN for testing
	set_all_params_state(TRUE);
 800054a:	2001      	movs	r0, #1
 800054c:	f001 f97e 	bl	800184c <set_all_params_state>

	// create threshold structs
	channel_1.channel_name = &DATA_CHANNEL_1;
 8000550:	4b31      	ldr	r3, [pc, #196]	; (8000618 <init+0x104>)
 8000552:	4a2e      	ldr	r2, [pc, #184]	; (800060c <init+0xf8>)
 8000554:	601a      	str	r2, [r3, #0]
	channel_1.high = DATA_CHANNEL_1_HIGH;
 8000556:	4b30      	ldr	r3, [pc, #192]	; (8000618 <init+0x104>)
 8000558:	224b      	movs	r2, #75	; 0x4b
 800055a:	605a      	str	r2, [r3, #4]
	channel_1.mid = DATA_CHANNEL_1_MID;
 800055c:	4b2e      	ldr	r3, [pc, #184]	; (8000618 <init+0x104>)
 800055e:	2232      	movs	r2, #50	; 0x32
 8000560:	609a      	str	r2, [r3, #8]
	channel_1.low = DATA_CHANNEL_1_LOW;
 8000562:	4b2d      	ldr	r3, [pc, #180]	; (8000618 <init+0x104>)
 8000564:	2219      	movs	r2, #25
 8000566:	60da      	str	r2, [r3, #12]
	channel_1.max = DATA_CHANNEL_1_MAX;
 8000568:	4b2b      	ldr	r3, [pc, #172]	; (8000618 <init+0x104>)
 800056a:	2264      	movs	r2, #100	; 0x64
 800056c:	611a      	str	r2, [r3, #16]
	channel_1.min = DATA_CHANNEL_1_MIN;
 800056e:	4b2a      	ldr	r3, [pc, #168]	; (8000618 <init+0x104>)
 8000570:	2200      	movs	r2, #0
 8000572:	615a      	str	r2, [r3, #20]

	channel_2.channel_name = &DATA_CHANNEL_2;
 8000574:	4b29      	ldr	r3, [pc, #164]	; (800061c <init+0x108>)
 8000576:	4a26      	ldr	r2, [pc, #152]	; (8000610 <init+0xfc>)
 8000578:	601a      	str	r2, [r3, #0]
	channel_2.high = DATA_CHANNEL_2_HIGH;
 800057a:	4b28      	ldr	r3, [pc, #160]	; (800061c <init+0x108>)
 800057c:	2200      	movs	r2, #0
 800057e:	605a      	str	r2, [r3, #4]
	channel_2.mid = DATA_CHANNEL_2_MID;
 8000580:	4b26      	ldr	r3, [pc, #152]	; (800061c <init+0x108>)
 8000582:	2200      	movs	r2, #0
 8000584:	609a      	str	r2, [r3, #8]
	channel_2.low = DATA_CHANNEL_2_LOW;
 8000586:	4b25      	ldr	r3, [pc, #148]	; (800061c <init+0x108>)
 8000588:	2200      	movs	r2, #0
 800058a:	60da      	str	r2, [r3, #12]
	channel_2.max = DATA_CHANNEL_2_MAX;
 800058c:	4b23      	ldr	r3, [pc, #140]	; (800061c <init+0x108>)
 800058e:	2200      	movs	r2, #0
 8000590:	611a      	str	r2, [r3, #16]
	channel_2.min = DATA_CHANNEL_2_MIN;
 8000592:	4b22      	ldr	r3, [pc, #136]	; (800061c <init+0x108>)
 8000594:	2200      	movs	r2, #0
 8000596:	615a      	str	r2, [r3, #20]

	channel_3.channel_name = &DATA_CHANNEL_3;
 8000598:	4b21      	ldr	r3, [pc, #132]	; (8000620 <init+0x10c>)
 800059a:	4a1e      	ldr	r2, [pc, #120]	; (8000614 <init+0x100>)
 800059c:	601a      	str	r2, [r3, #0]
	channel_3.high = DATA_CHANNEL_3_HIGH;
 800059e:	4b20      	ldr	r3, [pc, #128]	; (8000620 <init+0x10c>)
 80005a0:	2200      	movs	r2, #0
 80005a2:	605a      	str	r2, [r3, #4]
	channel_3.mid = DATA_CHANNEL_3_MID;
 80005a4:	4b1e      	ldr	r3, [pc, #120]	; (8000620 <init+0x10c>)
 80005a6:	2200      	movs	r2, #0
 80005a8:	609a      	str	r2, [r3, #8]
	channel_3.low = DATA_CHANNEL_3_LOW;
 80005aa:	4b1d      	ldr	r3, [pc, #116]	; (8000620 <init+0x10c>)
 80005ac:	2200      	movs	r2, #0
 80005ae:	60da      	str	r2, [r3, #12]
	channel_3.max = DATA_CHANNEL_3_MAX;
 80005b0:	4b1b      	ldr	r3, [pc, #108]	; (8000620 <init+0x10c>)
 80005b2:	2200      	movs	r2, #0
 80005b4:	611a      	str	r2, [r3, #16]
	channel_3.min = DATA_CHANNEL_3_MIN;
 80005b6:	4b1a      	ldr	r3, [pc, #104]	; (8000620 <init+0x10c>)
 80005b8:	2200      	movs	r2, #0
 80005ba:	615a      	str	r2, [r3, #20]

	used_data_channels[0] = channel_1;
 80005bc:	4a19      	ldr	r2, [pc, #100]	; (8000624 <init+0x110>)
 80005be:	4b16      	ldr	r3, [pc, #88]	; (8000618 <init+0x104>)
 80005c0:	4614      	mov	r4, r2
 80005c2:	461d      	mov	r5, r3
 80005c4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005c6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005c8:	e895 0003 	ldmia.w	r5, {r0, r1}
 80005cc:	e884 0003 	stmia.w	r4, {r0, r1}
	used_data_channels[1] = channel_2;
 80005d0:	4b14      	ldr	r3, [pc, #80]	; (8000624 <init+0x110>)
 80005d2:	4a12      	ldr	r2, [pc, #72]	; (800061c <init+0x108>)
 80005d4:	f103 0418 	add.w	r4, r3, #24
 80005d8:	4615      	mov	r5, r2
 80005da:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005dc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005de:	e895 0003 	ldmia.w	r5, {r0, r1}
 80005e2:	e884 0003 	stmia.w	r4, {r0, r1}
	used_data_channels[2]= channel_3;
 80005e6:	4b0f      	ldr	r3, [pc, #60]	; (8000624 <init+0x110>)
 80005e8:	4a0d      	ldr	r2, [pc, #52]	; (8000620 <init+0x10c>)
 80005ea:	f103 0430 	add.w	r4, r3, #48	; 0x30
 80005ee:	4615      	mov	r5, r2
 80005f0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005f2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005f4:	e895 0003 	ldmia.w	r5, {r0, r1}
 80005f8:	e884 0003 	stmia.w	r4, {r0, r1}
	return used_data_channels;
 80005fc:	4b09      	ldr	r3, [pc, #36]	; (8000624 <init+0x110>)
}
 80005fe:	4618      	mov	r0, r3
 8000600:	3708      	adds	r7, #8
 8000602:	46bd      	mov	sp, r7
 8000604:	bdb0      	pop	{r4, r5, r7, pc}
 8000606:	bf00      	nop
 8000608:	200003e0 	.word	0x200003e0
 800060c:	20001078 	.word	0x20001078
 8000610:	2000109c 	.word	0x2000109c
 8000614:	20001084 	.word	0x20001084
 8000618:	200003e4 	.word	0x200003e4
 800061c:	200003fc 	.word	0x200003fc
 8000620:	20000414 	.word	0x20000414
 8000624:	2000042c 	.word	0x2000042c

08000628 <valid_data_channel>:
	// handle the transmission hardware for each CAN bus
	service_can_tx_hardware(acm_hcan);
}

int valid_data_channel(FLOAT_CAN_STRUCT* data_channel)
{
 8000628:	b480      	push	{r7}
 800062a:	b085      	sub	sp, #20
 800062c:	af00      	add	r7, sp, #0
 800062e:	6078      	str	r0, [r7, #4]
	for(int i = 0; i < NUM_CHANNELS; i++) //need to figure out why these macros aren't transfering properly
 8000630:	2300      	movs	r3, #0
 8000632:	60fb      	str	r3, [r7, #12]
 8000634:	e00d      	b.n	8000652 <valid_data_channel+0x2a>
	{
		if(data_channel->param_id == data_channels[i]->param_id)
 8000636:	687b      	ldr	r3, [r7, #4]
 8000638:	799a      	ldrb	r2, [r3, #6]
 800063a:	490b      	ldr	r1, [pc, #44]	; (8000668 <valid_data_channel+0x40>)
 800063c:	68fb      	ldr	r3, [r7, #12]
 800063e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000642:	799b      	ldrb	r3, [r3, #6]
 8000644:	429a      	cmp	r2, r3
 8000646:	d101      	bne.n	800064c <valid_data_channel+0x24>
		{
			return 0;
 8000648:	2300      	movs	r3, #0
 800064a:	e007      	b.n	800065c <valid_data_channel+0x34>
	for(int i = 0; i < NUM_CHANNELS; i++) //need to figure out why these macros aren't transfering properly
 800064c:	68fb      	ldr	r3, [r7, #12]
 800064e:	3301      	adds	r3, #1
 8000650:	60fb      	str	r3, [r7, #12]
 8000652:	68fb      	ldr	r3, [r7, #12]
 8000654:	2b00      	cmp	r3, #0
 8000656:	ddee      	ble.n	8000636 <valid_data_channel+0xe>
		}
	}
	return -1;
 8000658:	f04f 33ff 	mov.w	r3, #4294967295
}
 800065c:	4618      	mov	r0, r3
 800065e:	3714      	adds	r7, #20
 8000660:	46bd      	mov	sp, r7
 8000662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000666:	4770      	bx	lr
 8000668:	20000000 	.word	0x20000000

0800066c <calculate_rear_wing_angle>:

// function to be called in the main() function to determine which state the rear wing should be
// at based on the data requested
int calculate_rear_wing_angle(FLOAT_CAN_STRUCT* data_channel, data_thresholds thresh)
{
 800066c:	b084      	sub	sp, #16
 800066e:	b480      	push	{r7}
 8000670:	b083      	sub	sp, #12
 8000672:	af00      	add	r7, sp, #0
 8000674:	6078      	str	r0, [r7, #4]
 8000676:	f107 0014 	add.w	r0, r7, #20
 800067a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	if(data_channel->data > thresh.max || data_channel->data < thresh.min)
 800067e:	687b      	ldr	r3, [r7, #4]
 8000680:	ed93 7a02 	vldr	s14, [r3, #8]
 8000684:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000686:	ee07 3a90 	vmov	s15, r3
 800068a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800068e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000692:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000696:	dc0c      	bgt.n	80006b2 <calculate_rear_wing_angle+0x46>
 8000698:	687b      	ldr	r3, [r7, #4]
 800069a:	ed93 7a02 	vldr	s14, [r3, #8]
 800069e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80006a0:	ee07 3a90 	vmov	s15, r3
 80006a4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80006a8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80006ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80006b0:	d502      	bpl.n	80006b8 <calculate_rear_wing_angle+0x4c>
	{
		return ERR_DRS;
 80006b2:	f640 0313 	movw	r3, #2067	; 0x813
 80006b6:	e031      	b.n	800071c <calculate_rear_wing_angle+0xb0>
	}
	else if(data_channel->data > thresh.high )
 80006b8:	687b      	ldr	r3, [r7, #4]
 80006ba:	ed93 7a02 	vldr	s14, [r3, #8]
 80006be:	69bb      	ldr	r3, [r7, #24]
 80006c0:	ee07 3a90 	vmov	s15, r3
 80006c4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80006c8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80006cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80006d0:	dd02      	ble.n	80006d8 <calculate_rear_wing_angle+0x6c>
	{
		return HIGH_REAR_ANGLE;
 80006d2:	f640 0313 	movw	r3, #2067	; 0x813
 80006d6:	e021      	b.n	800071c <calculate_rear_wing_angle+0xb0>
	}
	else if(data_channel->data > thresh.mid)
 80006d8:	687b      	ldr	r3, [r7, #4]
 80006da:	ed93 7a02 	vldr	s14, [r3, #8]
 80006de:	69fb      	ldr	r3, [r7, #28]
 80006e0:	ee07 3a90 	vmov	s15, r3
 80006e4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80006e8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80006ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80006f0:	dd02      	ble.n	80006f8 <calculate_rear_wing_angle+0x8c>
	{
		return MID_HIGH_REAR_ANGLE;
 80006f2:	f240 7356 	movw	r3, #1878	; 0x756
 80006f6:	e011      	b.n	800071c <calculate_rear_wing_angle+0xb0>
	}
	else if(data_channel->data > thresh.low)
 80006f8:	687b      	ldr	r3, [r7, #4]
 80006fa:	ed93 7a02 	vldr	s14, [r3, #8]
 80006fe:	6a3b      	ldr	r3, [r7, #32]
 8000700:	ee07 3a90 	vmov	s15, r3
 8000704:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000708:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800070c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000710:	dd02      	ble.n	8000718 <calculate_rear_wing_angle+0xac>
	{
		return MID_LOW_REAR_ANGLE;
 8000712:	f240 6399 	movw	r3, #1689	; 0x699
 8000716:	e001      	b.n	800071c <calculate_rear_wing_angle+0xb0>
	}
	else
	{
		return LOW_REAR_ANGLE;
 8000718:	f240 53dc 	movw	r3, #1500	; 0x5dc
	}
}
 800071c:	4618      	mov	r0, r3
 800071e:	370c      	adds	r7, #12
 8000720:	46bd      	mov	sp, r7
 8000722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000726:	b004      	add	sp, #16
 8000728:	4770      	bx	lr

0800072a <calculate_front_wing_angle>:

// function to be called in the main() function to determine which state the front wing should be
// at based on the data requested
int calculate_front_wing_angle(FLOAT_CAN_STRUCT* data_channel, data_thresholds thresh)
{
 800072a:	b084      	sub	sp, #16
 800072c:	b480      	push	{r7}
 800072e:	b083      	sub	sp, #12
 8000730:	af00      	add	r7, sp, #0
 8000732:	6078      	str	r0, [r7, #4]
 8000734:	f107 0014 	add.w	r0, r7, #20
 8000738:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	if(data_channel->data > thresh.max || data_channel->data < thresh.min)
 800073c:	687b      	ldr	r3, [r7, #4]
 800073e:	ed93 7a02 	vldr	s14, [r3, #8]
 8000742:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000744:	ee07 3a90 	vmov	s15, r3
 8000748:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800074c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000750:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000754:	dc0c      	bgt.n	8000770 <calculate_front_wing_angle+0x46>
 8000756:	687b      	ldr	r3, [r7, #4]
 8000758:	ed93 7a02 	vldr	s14, [r3, #8]
 800075c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800075e:	ee07 3a90 	vmov	s15, r3
 8000762:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000766:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800076a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800076e:	d502      	bpl.n	8000776 <calculate_front_wing_angle+0x4c>
	{
		return ERR_FRONT;
 8000770:	f240 7329 	movw	r3, #1833	; 0x729
 8000774:	e031      	b.n	80007da <calculate_front_wing_angle+0xb0>
	}
	else if(data_channel->data > thresh.high)
 8000776:	687b      	ldr	r3, [r7, #4]
 8000778:	ed93 7a02 	vldr	s14, [r3, #8]
 800077c:	69bb      	ldr	r3, [r7, #24]
 800077e:	ee07 3a90 	vmov	s15, r3
 8000782:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000786:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800078a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800078e:	dd02      	ble.n	8000796 <calculate_front_wing_angle+0x6c>
	{
		return HIGH_FRONT_ANGLE;
 8000790:	f240 7329 	movw	r3, #1833	; 0x729
 8000794:	e021      	b.n	80007da <calculate_front_wing_angle+0xb0>
	}
	else if(data_channel->data > thresh.mid)
 8000796:	687b      	ldr	r3, [r7, #4]
 8000798:	ed93 7a02 	vldr	s14, [r3, #8]
 800079c:	69fb      	ldr	r3, [r7, #28]
 800079e:	ee07 3a90 	vmov	s15, r3
 80007a2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80007a6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80007aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80007ae:	dd02      	ble.n	80007b6 <calculate_front_wing_angle+0x8c>
	{
		return MID_HIGH_FRONT_ANGLE;
 80007b0:	f240 63ba 	movw	r3, #1722	; 0x6ba
 80007b4:	e011      	b.n	80007da <calculate_front_wing_angle+0xb0>
	}
	else if(data_channel->data > thresh.low)
 80007b6:	687b      	ldr	r3, [r7, #4]
 80007b8:	ed93 7a02 	vldr	s14, [r3, #8]
 80007bc:	6a3b      	ldr	r3, [r7, #32]
 80007be:	ee07 3a90 	vmov	s15, r3
 80007c2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80007c6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80007ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80007ce:	dd02      	ble.n	80007d6 <calculate_front_wing_angle+0xac>
	{
		return MID_LOW_FRONT_ANGLE;
 80007d0:	f240 634b 	movw	r3, #1611	; 0x64b
 80007d4:	e001      	b.n	80007da <calculate_front_wing_angle+0xb0>
	}
	else
	{
		return LOW_FRONT_ANGLE;
 80007d6:	f240 53dc 	movw	r3, #1500	; 0x5dc
	}
}
 80007da:	4618      	mov	r0, r3
 80007dc:	370c      	adds	r7, #12
 80007de:	46bd      	mov	sp, r7
 80007e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007e4:	b004      	add	sp, #16
 80007e6:	4770      	bx	lr

080007e8 <determine_wing_angle>:

int determine_wing_angle(int angles[NUM_CHANNELS])
{
 80007e8:	b480      	push	{r7}
 80007ea:	b085      	sub	sp, #20
 80007ec:	af00      	add	r7, sp, #0
 80007ee:	6078      	str	r0, [r7, #4]
	int highest_downforce = 0;
 80007f0:	2300      	movs	r3, #0
 80007f2:	60fb      	str	r3, [r7, #12]
	for(int i = 0; i < NUM_CHANNELS; i++)
 80007f4:	2300      	movs	r3, #0
 80007f6:	60bb      	str	r3, [r7, #8]
 80007f8:	e010      	b.n	800081c <determine_wing_angle+0x34>
	{
		if(angles[i] > highest_downforce)
 80007fa:	68bb      	ldr	r3, [r7, #8]
 80007fc:	009b      	lsls	r3, r3, #2
 80007fe:	687a      	ldr	r2, [r7, #4]
 8000800:	4413      	add	r3, r2
 8000802:	681b      	ldr	r3, [r3, #0]
 8000804:	68fa      	ldr	r2, [r7, #12]
 8000806:	429a      	cmp	r2, r3
 8000808:	da05      	bge.n	8000816 <determine_wing_angle+0x2e>
		{
			highest_downforce = angles[i];
 800080a:	68bb      	ldr	r3, [r7, #8]
 800080c:	009b      	lsls	r3, r3, #2
 800080e:	687a      	ldr	r2, [r7, #4]
 8000810:	4413      	add	r3, r2
 8000812:	681b      	ldr	r3, [r3, #0]
 8000814:	60fb      	str	r3, [r7, #12]
	for(int i = 0; i < NUM_CHANNELS; i++)
 8000816:	68bb      	ldr	r3, [r7, #8]
 8000818:	3301      	adds	r3, #1
 800081a:	60bb      	str	r3, [r7, #8]
 800081c:	68bb      	ldr	r3, [r7, #8]
 800081e:	2b00      	cmp	r3, #0
 8000820:	ddeb      	ble.n	80007fa <determine_wing_angle+0x12>
		}
	}
	return highest_downforce;
 8000822:	68fb      	ldr	r3, [r7, #12]
}
 8000824:	4618      	mov	r0, r3
 8000826:	3714      	adds	r7, #20
 8000828:	46bd      	mov	sp, r7
 800082a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800082e:	4770      	bx	lr

08000830 <drs_button>:

// manual control of DRS, switch from high to low position when driver presses button
int drs_button(int cur_state)
{
 8000830:	b580      	push	{r7, lr}
 8000832:	b082      	sub	sp, #8
 8000834:	af00      	add	r7, sp, #0
 8000836:	6078      	str	r0, [r7, #4]
	request_parameter(PRIO_HIGH, TCM_ID, SW_DRS_ID); // todo make button_press GCAN_PARAM_ID
 8000838:	2291      	movs	r2, #145	; 0x91
 800083a:	2105      	movs	r1, #5
 800083c:	2000      	movs	r0, #0
 800083e:	f001 f8c3 	bl	80019c8 <request_parameter>
	if(sw_drs.data == 1)
 8000842:	4b09      	ldr	r3, [pc, #36]	; (8000868 <drs_button+0x38>)
 8000844:	79db      	ldrb	r3, [r3, #7]
 8000846:	2b01      	cmp	r3, #1
 8000848:	d109      	bne.n	800085e <drs_button+0x2e>
	{
		if(cur_state < (HIGH_REAR_ANGLE-LOW_REAR_ANGLE)/2)
 800084a:	687b      	ldr	r3, [r7, #4]
 800084c:	f5b3 7f8d 	cmp.w	r3, #282	; 0x11a
 8000850:	dc02      	bgt.n	8000858 <drs_button+0x28>
		{
			return HIGH_REAR_ANGLE;
 8000852:	f640 0313 	movw	r3, #2067	; 0x813
 8000856:	e003      	b.n	8000860 <drs_button+0x30>
		}
		else
		{
			return LOW_REAR_ANGLE;
 8000858:	f240 53dc 	movw	r3, #1500	; 0x5dc
 800085c:	e000      	b.n	8000860 <drs_button+0x30>
		}
	}
	return 0;
 800085e:	2300      	movs	r3, #0
}
 8000860:	4618      	mov	r0, r3
 8000862:	3708      	adds	r7, #8
 8000864:	46bd      	mov	sp, r7
 8000866:	bd80      	pop	{r7, pc}
 8000868:	20001588 	.word	0x20001588

0800086c <aa_button>:

// manual control of active aero
int aa_button(int cur_state)
{
 800086c:	b580      	push	{r7, lr}
 800086e:	b082      	sub	sp, #8
 8000870:	af00      	add	r7, sp, #0
 8000872:	6078      	str	r0, [r7, #4]
	request_parameter(PRIO_HIGH, TCM_ID, SW_AUX2_ID);
 8000874:	2292      	movs	r2, #146	; 0x92
 8000876:	2105      	movs	r1, #5
 8000878:	2000      	movs	r0, #0
 800087a:	f001 f8a5 	bl	80019c8 <request_parameter>
	if(sw_aux2.data == 1)
 800087e:	4b09      	ldr	r3, [pc, #36]	; (80008a4 <aa_button+0x38>)
 8000880:	79db      	ldrb	r3, [r3, #7]
 8000882:	2b01      	cmp	r3, #1
 8000884:	d108      	bne.n	8000898 <aa_button+0x2c>
	{
		if(cur_state < (HIGH_FRONT_ANGLE-LOW_FRONT_ANGLE)/2)
 8000886:	687b      	ldr	r3, [r7, #4]
 8000888:	2ba5      	cmp	r3, #165	; 0xa5
 800088a:	dc02      	bgt.n	8000892 <aa_button+0x26>
		{
			return HIGH_FRONT_ANGLE;
 800088c:	f240 7329 	movw	r3, #1833	; 0x729
 8000890:	e003      	b.n	800089a <aa_button+0x2e>
		}
		else
		{
			return LOW_FRONT_ANGLE;
 8000892:	f240 53dc 	movw	r3, #1500	; 0x5dc
 8000896:	e000      	b.n	800089a <aa_button+0x2e>
		}
	}
	return 0;
 8000898:	2300      	movs	r3, #0
}
 800089a:	4618      	mov	r0, r3
 800089c:	3708      	adds	r7, #8
 800089e:	46bd      	mov	sp, r7
 80008a0:	bd80      	pop	{r7, pc}
 80008a2:	bf00      	nop
 80008a4:	20001590 	.word	0x20001590

080008a8 <parameter_request>:

// parameter request
void parameter_request(FLOAT_CAN_STRUCT* data_channel)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	b082      	sub	sp, #8
 80008ac:	af00      	add	r7, sp, #0
 80008ae:	6078      	str	r0, [r7, #4]
	service_can_rx_buffer();
 80008b0:	f001 fab2 	bl	8001e18 <service_can_rx_buffer>
	request_parameter(PRIO_HIGH, OTHER_MODULE, data_channel->param_id);
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	799b      	ldrb	r3, [r3, #6]
 80008b8:	461a      	mov	r2, r3
 80008ba:	2101      	movs	r1, #1
 80008bc:	2000      	movs	r0, #0
 80008be:	f001 f883 	bl	80019c8 <request_parameter>
	service_can_tx_hardware(acm_hcan);
 80008c2:	4b04      	ldr	r3, [pc, #16]	; (80008d4 <parameter_request+0x2c>)
 80008c4:	681b      	ldr	r3, [r3, #0]
 80008c6:	4618      	mov	r0, r3
 80008c8:	f001 fa02 	bl	8001cd0 <service_can_tx_hardware>
}
 80008cc:	bf00      	nop
 80008ce:	3708      	adds	r7, #8
 80008d0:	46bd      	mov	sp, r7
 80008d2:	bd80      	pop	{r7, pc}
 80008d4:	200003e0 	.word	0x200003e0

080008d8 <PWM_generation>:

// function to convert angle to PWM
void PWM_generation(int drs_state, int active_aero_state)
{
 80008d8:	b480      	push	{r7}
 80008da:	b083      	sub	sp, #12
 80008dc:	af00      	add	r7, sp, #0
 80008de:	6078      	str	r0, [r7, #4]
 80008e0:	6039      	str	r1, [r7, #0]
	TIM2->CCR1 = active_aero_state; // right
 80008e2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80008e6:	683b      	ldr	r3, [r7, #0]
 80008e8:	6353      	str	r3, [r2, #52]	; 0x34
	TIM2->CCR2 = active_aero_state; // left
 80008ea:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80008ee:	683b      	ldr	r3, [r7, #0]
 80008f0:	6393      	str	r3, [r2, #56]	; 0x38
	TIM2->CCR3 = drs_state; // rear
 80008f2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80008f6:	687b      	ldr	r3, [r7, #4]
 80008f8:	63d3      	str	r3, [r2, #60]	; 0x3c
}
 80008fa:	bf00      	nop
 80008fc:	370c      	adds	r7, #12
 80008fe:	46bd      	mov	sp, r7
 8000900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000904:	4770      	bx	lr
	...

08000908 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000908:	b480      	push	{r7}
 800090a:	b085      	sub	sp, #20
 800090c:	af00      	add	r7, sp, #0
 800090e:	60f8      	str	r0, [r7, #12]
 8000910:	60b9      	str	r1, [r7, #8]
 8000912:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000914:	68fb      	ldr	r3, [r7, #12]
 8000916:	4a07      	ldr	r2, [pc, #28]	; (8000934 <vApplicationGetIdleTaskMemory+0x2c>)
 8000918:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800091a:	68bb      	ldr	r3, [r7, #8]
 800091c:	4a06      	ldr	r2, [pc, #24]	; (8000938 <vApplicationGetIdleTaskMemory+0x30>)
 800091e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000920:	687b      	ldr	r3, [r7, #4]
 8000922:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000926:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000928:	bf00      	nop
 800092a:	3714      	adds	r7, #20
 800092c:	46bd      	mov	sp, r7
 800092e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000932:	4770      	bx	lr
 8000934:	20000444 	.word	0x20000444
 8000938:	20000498 	.word	0x20000498

0800093c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800093c:	b5b0      	push	{r4, r5, r7, lr}
 800093e:	b08e      	sub	sp, #56	; 0x38
 8000940:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000942:	f001 fe3f 	bl	80025c4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000946:	f000 f83b 	bl	80009c0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800094a:	f000 fab7 	bl	8000ebc <MX_GPIO_Init>
  MX_CAN1_Init();
 800094e:	f000 f947 	bl	8000be0 <MX_CAN1_Init>
  MX_TIM8_Init();
 8000952:	f000 fa07 	bl	8000d64 <MX_TIM8_Init>
  MX_ADC1_Init();
 8000956:	f000 f89f 	bl	8000a98 <MX_ADC1_Init>
  MX_ADC3_Init();
 800095a:	f000 f8ef 	bl	8000b3c <MX_ADC3_Init>
  MX_TIM2_Init();
 800095e:	f000 f975 	bl	8000c4c <MX_TIM2_Init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of taskMain_Loop */
  osThreadDef(taskMain_Loop, task_main_loop, osPriorityNormal, 0, 256);
 8000962:	4b13      	ldr	r3, [pc, #76]	; (80009b0 <main+0x74>)
 8000964:	f107 041c 	add.w	r4, r7, #28
 8000968:	461d      	mov	r5, r3
 800096a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800096c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800096e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000972:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  taskMain_LoopHandle = osThreadCreate(osThread(taskMain_Loop), NULL);
 8000976:	f107 031c 	add.w	r3, r7, #28
 800097a:	2100      	movs	r1, #0
 800097c:	4618      	mov	r0, r3
 800097e:	f005 f998 	bl	8005cb2 <osThreadCreate>
 8000982:	4603      	mov	r3, r0
 8000984:	4a0b      	ldr	r2, [pc, #44]	; (80009b4 <main+0x78>)
 8000986:	6013      	str	r3, [r2, #0]

  /* definition and creation of taskGCAN_Hardwa */
  osThreadDef(taskGCAN_Hardwa, task_gcan_hw, osPriorityNormal, 0, 256);
 8000988:	4b0b      	ldr	r3, [pc, #44]	; (80009b8 <main+0x7c>)
 800098a:	463c      	mov	r4, r7
 800098c:	461d      	mov	r5, r3
 800098e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000990:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000992:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000996:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  taskGCAN_HardwaHandle = osThreadCreate(osThread(taskGCAN_Hardwa), NULL);
 800099a:	463b      	mov	r3, r7
 800099c:	2100      	movs	r1, #0
 800099e:	4618      	mov	r0, r3
 80009a0:	f005 f987 	bl	8005cb2 <osThreadCreate>
 80009a4:	4603      	mov	r3, r0
 80009a6:	4a05      	ldr	r2, [pc, #20]	; (80009bc <main+0x80>)
 80009a8:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80009aa:	f005 f97b 	bl	8005ca4 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80009ae:	e7fe      	b.n	80009ae <main+0x72>
 80009b0:	08007184 	.word	0x08007184
 80009b4:	200009e8 	.word	0x200009e8
 80009b8:	080071a0 	.word	0x080071a0
 80009bc:	200009ec 	.word	0x200009ec

080009c0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	b094      	sub	sp, #80	; 0x50
 80009c4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009c6:	f107 0320 	add.w	r3, r7, #32
 80009ca:	2230      	movs	r2, #48	; 0x30
 80009cc:	2100      	movs	r1, #0
 80009ce:	4618      	mov	r0, r3
 80009d0:	f006 fbb4 	bl	800713c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009d4:	f107 030c 	add.w	r3, r7, #12
 80009d8:	2200      	movs	r2, #0
 80009da:	601a      	str	r2, [r3, #0]
 80009dc:	605a      	str	r2, [r3, #4]
 80009de:	609a      	str	r2, [r3, #8]
 80009e0:	60da      	str	r2, [r3, #12]
 80009e2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80009e4:	4b2a      	ldr	r3, [pc, #168]	; (8000a90 <SystemClock_Config+0xd0>)
 80009e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009e8:	4a29      	ldr	r2, [pc, #164]	; (8000a90 <SystemClock_Config+0xd0>)
 80009ea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009ee:	6413      	str	r3, [r2, #64]	; 0x40
 80009f0:	4b27      	ldr	r3, [pc, #156]	; (8000a90 <SystemClock_Config+0xd0>)
 80009f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009f8:	60bb      	str	r3, [r7, #8]
 80009fa:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80009fc:	4b25      	ldr	r3, [pc, #148]	; (8000a94 <SystemClock_Config+0xd4>)
 80009fe:	681b      	ldr	r3, [r3, #0]
 8000a00:	4a24      	ldr	r2, [pc, #144]	; (8000a94 <SystemClock_Config+0xd4>)
 8000a02:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000a06:	6013      	str	r3, [r2, #0]
 8000a08:	4b22      	ldr	r3, [pc, #136]	; (8000a94 <SystemClock_Config+0xd4>)
 8000a0a:	681b      	ldr	r3, [r3, #0]
 8000a0c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000a10:	607b      	str	r3, [r7, #4]
 8000a12:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000a14:	2301      	movs	r3, #1
 8000a16:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000a18:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000a1c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a1e:	2302      	movs	r3, #2
 8000a20:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000a22:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000a26:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 12;
 8000a28:	230c      	movs	r3, #12
 8000a2a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 8000a2c:	23c0      	movs	r3, #192	; 0xc0
 8000a2e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000a30:	2302      	movs	r3, #2
 8000a32:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000a34:	2302      	movs	r3, #2
 8000a36:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a38:	f107 0320 	add.w	r3, r7, #32
 8000a3c:	4618      	mov	r0, r3
 8000a3e:	f003 fa3f 	bl	8003ec0 <HAL_RCC_OscConfig>
 8000a42:	4603      	mov	r3, r0
 8000a44:	2b00      	cmp	r3, #0
 8000a46:	d001      	beq.n	8000a4c <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8000a48:	f000 fbc6 	bl	80011d8 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000a4c:	f003 f9e8 	bl	8003e20 <HAL_PWREx_EnableOverDrive>
 8000a50:	4603      	mov	r3, r0
 8000a52:	2b00      	cmp	r3, #0
 8000a54:	d001      	beq.n	8000a5a <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000a56:	f000 fbbf 	bl	80011d8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a5a:	230f      	movs	r3, #15
 8000a5c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a5e:	2302      	movs	r3, #2
 8000a60:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a62:	2300      	movs	r3, #0
 8000a64:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000a66:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000a6a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000a6c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a70:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 8000a72:	f107 030c 	add.w	r3, r7, #12
 8000a76:	2106      	movs	r1, #6
 8000a78:	4618      	mov	r0, r3
 8000a7a:	f003 fcc5 	bl	8004408 <HAL_RCC_ClockConfig>
 8000a7e:	4603      	mov	r3, r0
 8000a80:	2b00      	cmp	r3, #0
 8000a82:	d001      	beq.n	8000a88 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 8000a84:	f000 fba8 	bl	80011d8 <Error_Handler>
  }
}
 8000a88:	bf00      	nop
 8000a8a:	3750      	adds	r7, #80	; 0x50
 8000a8c:	46bd      	mov	sp, r7
 8000a8e:	bd80      	pop	{r7, pc}
 8000a90:	40023800 	.word	0x40023800
 8000a94:	40007000 	.word	0x40007000

08000a98 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	b084      	sub	sp, #16
 8000a9c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000a9e:	463b      	mov	r3, r7
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	601a      	str	r2, [r3, #0]
 8000aa4:	605a      	str	r2, [r3, #4]
 8000aa6:	609a      	str	r2, [r3, #8]
 8000aa8:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000aaa:	4b21      	ldr	r3, [pc, #132]	; (8000b30 <MX_ADC1_Init+0x98>)
 8000aac:	4a21      	ldr	r2, [pc, #132]	; (8000b34 <MX_ADC1_Init+0x9c>)
 8000aae:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000ab0:	4b1f      	ldr	r3, [pc, #124]	; (8000b30 <MX_ADC1_Init+0x98>)
 8000ab2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000ab6:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000ab8:	4b1d      	ldr	r3, [pc, #116]	; (8000b30 <MX_ADC1_Init+0x98>)
 8000aba:	2200      	movs	r2, #0
 8000abc:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000abe:	4b1c      	ldr	r3, [pc, #112]	; (8000b30 <MX_ADC1_Init+0x98>)
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000ac4:	4b1a      	ldr	r3, [pc, #104]	; (8000b30 <MX_ADC1_Init+0x98>)
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000aca:	4b19      	ldr	r3, [pc, #100]	; (8000b30 <MX_ADC1_Init+0x98>)
 8000acc:	2200      	movs	r2, #0
 8000ace:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000ad2:	4b17      	ldr	r3, [pc, #92]	; (8000b30 <MX_ADC1_Init+0x98>)
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000ad8:	4b15      	ldr	r3, [pc, #84]	; (8000b30 <MX_ADC1_Init+0x98>)
 8000ada:	4a17      	ldr	r2, [pc, #92]	; (8000b38 <MX_ADC1_Init+0xa0>)
 8000adc:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000ade:	4b14      	ldr	r3, [pc, #80]	; (8000b30 <MX_ADC1_Init+0x98>)
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000ae4:	4b12      	ldr	r3, [pc, #72]	; (8000b30 <MX_ADC1_Init+0x98>)
 8000ae6:	2201      	movs	r2, #1
 8000ae8:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000aea:	4b11      	ldr	r3, [pc, #68]	; (8000b30 <MX_ADC1_Init+0x98>)
 8000aec:	2200      	movs	r2, #0
 8000aee:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000af2:	4b0f      	ldr	r3, [pc, #60]	; (8000b30 <MX_ADC1_Init+0x98>)
 8000af4:	2201      	movs	r2, #1
 8000af6:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000af8:	480d      	ldr	r0, [pc, #52]	; (8000b30 <MX_ADC1_Init+0x98>)
 8000afa:	f001 fdc1 	bl	8002680 <HAL_ADC_Init>
 8000afe:	4603      	mov	r3, r0
 8000b00:	2b00      	cmp	r3, #0
 8000b02:	d001      	beq.n	8000b08 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000b04:	f000 fb68 	bl	80011d8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8000b08:	2306      	movs	r3, #6
 8000b0a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000b0c:	2301      	movs	r3, #1
 8000b0e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000b10:	2300      	movs	r3, #0
 8000b12:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000b14:	463b      	mov	r3, r7
 8000b16:	4619      	mov	r1, r3
 8000b18:	4805      	ldr	r0, [pc, #20]	; (8000b30 <MX_ADC1_Init+0x98>)
 8000b1a:	f001 fdf5 	bl	8002708 <HAL_ADC_ConfigChannel>
 8000b1e:	4603      	mov	r3, r0
 8000b20:	2b00      	cmp	r3, #0
 8000b22:	d001      	beq.n	8000b28 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000b24:	f000 fb58 	bl	80011d8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000b28:	bf00      	nop
 8000b2a:	3710      	adds	r7, #16
 8000b2c:	46bd      	mov	sp, r7
 8000b2e:	bd80      	pop	{r7, pc}
 8000b30:	20000898 	.word	0x20000898
 8000b34:	40012000 	.word	0x40012000
 8000b38:	0f000001 	.word	0x0f000001

08000b3c <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	b084      	sub	sp, #16
 8000b40:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000b42:	463b      	mov	r3, r7
 8000b44:	2200      	movs	r2, #0
 8000b46:	601a      	str	r2, [r3, #0]
 8000b48:	605a      	str	r2, [r3, #4]
 8000b4a:	609a      	str	r2, [r3, #8]
 8000b4c:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC3_Init 1 */

  /* USER CODE END ADC3_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 8000b4e:	4b21      	ldr	r3, [pc, #132]	; (8000bd4 <MX_ADC3_Init+0x98>)
 8000b50:	4a21      	ldr	r2, [pc, #132]	; (8000bd8 <MX_ADC3_Init+0x9c>)
 8000b52:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000b54:	4b1f      	ldr	r3, [pc, #124]	; (8000bd4 <MX_ADC3_Init+0x98>)
 8000b56:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000b5a:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8000b5c:	4b1d      	ldr	r3, [pc, #116]	; (8000bd4 <MX_ADC3_Init+0x98>)
 8000b5e:	2200      	movs	r2, #0
 8000b60:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000b62:	4b1c      	ldr	r3, [pc, #112]	; (8000bd4 <MX_ADC3_Init+0x98>)
 8000b64:	2200      	movs	r2, #0
 8000b66:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8000b68:	4b1a      	ldr	r3, [pc, #104]	; (8000bd4 <MX_ADC3_Init+0x98>)
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8000b6e:	4b19      	ldr	r3, [pc, #100]	; (8000bd4 <MX_ADC3_Init+0x98>)
 8000b70:	2200      	movs	r2, #0
 8000b72:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000b76:	4b17      	ldr	r3, [pc, #92]	; (8000bd4 <MX_ADC3_Init+0x98>)
 8000b78:	2200      	movs	r2, #0
 8000b7a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000b7c:	4b15      	ldr	r3, [pc, #84]	; (8000bd4 <MX_ADC3_Init+0x98>)
 8000b7e:	4a17      	ldr	r2, [pc, #92]	; (8000bdc <MX_ADC3_Init+0xa0>)
 8000b80:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000b82:	4b14      	ldr	r3, [pc, #80]	; (8000bd4 <MX_ADC3_Init+0x98>)
 8000b84:	2200      	movs	r2, #0
 8000b86:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 8000b88:	4b12      	ldr	r3, [pc, #72]	; (8000bd4 <MX_ADC3_Init+0x98>)
 8000b8a:	2201      	movs	r2, #1
 8000b8c:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8000b8e:	4b11      	ldr	r3, [pc, #68]	; (8000bd4 <MX_ADC3_Init+0x98>)
 8000b90:	2200      	movs	r2, #0
 8000b92:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000b96:	4b0f      	ldr	r3, [pc, #60]	; (8000bd4 <MX_ADC3_Init+0x98>)
 8000b98:	2201      	movs	r2, #1
 8000b9a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8000b9c:	480d      	ldr	r0, [pc, #52]	; (8000bd4 <MX_ADC3_Init+0x98>)
 8000b9e:	f001 fd6f 	bl	8002680 <HAL_ADC_Init>
 8000ba2:	4603      	mov	r3, r0
 8000ba4:	2b00      	cmp	r3, #0
 8000ba6:	d001      	beq.n	8000bac <MX_ADC3_Init+0x70>
  {
    Error_Handler();
 8000ba8:	f000 fb16 	bl	80011d8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000bac:	2305      	movs	r3, #5
 8000bae:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000bb0:	2301      	movs	r3, #1
 8000bb2:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000bb4:	2300      	movs	r3, #0
 8000bb6:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000bb8:	463b      	mov	r3, r7
 8000bba:	4619      	mov	r1, r3
 8000bbc:	4805      	ldr	r0, [pc, #20]	; (8000bd4 <MX_ADC3_Init+0x98>)
 8000bbe:	f001 fda3 	bl	8002708 <HAL_ADC_ConfigChannel>
 8000bc2:	4603      	mov	r3, r0
 8000bc4:	2b00      	cmp	r3, #0
 8000bc6:	d001      	beq.n	8000bcc <MX_ADC3_Init+0x90>
  {
    Error_Handler();
 8000bc8:	f000 fb06 	bl	80011d8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8000bcc:	bf00      	nop
 8000bce:	3710      	adds	r7, #16
 8000bd0:	46bd      	mov	sp, r7
 8000bd2:	bd80      	pop	{r7, pc}
 8000bd4:	200008e0 	.word	0x200008e0
 8000bd8:	40012200 	.word	0x40012200
 8000bdc:	0f000001 	.word	0x0f000001

08000be0 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8000be4:	4b17      	ldr	r3, [pc, #92]	; (8000c44 <MX_CAN1_Init+0x64>)
 8000be6:	4a18      	ldr	r2, [pc, #96]	; (8000c48 <MX_CAN1_Init+0x68>)
 8000be8:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 6;
 8000bea:	4b16      	ldr	r3, [pc, #88]	; (8000c44 <MX_CAN1_Init+0x64>)
 8000bec:	2206      	movs	r2, #6
 8000bee:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000bf0:	4b14      	ldr	r3, [pc, #80]	; (8000c44 <MX_CAN1_Init+0x64>)
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000bf6:	4b13      	ldr	r3, [pc, #76]	; (8000c44 <MX_CAN1_Init+0x64>)
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_6TQ;
 8000bfc:	4b11      	ldr	r3, [pc, #68]	; (8000c44 <MX_CAN1_Init+0x64>)
 8000bfe:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
 8000c02:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 8000c04:	4b0f      	ldr	r3, [pc, #60]	; (8000c44 <MX_CAN1_Init+0x64>)
 8000c06:	2200      	movs	r2, #0
 8000c08:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000c0a:	4b0e      	ldr	r3, [pc, #56]	; (8000c44 <MX_CAN1_Init+0x64>)
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = ENABLE;
 8000c10:	4b0c      	ldr	r3, [pc, #48]	; (8000c44 <MX_CAN1_Init+0x64>)
 8000c12:	2201      	movs	r2, #1
 8000c14:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = ENABLE;
 8000c16:	4b0b      	ldr	r3, [pc, #44]	; (8000c44 <MX_CAN1_Init+0x64>)
 8000c18:	2201      	movs	r2, #1
 8000c1a:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8000c1c:	4b09      	ldr	r3, [pc, #36]	; (8000c44 <MX_CAN1_Init+0x64>)
 8000c1e:	2200      	movs	r2, #0
 8000c20:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000c22:	4b08      	ldr	r3, [pc, #32]	; (8000c44 <MX_CAN1_Init+0x64>)
 8000c24:	2200      	movs	r2, #0
 8000c26:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8000c28:	4b06      	ldr	r3, [pc, #24]	; (8000c44 <MX_CAN1_Init+0x64>)
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000c2e:	4805      	ldr	r0, [pc, #20]	; (8000c44 <MX_CAN1_Init+0x64>)
 8000c30:	f001 ffae 	bl	8002b90 <HAL_CAN_Init>
 8000c34:	4603      	mov	r3, r0
 8000c36:	2b00      	cmp	r3, #0
 8000c38:	d001      	beq.n	8000c3e <MX_CAN1_Init+0x5e>
  {
    Error_Handler();
 8000c3a:	f000 facd 	bl	80011d8 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8000c3e:	bf00      	nop
 8000c40:	bd80      	pop	{r7, pc}
 8000c42:	bf00      	nop
 8000c44:	20000928 	.word	0x20000928
 8000c48:	40006400 	.word	0x40006400

08000c4c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	b08e      	sub	sp, #56	; 0x38
 8000c50:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000c52:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000c56:	2200      	movs	r2, #0
 8000c58:	601a      	str	r2, [r3, #0]
 8000c5a:	605a      	str	r2, [r3, #4]
 8000c5c:	609a      	str	r2, [r3, #8]
 8000c5e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c60:	f107 031c 	add.w	r3, r7, #28
 8000c64:	2200      	movs	r2, #0
 8000c66:	601a      	str	r2, [r3, #0]
 8000c68:	605a      	str	r2, [r3, #4]
 8000c6a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000c6c:	463b      	mov	r3, r7
 8000c6e:	2200      	movs	r2, #0
 8000c70:	601a      	str	r2, [r3, #0]
 8000c72:	605a      	str	r2, [r3, #4]
 8000c74:	609a      	str	r2, [r3, #8]
 8000c76:	60da      	str	r2, [r3, #12]
 8000c78:	611a      	str	r2, [r3, #16]
 8000c7a:	615a      	str	r2, [r3, #20]
 8000c7c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000c7e:	4b38      	ldr	r3, [pc, #224]	; (8000d60 <MX_TIM2_Init+0x114>)
 8000c80:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000c84:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 96;
 8000c86:	4b36      	ldr	r3, [pc, #216]	; (8000d60 <MX_TIM2_Init+0x114>)
 8000c88:	2260      	movs	r2, #96	; 0x60
 8000c8a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c8c:	4b34      	ldr	r3, [pc, #208]	; (8000d60 <MX_TIM2_Init+0x114>)
 8000c8e:	2200      	movs	r2, #0
 8000c90:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 20000;
 8000c92:	4b33      	ldr	r3, [pc, #204]	; (8000d60 <MX_TIM2_Init+0x114>)
 8000c94:	f644 6220 	movw	r2, #20000	; 0x4e20
 8000c98:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c9a:	4b31      	ldr	r3, [pc, #196]	; (8000d60 <MX_TIM2_Init+0x114>)
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ca0:	4b2f      	ldr	r3, [pc, #188]	; (8000d60 <MX_TIM2_Init+0x114>)
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000ca6:	482e      	ldr	r0, [pc, #184]	; (8000d60 <MX_TIM2_Init+0x114>)
 8000ca8:	f003 fdb2 	bl	8004810 <HAL_TIM_Base_Init>
 8000cac:	4603      	mov	r3, r0
 8000cae:	2b00      	cmp	r3, #0
 8000cb0:	d001      	beq.n	8000cb6 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8000cb2:	f000 fa91 	bl	80011d8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000cb6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000cba:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000cbc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000cc0:	4619      	mov	r1, r3
 8000cc2:	4827      	ldr	r0, [pc, #156]	; (8000d60 <MX_TIM2_Init+0x114>)
 8000cc4:	f004 fa00 	bl	80050c8 <HAL_TIM_ConfigClockSource>
 8000cc8:	4603      	mov	r3, r0
 8000cca:	2b00      	cmp	r3, #0
 8000ccc:	d001      	beq.n	8000cd2 <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8000cce:	f000 fa83 	bl	80011d8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000cd2:	4823      	ldr	r0, [pc, #140]	; (8000d60 <MX_TIM2_Init+0x114>)
 8000cd4:	f003 fe6c 	bl	80049b0 <HAL_TIM_PWM_Init>
 8000cd8:	4603      	mov	r3, r0
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	d001      	beq.n	8000ce2 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8000cde:	f000 fa7b 	bl	80011d8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000cea:	f107 031c 	add.w	r3, r7, #28
 8000cee:	4619      	mov	r1, r3
 8000cf0:	481b      	ldr	r0, [pc, #108]	; (8000d60 <MX_TIM2_Init+0x114>)
 8000cf2:	f004 fe95 	bl	8005a20 <HAL_TIMEx_MasterConfigSynchronization>
 8000cf6:	4603      	mov	r3, r0
 8000cf8:	2b00      	cmp	r3, #0
 8000cfa:	d001      	beq.n	8000d00 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8000cfc:	f000 fa6c 	bl	80011d8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000d00:	2360      	movs	r3, #96	; 0x60
 8000d02:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000d04:	2300      	movs	r3, #0
 8000d06:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000d08:	2300      	movs	r3, #0
 8000d0a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000d10:	463b      	mov	r3, r7
 8000d12:	2200      	movs	r2, #0
 8000d14:	4619      	mov	r1, r3
 8000d16:	4812      	ldr	r0, [pc, #72]	; (8000d60 <MX_TIM2_Init+0x114>)
 8000d18:	f004 f8c6 	bl	8004ea8 <HAL_TIM_PWM_ConfigChannel>
 8000d1c:	4603      	mov	r3, r0
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	d001      	beq.n	8000d26 <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8000d22:	f000 fa59 	bl	80011d8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000d26:	463b      	mov	r3, r7
 8000d28:	2204      	movs	r2, #4
 8000d2a:	4619      	mov	r1, r3
 8000d2c:	480c      	ldr	r0, [pc, #48]	; (8000d60 <MX_TIM2_Init+0x114>)
 8000d2e:	f004 f8bb 	bl	8004ea8 <HAL_TIM_PWM_ConfigChannel>
 8000d32:	4603      	mov	r3, r0
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	d001      	beq.n	8000d3c <MX_TIM2_Init+0xf0>
  {
    Error_Handler();
 8000d38:	f000 fa4e 	bl	80011d8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000d3c:	463b      	mov	r3, r7
 8000d3e:	2208      	movs	r2, #8
 8000d40:	4619      	mov	r1, r3
 8000d42:	4807      	ldr	r0, [pc, #28]	; (8000d60 <MX_TIM2_Init+0x114>)
 8000d44:	f004 f8b0 	bl	8004ea8 <HAL_TIM_PWM_ConfigChannel>
 8000d48:	4603      	mov	r3, r0
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	d001      	beq.n	8000d52 <MX_TIM2_Init+0x106>
  {
    Error_Handler();
 8000d4e:	f000 fa43 	bl	80011d8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000d52:	4803      	ldr	r0, [pc, #12]	; (8000d60 <MX_TIM2_Init+0x114>)
 8000d54:	f000 fb9e 	bl	8001494 <HAL_TIM_MspPostInit>

}
 8000d58:	bf00      	nop
 8000d5a:	3738      	adds	r7, #56	; 0x38
 8000d5c:	46bd      	mov	sp, r7
 8000d5e:	bd80      	pop	{r7, pc}
 8000d60:	20000950 	.word	0x20000950

08000d64 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	b09a      	sub	sp, #104	; 0x68
 8000d68:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000d6a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000d6e:	2200      	movs	r2, #0
 8000d70:	601a      	str	r2, [r3, #0]
 8000d72:	605a      	str	r2, [r3, #4]
 8000d74:	609a      	str	r2, [r3, #8]
 8000d76:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d78:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	601a      	str	r2, [r3, #0]
 8000d80:	605a      	str	r2, [r3, #4]
 8000d82:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000d84:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000d88:	2200      	movs	r2, #0
 8000d8a:	601a      	str	r2, [r3, #0]
 8000d8c:	605a      	str	r2, [r3, #4]
 8000d8e:	609a      	str	r2, [r3, #8]
 8000d90:	60da      	str	r2, [r3, #12]
 8000d92:	611a      	str	r2, [r3, #16]
 8000d94:	615a      	str	r2, [r3, #20]
 8000d96:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000d98:	1d3b      	adds	r3, r7, #4
 8000d9a:	222c      	movs	r2, #44	; 0x2c
 8000d9c:	2100      	movs	r1, #0
 8000d9e:	4618      	mov	r0, r3
 8000da0:	f006 f9cc 	bl	800713c <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8000da4:	4b43      	ldr	r3, [pc, #268]	; (8000eb4 <MX_TIM8_Init+0x150>)
 8000da6:	4a44      	ldr	r2, [pc, #272]	; (8000eb8 <MX_TIM8_Init+0x154>)
 8000da8:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8000daa:	4b42      	ldr	r3, [pc, #264]	; (8000eb4 <MX_TIM8_Init+0x150>)
 8000dac:	2200      	movs	r2, #0
 8000dae:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000db0:	4b40      	ldr	r3, [pc, #256]	; (8000eb4 <MX_TIM8_Init+0x150>)
 8000db2:	2200      	movs	r2, #0
 8000db4:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8000db6:	4b3f      	ldr	r3, [pc, #252]	; (8000eb4 <MX_TIM8_Init+0x150>)
 8000db8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000dbc:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000dbe:	4b3d      	ldr	r3, [pc, #244]	; (8000eb4 <MX_TIM8_Init+0x150>)
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8000dc4:	4b3b      	ldr	r3, [pc, #236]	; (8000eb4 <MX_TIM8_Init+0x150>)
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000dca:	4b3a      	ldr	r3, [pc, #232]	; (8000eb4 <MX_TIM8_Init+0x150>)
 8000dcc:	2200      	movs	r2, #0
 8000dce:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8000dd0:	4838      	ldr	r0, [pc, #224]	; (8000eb4 <MX_TIM8_Init+0x150>)
 8000dd2:	f003 fd1d 	bl	8004810 <HAL_TIM_Base_Init>
 8000dd6:	4603      	mov	r3, r0
 8000dd8:	2b00      	cmp	r3, #0
 8000dda:	d001      	beq.n	8000de0 <MX_TIM8_Init+0x7c>
  {
    Error_Handler();
 8000ddc:	f000 f9fc 	bl	80011d8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000de0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000de4:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8000de6:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000dea:	4619      	mov	r1, r3
 8000dec:	4831      	ldr	r0, [pc, #196]	; (8000eb4 <MX_TIM8_Init+0x150>)
 8000dee:	f004 f96b 	bl	80050c8 <HAL_TIM_ConfigClockSource>
 8000df2:	4603      	mov	r3, r0
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	d001      	beq.n	8000dfc <MX_TIM8_Init+0x98>
  {
    Error_Handler();
 8000df8:	f000 f9ee 	bl	80011d8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8000dfc:	482d      	ldr	r0, [pc, #180]	; (8000eb4 <MX_TIM8_Init+0x150>)
 8000dfe:	f003 fdd7 	bl	80049b0 <HAL_TIM_PWM_Init>
 8000e02:	4603      	mov	r3, r0
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	d001      	beq.n	8000e0c <MX_TIM8_Init+0xa8>
  {
    Error_Handler();
 8000e08:	f000 f9e6 	bl	80011d8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e0c:	2300      	movs	r3, #0
 8000e0e:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000e10:	2300      	movs	r3, #0
 8000e12:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e14:	2300      	movs	r3, #0
 8000e16:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8000e18:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000e1c:	4619      	mov	r1, r3
 8000e1e:	4825      	ldr	r0, [pc, #148]	; (8000eb4 <MX_TIM8_Init+0x150>)
 8000e20:	f004 fdfe 	bl	8005a20 <HAL_TIMEx_MasterConfigSynchronization>
 8000e24:	4603      	mov	r3, r0
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	d001      	beq.n	8000e2e <MX_TIM8_Init+0xca>
  {
    Error_Handler();
 8000e2a:	f000 f9d5 	bl	80011d8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000e2e:	2360      	movs	r3, #96	; 0x60
 8000e30:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 8000e32:	2300      	movs	r3, #0
 8000e34:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000e36:	2300      	movs	r3, #0
 8000e38:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000e3e:	2300      	movs	r3, #0
 8000e40:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000e42:	2300      	movs	r3, #0
 8000e44:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000e46:	2300      	movs	r3, #0
 8000e48:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000e4a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000e4e:	2200      	movs	r2, #0
 8000e50:	4619      	mov	r1, r3
 8000e52:	4818      	ldr	r0, [pc, #96]	; (8000eb4 <MX_TIM8_Init+0x150>)
 8000e54:	f004 f828 	bl	8004ea8 <HAL_TIM_PWM_ConfigChannel>
 8000e58:	4603      	mov	r3, r0
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	d001      	beq.n	8000e62 <MX_TIM8_Init+0xfe>
  {
    Error_Handler();
 8000e5e:	f000 f9bb 	bl	80011d8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000e62:	2300      	movs	r3, #0
 8000e64:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000e66:	2300      	movs	r3, #0
 8000e68:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000e6e:	2300      	movs	r3, #0
 8000e70:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000e72:	2300      	movs	r3, #0
 8000e74:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000e76:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000e7a:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000e7c:	2300      	movs	r3, #0
 8000e7e:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000e80:	2300      	movs	r3, #0
 8000e82:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000e84:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000e88:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000e8e:	2300      	movs	r3, #0
 8000e90:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8000e92:	1d3b      	adds	r3, r7, #4
 8000e94:	4619      	mov	r1, r3
 8000e96:	4807      	ldr	r0, [pc, #28]	; (8000eb4 <MX_TIM8_Init+0x150>)
 8000e98:	f004 fe50 	bl	8005b3c <HAL_TIMEx_ConfigBreakDeadTime>
 8000e9c:	4603      	mov	r3, r0
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	d001      	beq.n	8000ea6 <MX_TIM8_Init+0x142>
  {
    Error_Handler();
 8000ea2:	f000 f999 	bl	80011d8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8000ea6:	4803      	ldr	r0, [pc, #12]	; (8000eb4 <MX_TIM8_Init+0x150>)
 8000ea8:	f000 faf4 	bl	8001494 <HAL_TIM_MspPostInit>

}
 8000eac:	bf00      	nop
 8000eae:	3768      	adds	r7, #104	; 0x68
 8000eb0:	46bd      	mov	sp, r7
 8000eb2:	bd80      	pop	{r7, pc}
 8000eb4:	2000099c 	.word	0x2000099c
 8000eb8:	40010400 	.word	0x40010400

08000ebc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b08a      	sub	sp, #40	; 0x28
 8000ec0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ec2:	f107 0314 	add.w	r3, r7, #20
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	601a      	str	r2, [r3, #0]
 8000eca:	605a      	str	r2, [r3, #4]
 8000ecc:	609a      	str	r2, [r3, #8]
 8000ece:	60da      	str	r2, [r3, #12]
 8000ed0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000ed2:	4b43      	ldr	r3, [pc, #268]	; (8000fe0 <MX_GPIO_Init+0x124>)
 8000ed4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ed6:	4a42      	ldr	r2, [pc, #264]	; (8000fe0 <MX_GPIO_Init+0x124>)
 8000ed8:	f043 0320 	orr.w	r3, r3, #32
 8000edc:	6313      	str	r3, [r2, #48]	; 0x30
 8000ede:	4b40      	ldr	r3, [pc, #256]	; (8000fe0 <MX_GPIO_Init+0x124>)
 8000ee0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ee2:	f003 0320 	and.w	r3, r3, #32
 8000ee6:	613b      	str	r3, [r7, #16]
 8000ee8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000eea:	4b3d      	ldr	r3, [pc, #244]	; (8000fe0 <MX_GPIO_Init+0x124>)
 8000eec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eee:	4a3c      	ldr	r2, [pc, #240]	; (8000fe0 <MX_GPIO_Init+0x124>)
 8000ef0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000ef4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ef6:	4b3a      	ldr	r3, [pc, #232]	; (8000fe0 <MX_GPIO_Init+0x124>)
 8000ef8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000efa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000efe:	60fb      	str	r3, [r7, #12]
 8000f00:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f02:	4b37      	ldr	r3, [pc, #220]	; (8000fe0 <MX_GPIO_Init+0x124>)
 8000f04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f06:	4a36      	ldr	r2, [pc, #216]	; (8000fe0 <MX_GPIO_Init+0x124>)
 8000f08:	f043 0304 	orr.w	r3, r3, #4
 8000f0c:	6313      	str	r3, [r2, #48]	; 0x30
 8000f0e:	4b34      	ldr	r3, [pc, #208]	; (8000fe0 <MX_GPIO_Init+0x124>)
 8000f10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f12:	f003 0304 	and.w	r3, r3, #4
 8000f16:	60bb      	str	r3, [r7, #8]
 8000f18:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f1a:	4b31      	ldr	r3, [pc, #196]	; (8000fe0 <MX_GPIO_Init+0x124>)
 8000f1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f1e:	4a30      	ldr	r2, [pc, #192]	; (8000fe0 <MX_GPIO_Init+0x124>)
 8000f20:	f043 0301 	orr.w	r3, r3, #1
 8000f24:	6313      	str	r3, [r2, #48]	; 0x30
 8000f26:	4b2e      	ldr	r3, [pc, #184]	; (8000fe0 <MX_GPIO_Init+0x124>)
 8000f28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f2a:	f003 0301 	and.w	r3, r3, #1
 8000f2e:	607b      	str	r3, [r7, #4]
 8000f30:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f32:	4b2b      	ldr	r3, [pc, #172]	; (8000fe0 <MX_GPIO_Init+0x124>)
 8000f34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f36:	4a2a      	ldr	r2, [pc, #168]	; (8000fe0 <MX_GPIO_Init+0x124>)
 8000f38:	f043 0302 	orr.w	r3, r3, #2
 8000f3c:	6313      	str	r3, [r2, #48]	; 0x30
 8000f3e:	4b28      	ldr	r3, [pc, #160]	; (8000fe0 <MX_GPIO_Init+0x124>)
 8000f40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f42:	f003 0302 	and.w	r3, r3, #2
 8000f46:	603b      	str	r3, [r7, #0]
 8000f48:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, RIGHT_ENABLE_Pin|LEFT_ENABLE_Pin, GPIO_PIN_RESET);
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	f44f 7140 	mov.w	r1, #768	; 0x300
 8000f50:	4824      	ldr	r0, [pc, #144]	; (8000fe4 <MX_GPIO_Init+0x128>)
 8000f52:	f002 ff4b 	bl	8003dec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, DRS2_EN_Pin|DRS1_EN_Pin, GPIO_PIN_RESET);
 8000f56:	2200      	movs	r2, #0
 8000f58:	2130      	movs	r1, #48	; 0x30
 8000f5a:	4823      	ldr	r0, [pc, #140]	; (8000fe8 <MX_GPIO_Init+0x12c>)
 8000f5c:	f002 ff46 	bl	8003dec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(STATUS2_GPIO_Port, STATUS2_Pin, GPIO_PIN_RESET);
 8000f60:	2200      	movs	r2, #0
 8000f62:	2104      	movs	r1, #4
 8000f64:	4821      	ldr	r0, [pc, #132]	; (8000fec <MX_GPIO_Init+0x130>)
 8000f66:	f002 ff41 	bl	8003dec <HAL_GPIO_WritePin>

  /*Configure GPIO pins : RIGHT_ENABLE_Pin LEFT_ENABLE_Pin */
  GPIO_InitStruct.Pin = RIGHT_ENABLE_Pin|LEFT_ENABLE_Pin;
 8000f6a:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000f6e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f70:	2301      	movs	r3, #1
 8000f72:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f74:	2300      	movs	r3, #0
 8000f76:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f78:	2300      	movs	r3, #0
 8000f7a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000f7c:	f107 0314 	add.w	r3, r7, #20
 8000f80:	4619      	mov	r1, r3
 8000f82:	4818      	ldr	r0, [pc, #96]	; (8000fe4 <MX_GPIO_Init+0x128>)
 8000f84:	f002 fd86 	bl	8003a94 <HAL_GPIO_Init>

  /*Configure GPIO pins : DRS2_EN_Pin DRS1_EN_Pin */
  GPIO_InitStruct.Pin = DRS2_EN_Pin|DRS1_EN_Pin;
 8000f88:	2330      	movs	r3, #48	; 0x30
 8000f8a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f8c:	2301      	movs	r3, #1
 8000f8e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f90:	2300      	movs	r3, #0
 8000f92:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f94:	2300      	movs	r3, #0
 8000f96:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f98:	f107 0314 	add.w	r3, r7, #20
 8000f9c:	4619      	mov	r1, r3
 8000f9e:	4812      	ldr	r0, [pc, #72]	; (8000fe8 <MX_GPIO_Init+0x12c>)
 8000fa0:	f002 fd78 	bl	8003a94 <HAL_GPIO_Init>

  /*Configure GPIO pin : STATUS_1_Pin */
  GPIO_InitStruct.Pin = STATUS_1_Pin;
 8000fa4:	2302      	movs	r3, #2
 8000fa6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000fa8:	2303      	movs	r3, #3
 8000faa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fac:	2300      	movs	r3, #0
 8000fae:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(STATUS_1_GPIO_Port, &GPIO_InitStruct);
 8000fb0:	f107 0314 	add.w	r3, r7, #20
 8000fb4:	4619      	mov	r1, r3
 8000fb6:	480d      	ldr	r0, [pc, #52]	; (8000fec <MX_GPIO_Init+0x130>)
 8000fb8:	f002 fd6c 	bl	8003a94 <HAL_GPIO_Init>

  /*Configure GPIO pin : STATUS2_Pin */
  GPIO_InitStruct.Pin = STATUS2_Pin;
 8000fbc:	2304      	movs	r3, #4
 8000fbe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fc0:	2301      	movs	r3, #1
 8000fc2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fc4:	2300      	movs	r3, #0
 8000fc6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fc8:	2300      	movs	r3, #0
 8000fca:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(STATUS2_GPIO_Port, &GPIO_InitStruct);
 8000fcc:	f107 0314 	add.w	r3, r7, #20
 8000fd0:	4619      	mov	r1, r3
 8000fd2:	4806      	ldr	r0, [pc, #24]	; (8000fec <MX_GPIO_Init+0x130>)
 8000fd4:	f002 fd5e 	bl	8003a94 <HAL_GPIO_Init>

}
 8000fd8:	bf00      	nop
 8000fda:	3728      	adds	r7, #40	; 0x28
 8000fdc:	46bd      	mov	sp, r7
 8000fde:	bd80      	pop	{r7, pc}
 8000fe0:	40023800 	.word	0x40023800
 8000fe4:	40021400 	.word	0x40021400
 8000fe8:	40020800 	.word	0x40020800
 8000fec:	40020400 	.word	0x40020400

08000ff0 <task_main_loop>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_task_main_loop */
void task_main_loop(void const * argument)
{
 8000ff0:	b5b0      	push	{r4, r5, r7, lr}
 8000ff2:	b092      	sub	sp, #72	; 0x48
 8000ff4:	af04      	add	r7, sp, #16
 8000ff6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8000ff8:	2100      	movs	r1, #0
 8000ffa:	4868      	ldr	r0, [pc, #416]	; (800119c <task_main_loop+0x1ac>)
 8000ffc:	f003 fd3a 	bl	8004a74 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 8001000:	2104      	movs	r1, #4
 8001002:	4866      	ldr	r0, [pc, #408]	; (800119c <task_main_loop+0x1ac>)
 8001004:	f003 fd36 	bl	8004a74 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 8001008:	2108      	movs	r1, #8
 800100a:	4864      	ldr	r0, [pc, #400]	; (800119c <task_main_loop+0x1ac>)
 800100c:	f003 fd32 	bl	8004a74 <HAL_TIM_PWM_Start>
	data_thresholds* channels = init(&hcan1);
 8001010:	4863      	ldr	r0, [pc, #396]	; (80011a0 <task_main_loop+0x1b0>)
 8001012:	f7ff fa7f 	bl	8000514 <init>
 8001016:	61f8      	str	r0, [r7, #28]
	int check_valid = 0;
 8001018:	2300      	movs	r3, #0
 800101a:	637b      	str	r3, [r7, #52]	; 0x34
	int front_PWM = HIGH_REAR_ANGLE;
 800101c:	f640 0313 	movw	r3, #2067	; 0x813
 8001020:	633b      	str	r3, [r7, #48]	; 0x30
	int rear_PWM = HIGH_REAR_ANGLE;
 8001022:	f640 0313 	movw	r3, #2067	; 0x813
 8001026:	62fb      	str	r3, [r7, #44]	; 0x2c
	for(int i = 0; i < VALID_CHANNELS; i++)
 8001028:	2300      	movs	r3, #0
 800102a:	62bb      	str	r3, [r7, #40]	; 0x28
 800102c:	e014      	b.n	8001058 <task_main_loop+0x68>
	{
		if(valid_data_channel(channels[i].channel_name) == 0)
 800102e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001030:	4613      	mov	r3, r2
 8001032:	005b      	lsls	r3, r3, #1
 8001034:	4413      	add	r3, r2
 8001036:	00db      	lsls	r3, r3, #3
 8001038:	461a      	mov	r2, r3
 800103a:	69fb      	ldr	r3, [r7, #28]
 800103c:	4413      	add	r3, r2
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	4618      	mov	r0, r3
 8001042:	f7ff faf1 	bl	8000628 <valid_data_channel>
 8001046:	4603      	mov	r3, r0
 8001048:	2b00      	cmp	r3, #0
 800104a:	d102      	bne.n	8001052 <task_main_loop+0x62>
			check_valid += 1;
 800104c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800104e:	3301      	adds	r3, #1
 8001050:	637b      	str	r3, [r7, #52]	; 0x34
	for(int i = 0; i < VALID_CHANNELS; i++)
 8001052:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001054:	3301      	adds	r3, #1
 8001056:	62bb      	str	r3, [r7, #40]	; 0x28
 8001058:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800105a:	2b04      	cmp	r3, #4
 800105c:	dde7      	ble.n	800102e <task_main_loop+0x3e>
	}
	while(check_valid == NUM_CHANNELS)
 800105e:	e094      	b.n	800118a <task_main_loop+0x19a>
	{
		int is_pressed_drs = drs_button(rear_PWM);
 8001060:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001062:	f7ff fbe5 	bl	8000830 <drs_button>
 8001066:	61b8      	str	r0, [r7, #24]
		if(is_pressed_drs == 0)
 8001068:	69bb      	ldr	r3, [r7, #24]
 800106a:	2b00      	cmp	r3, #0
 800106c:	d13d      	bne.n	80010ea <task_main_loop+0xfa>
		{
			int rear_angles[NUM_CHANNELS];
			for(int j = 0; j < NUM_CHANNELS; j++)
 800106e:	2300      	movs	r3, #0
 8001070:	627b      	str	r3, [r7, #36]	; 0x24
 8001072:	e030      	b.n	80010d6 <task_main_loop+0xe6>
			{
				parameter_request(channels[j].channel_name);
 8001074:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001076:	4613      	mov	r3, r2
 8001078:	005b      	lsls	r3, r3, #1
 800107a:	4413      	add	r3, r2
 800107c:	00db      	lsls	r3, r3, #3
 800107e:	461a      	mov	r2, r3
 8001080:	69fb      	ldr	r3, [r7, #28]
 8001082:	4413      	add	r3, r2
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	4618      	mov	r0, r3
 8001088:	f7ff fc0e 	bl	80008a8 <parameter_request>
				rear_angles[j] = calculate_rear_wing_angle(channels[j].channel_name, channels[j]);
 800108c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800108e:	4613      	mov	r3, r2
 8001090:	005b      	lsls	r3, r3, #1
 8001092:	4413      	add	r3, r2
 8001094:	00db      	lsls	r3, r3, #3
 8001096:	461a      	mov	r2, r3
 8001098:	69fb      	ldr	r3, [r7, #28]
 800109a:	4413      	add	r3, r2
 800109c:	681d      	ldr	r5, [r3, #0]
 800109e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80010a0:	4613      	mov	r3, r2
 80010a2:	005b      	lsls	r3, r3, #1
 80010a4:	4413      	add	r3, r2
 80010a6:	00db      	lsls	r3, r3, #3
 80010a8:	461a      	mov	r2, r3
 80010aa:	69fb      	ldr	r3, [r7, #28]
 80010ac:	4413      	add	r3, r2
 80010ae:	466c      	mov	r4, sp
 80010b0:	f103 020c 	add.w	r2, r3, #12
 80010b4:	ca07      	ldmia	r2, {r0, r1, r2}
 80010b6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80010ba:	cb0e      	ldmia	r3, {r1, r2, r3}
 80010bc:	4628      	mov	r0, r5
 80010be:	f7ff fad5 	bl	800066c <calculate_rear_wing_angle>
 80010c2:	4602      	mov	r2, r0
 80010c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010c6:	009b      	lsls	r3, r3, #2
 80010c8:	3338      	adds	r3, #56	; 0x38
 80010ca:	443b      	add	r3, r7
 80010cc:	f843 2c28 	str.w	r2, [r3, #-40]
			for(int j = 0; j < NUM_CHANNELS; j++)
 80010d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010d2:	3301      	adds	r3, #1
 80010d4:	627b      	str	r3, [r7, #36]	; 0x24
 80010d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010d8:	2b00      	cmp	r3, #0
 80010da:	ddcb      	ble.n	8001074 <task_main_loop+0x84>
			}
			rear_PWM = determine_wing_angle(rear_angles);
 80010dc:	f107 0310 	add.w	r3, r7, #16
 80010e0:	4618      	mov	r0, r3
 80010e2:	f7ff fb81 	bl	80007e8 <determine_wing_angle>
 80010e6:	62f8      	str	r0, [r7, #44]	; 0x2c
 80010e8:	e001      	b.n	80010ee <task_main_loop+0xfe>
		}
		else
		{
			rear_PWM = is_pressed_drs;
 80010ea:	69bb      	ldr	r3, [r7, #24]
 80010ec:	62fb      	str	r3, [r7, #44]	; 0x2c
		}
		int is_pressed_front = aa_button(front_PWM);
 80010ee:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80010f0:	f7ff fbbc 	bl	800086c <aa_button>
 80010f4:	6178      	str	r0, [r7, #20]
		if(is_pressed_front == 0)
 80010f6:	697b      	ldr	r3, [r7, #20]
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d13d      	bne.n	8001178 <task_main_loop+0x188>
		{
			int front_angles[NUM_CHANNELS];
			for(int j = 0; j < NUM_CHANNELS; j++)
 80010fc:	2300      	movs	r3, #0
 80010fe:	623b      	str	r3, [r7, #32]
 8001100:	e030      	b.n	8001164 <task_main_loop+0x174>
			{
				parameter_request(channels[j].channel_name);
 8001102:	6a3a      	ldr	r2, [r7, #32]
 8001104:	4613      	mov	r3, r2
 8001106:	005b      	lsls	r3, r3, #1
 8001108:	4413      	add	r3, r2
 800110a:	00db      	lsls	r3, r3, #3
 800110c:	461a      	mov	r2, r3
 800110e:	69fb      	ldr	r3, [r7, #28]
 8001110:	4413      	add	r3, r2
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	4618      	mov	r0, r3
 8001116:	f7ff fbc7 	bl	80008a8 <parameter_request>
				front_angles[j] = calculate_front_wing_angle(channels[j].channel_name, channels[j]);
 800111a:	6a3a      	ldr	r2, [r7, #32]
 800111c:	4613      	mov	r3, r2
 800111e:	005b      	lsls	r3, r3, #1
 8001120:	4413      	add	r3, r2
 8001122:	00db      	lsls	r3, r3, #3
 8001124:	461a      	mov	r2, r3
 8001126:	69fb      	ldr	r3, [r7, #28]
 8001128:	4413      	add	r3, r2
 800112a:	681d      	ldr	r5, [r3, #0]
 800112c:	6a3a      	ldr	r2, [r7, #32]
 800112e:	4613      	mov	r3, r2
 8001130:	005b      	lsls	r3, r3, #1
 8001132:	4413      	add	r3, r2
 8001134:	00db      	lsls	r3, r3, #3
 8001136:	461a      	mov	r2, r3
 8001138:	69fb      	ldr	r3, [r7, #28]
 800113a:	4413      	add	r3, r2
 800113c:	466c      	mov	r4, sp
 800113e:	f103 020c 	add.w	r2, r3, #12
 8001142:	ca07      	ldmia	r2, {r0, r1, r2}
 8001144:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8001148:	cb0e      	ldmia	r3, {r1, r2, r3}
 800114a:	4628      	mov	r0, r5
 800114c:	f7ff faed 	bl	800072a <calculate_front_wing_angle>
 8001150:	4602      	mov	r2, r0
 8001152:	6a3b      	ldr	r3, [r7, #32]
 8001154:	009b      	lsls	r3, r3, #2
 8001156:	3338      	adds	r3, #56	; 0x38
 8001158:	443b      	add	r3, r7
 800115a:	f843 2c2c 	str.w	r2, [r3, #-44]
			for(int j = 0; j < NUM_CHANNELS; j++)
 800115e:	6a3b      	ldr	r3, [r7, #32]
 8001160:	3301      	adds	r3, #1
 8001162:	623b      	str	r3, [r7, #32]
 8001164:	6a3b      	ldr	r3, [r7, #32]
 8001166:	2b00      	cmp	r3, #0
 8001168:	ddcb      	ble.n	8001102 <task_main_loop+0x112>
			}
			front_PWM = determine_wing_angle(front_angles);
 800116a:	f107 030c 	add.w	r3, r7, #12
 800116e:	4618      	mov	r0, r3
 8001170:	f7ff fb3a 	bl	80007e8 <determine_wing_angle>
 8001174:	6338      	str	r0, [r7, #48]	; 0x30
 8001176:	e001      	b.n	800117c <task_main_loop+0x18c>
		}
		else
		{
			front_PWM = is_pressed_front;
 8001178:	697b      	ldr	r3, [r7, #20]
 800117a:	633b      	str	r3, [r7, #48]	; 0x30
		}
		PWM_generation(rear_PWM, front_PWM);
 800117c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800117e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001180:	f7ff fbaa 	bl	80008d8 <PWM_generation>
		osDelay(25);
 8001184:	2019      	movs	r0, #25
 8001186:	f004 fde0 	bl	8005d4a <osDelay>
	while(check_valid == NUM_CHANNELS)
 800118a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800118c:	2b01      	cmp	r3, #1
 800118e:	f43f af67 	beq.w	8001060 <task_main_loop+0x70>
    }
  /* USER CODE END 5 */
}
 8001192:	bf00      	nop
 8001194:	bf00      	nop
 8001196:	3738      	adds	r7, #56	; 0x38
 8001198:	46bd      	mov	sp, r7
 800119a:	bdb0      	pop	{r4, r5, r7, pc}
 800119c:	20000950 	.word	0x20000950
 80011a0:	20000928 	.word	0x20000928

080011a4 <task_gcan_hw>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_task_gcan_hw */
void task_gcan_hw(void const * argument)
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	b082      	sub	sp, #8
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN task_gcan_hw */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80011ac:	2001      	movs	r0, #1
 80011ae:	f004 fdcc 	bl	8005d4a <osDelay>
 80011b2:	e7fb      	b.n	80011ac <task_gcan_hw+0x8>

080011b4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	b082      	sub	sp, #8
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	4a04      	ldr	r2, [pc, #16]	; (80011d4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80011c2:	4293      	cmp	r3, r2
 80011c4:	d101      	bne.n	80011ca <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80011c6:	f001 fa13 	bl	80025f0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80011ca:	bf00      	nop
 80011cc:	3708      	adds	r7, #8
 80011ce:	46bd      	mov	sp, r7
 80011d0:	bd80      	pop	{r7, pc}
 80011d2:	bf00      	nop
 80011d4:	40001000 	.word	0x40001000

080011d8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80011d8:	b480      	push	{r7}
 80011da:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80011dc:	b672      	cpsid	i
}
 80011de:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80011e0:	e7fe      	b.n	80011e0 <Error_Handler+0x8>
	...

080011e4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	b082      	sub	sp, #8
 80011e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80011ea:	4b11      	ldr	r3, [pc, #68]	; (8001230 <HAL_MspInit+0x4c>)
 80011ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011ee:	4a10      	ldr	r2, [pc, #64]	; (8001230 <HAL_MspInit+0x4c>)
 80011f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011f4:	6413      	str	r3, [r2, #64]	; 0x40
 80011f6:	4b0e      	ldr	r3, [pc, #56]	; (8001230 <HAL_MspInit+0x4c>)
 80011f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011fe:	607b      	str	r3, [r7, #4]
 8001200:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001202:	4b0b      	ldr	r3, [pc, #44]	; (8001230 <HAL_MspInit+0x4c>)
 8001204:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001206:	4a0a      	ldr	r2, [pc, #40]	; (8001230 <HAL_MspInit+0x4c>)
 8001208:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800120c:	6453      	str	r3, [r2, #68]	; 0x44
 800120e:	4b08      	ldr	r3, [pc, #32]	; (8001230 <HAL_MspInit+0x4c>)
 8001210:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001212:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001216:	603b      	str	r3, [r7, #0]
 8001218:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800121a:	2200      	movs	r2, #0
 800121c:	210f      	movs	r1, #15
 800121e:	f06f 0001 	mvn.w	r0, #1
 8001222:	f002 fc0d 	bl	8003a40 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001226:	bf00      	nop
 8001228:	3708      	adds	r7, #8
 800122a:	46bd      	mov	sp, r7
 800122c:	bd80      	pop	{r7, pc}
 800122e:	bf00      	nop
 8001230:	40023800 	.word	0x40023800

08001234 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001234:	b580      	push	{r7, lr}
 8001236:	b08e      	sub	sp, #56	; 0x38
 8001238:	af00      	add	r7, sp, #0
 800123a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800123c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001240:	2200      	movs	r2, #0
 8001242:	601a      	str	r2, [r3, #0]
 8001244:	605a      	str	r2, [r3, #4]
 8001246:	609a      	str	r2, [r3, #8]
 8001248:	60da      	str	r2, [r3, #12]
 800124a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	4a42      	ldr	r2, [pc, #264]	; (800135c <HAL_ADC_MspInit+0x128>)
 8001252:	4293      	cmp	r3, r2
 8001254:	d154      	bne.n	8001300 <HAL_ADC_MspInit+0xcc>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001256:	4b42      	ldr	r3, [pc, #264]	; (8001360 <HAL_ADC_MspInit+0x12c>)
 8001258:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800125a:	4a41      	ldr	r2, [pc, #260]	; (8001360 <HAL_ADC_MspInit+0x12c>)
 800125c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001260:	6453      	str	r3, [r2, #68]	; 0x44
 8001262:	4b3f      	ldr	r3, [pc, #252]	; (8001360 <HAL_ADC_MspInit+0x12c>)
 8001264:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001266:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800126a:	623b      	str	r3, [r7, #32]
 800126c:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800126e:	4b3c      	ldr	r3, [pc, #240]	; (8001360 <HAL_ADC_MspInit+0x12c>)
 8001270:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001272:	4a3b      	ldr	r2, [pc, #236]	; (8001360 <HAL_ADC_MspInit+0x12c>)
 8001274:	f043 0304 	orr.w	r3, r3, #4
 8001278:	6313      	str	r3, [r2, #48]	; 0x30
 800127a:	4b39      	ldr	r3, [pc, #228]	; (8001360 <HAL_ADC_MspInit+0x12c>)
 800127c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800127e:	f003 0304 	and.w	r3, r3, #4
 8001282:	61fb      	str	r3, [r7, #28]
 8001284:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001286:	4b36      	ldr	r3, [pc, #216]	; (8001360 <HAL_ADC_MspInit+0x12c>)
 8001288:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800128a:	4a35      	ldr	r2, [pc, #212]	; (8001360 <HAL_ADC_MspInit+0x12c>)
 800128c:	f043 0301 	orr.w	r3, r3, #1
 8001290:	6313      	str	r3, [r2, #48]	; 0x30
 8001292:	4b33      	ldr	r3, [pc, #204]	; (8001360 <HAL_ADC_MspInit+0x12c>)
 8001294:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001296:	f003 0301 	and.w	r3, r3, #1
 800129a:	61bb      	str	r3, [r7, #24]
 800129c:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800129e:	4b30      	ldr	r3, [pc, #192]	; (8001360 <HAL_ADC_MspInit+0x12c>)
 80012a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012a2:	4a2f      	ldr	r2, [pc, #188]	; (8001360 <HAL_ADC_MspInit+0x12c>)
 80012a4:	f043 0302 	orr.w	r3, r3, #2
 80012a8:	6313      	str	r3, [r2, #48]	; 0x30
 80012aa:	4b2d      	ldr	r3, [pc, #180]	; (8001360 <HAL_ADC_MspInit+0x12c>)
 80012ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ae:	f003 0302 	and.w	r3, r3, #2
 80012b2:	617b      	str	r3, [r7, #20]
 80012b4:	697b      	ldr	r3, [r7, #20]
    PA4     ------> ADC1_IN4
    PA6     ------> ADC1_IN6
    PA7     ------> ADC1_IN7
    PB0     ------> ADC1_IN8
    */
    GPIO_InitStruct.Pin = ANLG_1_Pin|ANLG_2_Pin|ANLG_3_Pin|ANLG_5_Pin;
 80012b6:	230f      	movs	r3, #15
 80012b8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80012ba:	2303      	movs	r3, #3
 80012bc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012be:	2300      	movs	r3, #0
 80012c0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80012c2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012c6:	4619      	mov	r1, r3
 80012c8:	4826      	ldr	r0, [pc, #152]	; (8001364 <HAL_ADC_MspInit+0x130>)
 80012ca:	f002 fbe3 	bl	8003a94 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DIG_1_Pin|ANLG_4_Pin|DIG_2_Pin|DRS_ISENSE_OUT_2_Pin;
 80012ce:	23d8      	movs	r3, #216	; 0xd8
 80012d0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80012d2:	2303      	movs	r3, #3
 80012d4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012d6:	2300      	movs	r3, #0
 80012d8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012da:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012de:	4619      	mov	r1, r3
 80012e0:	4821      	ldr	r0, [pc, #132]	; (8001368 <HAL_ADC_MspInit+0x134>)
 80012e2:	f002 fbd7 	bl	8003a94 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DRS_ISENSE_OUT_1_Pin;
 80012e6:	2301      	movs	r3, #1
 80012e8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80012ea:	2303      	movs	r3, #3
 80012ec:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ee:	2300      	movs	r3, #0
 80012f0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(DRS_ISENSE_OUT_1_GPIO_Port, &GPIO_InitStruct);
 80012f2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012f6:	4619      	mov	r1, r3
 80012f8:	481c      	ldr	r0, [pc, #112]	; (800136c <HAL_ADC_MspInit+0x138>)
 80012fa:	f002 fbcb 	bl	8003a94 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 80012fe:	e029      	b.n	8001354 <HAL_ADC_MspInit+0x120>
  else if(hadc->Instance==ADC3)
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	4a1a      	ldr	r2, [pc, #104]	; (8001370 <HAL_ADC_MspInit+0x13c>)
 8001306:	4293      	cmp	r3, r2
 8001308:	d124      	bne.n	8001354 <HAL_ADC_MspInit+0x120>
    __HAL_RCC_ADC3_CLK_ENABLE();
 800130a:	4b15      	ldr	r3, [pc, #84]	; (8001360 <HAL_ADC_MspInit+0x12c>)
 800130c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800130e:	4a14      	ldr	r2, [pc, #80]	; (8001360 <HAL_ADC_MspInit+0x12c>)
 8001310:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001314:	6453      	str	r3, [r2, #68]	; 0x44
 8001316:	4b12      	ldr	r3, [pc, #72]	; (8001360 <HAL_ADC_MspInit+0x12c>)
 8001318:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800131a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800131e:	613b      	str	r3, [r7, #16]
 8001320:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001322:	4b0f      	ldr	r3, [pc, #60]	; (8001360 <HAL_ADC_MspInit+0x12c>)
 8001324:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001326:	4a0e      	ldr	r2, [pc, #56]	; (8001360 <HAL_ADC_MspInit+0x12c>)
 8001328:	f043 0320 	orr.w	r3, r3, #32
 800132c:	6313      	str	r3, [r2, #48]	; 0x30
 800132e:	4b0c      	ldr	r3, [pc, #48]	; (8001360 <HAL_ADC_MspInit+0x12c>)
 8001330:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001332:	f003 0320 	and.w	r3, r3, #32
 8001336:	60fb      	str	r3, [r7, #12]
 8001338:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = FRONT_ISENSE_OUT_R_Pin|FRONT_ISENSE_OUT_L_Pin;
 800133a:	f44f 6390 	mov.w	r3, #1152	; 0x480
 800133e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001340:	2303      	movs	r3, #3
 8001342:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001344:	2300      	movs	r3, #0
 8001346:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001348:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800134c:	4619      	mov	r1, r3
 800134e:	4809      	ldr	r0, [pc, #36]	; (8001374 <HAL_ADC_MspInit+0x140>)
 8001350:	f002 fba0 	bl	8003a94 <HAL_GPIO_Init>
}
 8001354:	bf00      	nop
 8001356:	3738      	adds	r7, #56	; 0x38
 8001358:	46bd      	mov	sp, r7
 800135a:	bd80      	pop	{r7, pc}
 800135c:	40012000 	.word	0x40012000
 8001360:	40023800 	.word	0x40023800
 8001364:	40020800 	.word	0x40020800
 8001368:	40020000 	.word	0x40020000
 800136c:	40020400 	.word	0x40020400
 8001370:	40012200 	.word	0x40012200
 8001374:	40021400 	.word	0x40021400

08001378 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8001378:	b580      	push	{r7, lr}
 800137a:	b08a      	sub	sp, #40	; 0x28
 800137c:	af00      	add	r7, sp, #0
 800137e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001380:	f107 0314 	add.w	r3, r7, #20
 8001384:	2200      	movs	r2, #0
 8001386:	601a      	str	r2, [r3, #0]
 8001388:	605a      	str	r2, [r3, #4]
 800138a:	609a      	str	r2, [r3, #8]
 800138c:	60da      	str	r2, [r3, #12]
 800138e:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	4a23      	ldr	r2, [pc, #140]	; (8001424 <HAL_CAN_MspInit+0xac>)
 8001396:	4293      	cmp	r3, r2
 8001398:	d140      	bne.n	800141c <HAL_CAN_MspInit+0xa4>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 800139a:	4b23      	ldr	r3, [pc, #140]	; (8001428 <HAL_CAN_MspInit+0xb0>)
 800139c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800139e:	4a22      	ldr	r2, [pc, #136]	; (8001428 <HAL_CAN_MspInit+0xb0>)
 80013a0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80013a4:	6413      	str	r3, [r2, #64]	; 0x40
 80013a6:	4b20      	ldr	r3, [pc, #128]	; (8001428 <HAL_CAN_MspInit+0xb0>)
 80013a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80013ae:	613b      	str	r3, [r7, #16]
 80013b0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80013b2:	4b1d      	ldr	r3, [pc, #116]	; (8001428 <HAL_CAN_MspInit+0xb0>)
 80013b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013b6:	4a1c      	ldr	r2, [pc, #112]	; (8001428 <HAL_CAN_MspInit+0xb0>)
 80013b8:	f043 0302 	orr.w	r3, r3, #2
 80013bc:	6313      	str	r3, [r2, #48]	; 0x30
 80013be:	4b1a      	ldr	r3, [pc, #104]	; (8001428 <HAL_CAN_MspInit+0xb0>)
 80013c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013c2:	f003 0302 	and.w	r3, r3, #2
 80013c6:	60fb      	str	r3, [r7, #12]
 80013c8:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PB8     ------> CAN1_RX
    PB9     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80013ca:	f44f 7340 	mov.w	r3, #768	; 0x300
 80013ce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013d0:	2302      	movs	r3, #2
 80013d2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013d4:	2300      	movs	r3, #0
 80013d6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013d8:	2303      	movs	r3, #3
 80013da:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 80013dc:	2309      	movs	r3, #9
 80013de:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013e0:	f107 0314 	add.w	r3, r7, #20
 80013e4:	4619      	mov	r1, r3
 80013e6:	4811      	ldr	r0, [pc, #68]	; (800142c <HAL_CAN_MspInit+0xb4>)
 80013e8:	f002 fb54 	bl	8003a94 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_TX_IRQn, 5, 0);
 80013ec:	2200      	movs	r2, #0
 80013ee:	2105      	movs	r1, #5
 80013f0:	2013      	movs	r0, #19
 80013f2:	f002 fb25 	bl	8003a40 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_TX_IRQn);
 80013f6:	2013      	movs	r0, #19
 80013f8:	f002 fb3e 	bl	8003a78 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 5, 0);
 80013fc:	2200      	movs	r2, #0
 80013fe:	2105      	movs	r1, #5
 8001400:	2014      	movs	r0, #20
 8001402:	f002 fb1d 	bl	8003a40 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8001406:	2014      	movs	r0, #20
 8001408:	f002 fb36 	bl	8003a78 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 5, 0);
 800140c:	2200      	movs	r2, #0
 800140e:	2105      	movs	r1, #5
 8001410:	2015      	movs	r0, #21
 8001412:	f002 fb15 	bl	8003a40 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 8001416:	2015      	movs	r0, #21
 8001418:	f002 fb2e 	bl	8003a78 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 800141c:	bf00      	nop
 800141e:	3728      	adds	r7, #40	; 0x28
 8001420:	46bd      	mov	sp, r7
 8001422:	bd80      	pop	{r7, pc}
 8001424:	40006400 	.word	0x40006400
 8001428:	40023800 	.word	0x40023800
 800142c:	40020400 	.word	0x40020400

08001430 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001430:	b480      	push	{r7}
 8001432:	b085      	sub	sp, #20
 8001434:	af00      	add	r7, sp, #0
 8001436:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001440:	d10c      	bne.n	800145c <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001442:	4b12      	ldr	r3, [pc, #72]	; (800148c <HAL_TIM_Base_MspInit+0x5c>)
 8001444:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001446:	4a11      	ldr	r2, [pc, #68]	; (800148c <HAL_TIM_Base_MspInit+0x5c>)
 8001448:	f043 0301 	orr.w	r3, r3, #1
 800144c:	6413      	str	r3, [r2, #64]	; 0x40
 800144e:	4b0f      	ldr	r3, [pc, #60]	; (800148c <HAL_TIM_Base_MspInit+0x5c>)
 8001450:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001452:	f003 0301 	and.w	r3, r3, #1
 8001456:	60fb      	str	r3, [r7, #12]
 8001458:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 800145a:	e010      	b.n	800147e <HAL_TIM_Base_MspInit+0x4e>
  else if(htim_base->Instance==TIM8)
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	4a0b      	ldr	r2, [pc, #44]	; (8001490 <HAL_TIM_Base_MspInit+0x60>)
 8001462:	4293      	cmp	r3, r2
 8001464:	d10b      	bne.n	800147e <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8001466:	4b09      	ldr	r3, [pc, #36]	; (800148c <HAL_TIM_Base_MspInit+0x5c>)
 8001468:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800146a:	4a08      	ldr	r2, [pc, #32]	; (800148c <HAL_TIM_Base_MspInit+0x5c>)
 800146c:	f043 0302 	orr.w	r3, r3, #2
 8001470:	6453      	str	r3, [r2, #68]	; 0x44
 8001472:	4b06      	ldr	r3, [pc, #24]	; (800148c <HAL_TIM_Base_MspInit+0x5c>)
 8001474:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001476:	f003 0302 	and.w	r3, r3, #2
 800147a:	60bb      	str	r3, [r7, #8]
 800147c:	68bb      	ldr	r3, [r7, #8]
}
 800147e:	bf00      	nop
 8001480:	3714      	adds	r7, #20
 8001482:	46bd      	mov	sp, r7
 8001484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001488:	4770      	bx	lr
 800148a:	bf00      	nop
 800148c:	40023800 	.word	0x40023800
 8001490:	40010400 	.word	0x40010400

08001494 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001494:	b580      	push	{r7, lr}
 8001496:	b08a      	sub	sp, #40	; 0x28
 8001498:	af00      	add	r7, sp, #0
 800149a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800149c:	f107 0314 	add.w	r3, r7, #20
 80014a0:	2200      	movs	r2, #0
 80014a2:	601a      	str	r2, [r3, #0]
 80014a4:	605a      	str	r2, [r3, #4]
 80014a6:	609a      	str	r2, [r3, #8]
 80014a8:	60da      	str	r2, [r3, #12]
 80014aa:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80014b4:	d11c      	bne.n	80014f0 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014b6:	4b21      	ldr	r3, [pc, #132]	; (800153c <HAL_TIM_MspPostInit+0xa8>)
 80014b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ba:	4a20      	ldr	r2, [pc, #128]	; (800153c <HAL_TIM_MspPostInit+0xa8>)
 80014bc:	f043 0301 	orr.w	r3, r3, #1
 80014c0:	6313      	str	r3, [r2, #48]	; 0x30
 80014c2:	4b1e      	ldr	r3, [pc, #120]	; (800153c <HAL_TIM_MspPostInit+0xa8>)
 80014c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014c6:	f003 0301 	and.w	r3, r3, #1
 80014ca:	613b      	str	r3, [r7, #16]
 80014cc:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA0/WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    PA2     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 80014ce:	2307      	movs	r3, #7
 80014d0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014d2:	2302      	movs	r3, #2
 80014d4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014d6:	2300      	movs	r3, #0
 80014d8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014da:	2300      	movs	r3, #0
 80014dc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80014de:	2301      	movs	r3, #1
 80014e0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014e2:	f107 0314 	add.w	r3, r7, #20
 80014e6:	4619      	mov	r1, r3
 80014e8:	4815      	ldr	r0, [pc, #84]	; (8001540 <HAL_TIM_MspPostInit+0xac>)
 80014ea:	f002 fad3 	bl	8003a94 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 80014ee:	e020      	b.n	8001532 <HAL_TIM_MspPostInit+0x9e>
  else if(htim->Instance==TIM8)
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	4a13      	ldr	r2, [pc, #76]	; (8001544 <HAL_TIM_MspPostInit+0xb0>)
 80014f6:	4293      	cmp	r3, r2
 80014f8:	d11b      	bne.n	8001532 <HAL_TIM_MspPostInit+0x9e>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80014fa:	4b10      	ldr	r3, [pc, #64]	; (800153c <HAL_TIM_MspPostInit+0xa8>)
 80014fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014fe:	4a0f      	ldr	r2, [pc, #60]	; (800153c <HAL_TIM_MspPostInit+0xa8>)
 8001500:	f043 0304 	orr.w	r3, r3, #4
 8001504:	6313      	str	r3, [r2, #48]	; 0x30
 8001506:	4b0d      	ldr	r3, [pc, #52]	; (800153c <HAL_TIM_MspPostInit+0xa8>)
 8001508:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800150a:	f003 0304 	and.w	r3, r3, #4
 800150e:	60fb      	str	r3, [r7, #12]
 8001510:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001512:	2340      	movs	r3, #64	; 0x40
 8001514:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001516:	2302      	movs	r3, #2
 8001518:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800151a:	2300      	movs	r3, #0
 800151c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800151e:	2300      	movs	r3, #0
 8001520:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8001522:	2303      	movs	r3, #3
 8001524:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001526:	f107 0314 	add.w	r3, r7, #20
 800152a:	4619      	mov	r1, r3
 800152c:	4806      	ldr	r0, [pc, #24]	; (8001548 <HAL_TIM_MspPostInit+0xb4>)
 800152e:	f002 fab1 	bl	8003a94 <HAL_GPIO_Init>
}
 8001532:	bf00      	nop
 8001534:	3728      	adds	r7, #40	; 0x28
 8001536:	46bd      	mov	sp, r7
 8001538:	bd80      	pop	{r7, pc}
 800153a:	bf00      	nop
 800153c:	40023800 	.word	0x40023800
 8001540:	40020000 	.word	0x40020000
 8001544:	40010400 	.word	0x40010400
 8001548:	40020800 	.word	0x40020800

0800154c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800154c:	b580      	push	{r7, lr}
 800154e:	b08c      	sub	sp, #48	; 0x30
 8001550:	af00      	add	r7, sp, #0
 8001552:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001554:	2300      	movs	r3, #0
 8001556:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001558:	2300      	movs	r3, #0
 800155a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 800155c:	2200      	movs	r2, #0
 800155e:	6879      	ldr	r1, [r7, #4]
 8001560:	2036      	movs	r0, #54	; 0x36
 8001562:	f002 fa6d 	bl	8003a40 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001566:	2036      	movs	r0, #54	; 0x36
 8001568:	f002 fa86 	bl	8003a78 <HAL_NVIC_EnableIRQ>
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 800156c:	4b1f      	ldr	r3, [pc, #124]	; (80015ec <HAL_InitTick+0xa0>)
 800156e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001570:	4a1e      	ldr	r2, [pc, #120]	; (80015ec <HAL_InitTick+0xa0>)
 8001572:	f043 0310 	orr.w	r3, r3, #16
 8001576:	6413      	str	r3, [r2, #64]	; 0x40
 8001578:	4b1c      	ldr	r3, [pc, #112]	; (80015ec <HAL_InitTick+0xa0>)
 800157a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800157c:	f003 0310 	and.w	r3, r3, #16
 8001580:	60fb      	str	r3, [r7, #12]
 8001582:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001584:	f107 0210 	add.w	r2, r7, #16
 8001588:	f107 0314 	add.w	r3, r7, #20
 800158c:	4611      	mov	r1, r2
 800158e:	4618      	mov	r0, r3
 8001590:	f003 f90c 	bl	80047ac <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8001594:	f003 f8f6 	bl	8004784 <HAL_RCC_GetPCLK1Freq>
 8001598:	4603      	mov	r3, r0
 800159a:	005b      	lsls	r3, r3, #1
 800159c:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800159e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80015a0:	4a13      	ldr	r2, [pc, #76]	; (80015f0 <HAL_InitTick+0xa4>)
 80015a2:	fba2 2303 	umull	r2, r3, r2, r3
 80015a6:	0c9b      	lsrs	r3, r3, #18
 80015a8:	3b01      	subs	r3, #1
 80015aa:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80015ac:	4b11      	ldr	r3, [pc, #68]	; (80015f4 <HAL_InitTick+0xa8>)
 80015ae:	4a12      	ldr	r2, [pc, #72]	; (80015f8 <HAL_InitTick+0xac>)
 80015b0:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80015b2:	4b10      	ldr	r3, [pc, #64]	; (80015f4 <HAL_InitTick+0xa8>)
 80015b4:	f240 32e7 	movw	r2, #999	; 0x3e7
 80015b8:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80015ba:	4a0e      	ldr	r2, [pc, #56]	; (80015f4 <HAL_InitTick+0xa8>)
 80015bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80015be:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80015c0:	4b0c      	ldr	r3, [pc, #48]	; (80015f4 <HAL_InitTick+0xa8>)
 80015c2:	2200      	movs	r2, #0
 80015c4:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015c6:	4b0b      	ldr	r3, [pc, #44]	; (80015f4 <HAL_InitTick+0xa8>)
 80015c8:	2200      	movs	r2, #0
 80015ca:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 80015cc:	4809      	ldr	r0, [pc, #36]	; (80015f4 <HAL_InitTick+0xa8>)
 80015ce:	f003 f91f 	bl	8004810 <HAL_TIM_Base_Init>
 80015d2:	4603      	mov	r3, r0
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d104      	bne.n	80015e2 <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 80015d8:	4806      	ldr	r0, [pc, #24]	; (80015f4 <HAL_InitTick+0xa8>)
 80015da:	f003 f971 	bl	80048c0 <HAL_TIM_Base_Start_IT>
 80015de:	4603      	mov	r3, r0
 80015e0:	e000      	b.n	80015e4 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 80015e2:	2301      	movs	r3, #1
}
 80015e4:	4618      	mov	r0, r3
 80015e6:	3730      	adds	r7, #48	; 0x30
 80015e8:	46bd      	mov	sp, r7
 80015ea:	bd80      	pop	{r7, pc}
 80015ec:	40023800 	.word	0x40023800
 80015f0:	431bde83 	.word	0x431bde83
 80015f4:	200009f0 	.word	0x200009f0
 80015f8:	40001000 	.word	0x40001000

080015fc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80015fc:	b480      	push	{r7}
 80015fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001600:	e7fe      	b.n	8001600 <NMI_Handler+0x4>

08001602 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001602:	b480      	push	{r7}
 8001604:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001606:	e7fe      	b.n	8001606 <HardFault_Handler+0x4>

08001608 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001608:	b480      	push	{r7}
 800160a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800160c:	e7fe      	b.n	800160c <MemManage_Handler+0x4>

0800160e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800160e:	b480      	push	{r7}
 8001610:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001612:	e7fe      	b.n	8001612 <BusFault_Handler+0x4>

08001614 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001614:	b480      	push	{r7}
 8001616:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001618:	e7fe      	b.n	8001618 <UsageFault_Handler+0x4>

0800161a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800161a:	b480      	push	{r7}
 800161c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800161e:	bf00      	nop
 8001620:	46bd      	mov	sp, r7
 8001622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001626:	4770      	bx	lr

08001628 <CAN1_TX_IRQHandler>:

/**
  * @brief This function handles CAN1 TX interrupts.
  */
void CAN1_TX_IRQHandler(void)
{
 8001628:	b580      	push	{r7, lr}
 800162a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_TX_IRQn 0 */

  /* USER CODE END CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 800162c:	4802      	ldr	r0, [pc, #8]	; (8001638 <CAN1_TX_IRQHandler+0x10>)
 800162e:	f001 ff66 	bl	80034fe <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_TX_IRQn 1 */

  /* USER CODE END CAN1_TX_IRQn 1 */
}
 8001632:	bf00      	nop
 8001634:	bd80      	pop	{r7, pc}
 8001636:	bf00      	nop
 8001638:	20000928 	.word	0x20000928

0800163c <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 800163c:	b580      	push	{r7, lr}
 800163e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8001640:	4802      	ldr	r0, [pc, #8]	; (800164c <CAN1_RX0_IRQHandler+0x10>)
 8001642:	f001 ff5c 	bl	80034fe <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8001646:	bf00      	nop
 8001648:	bd80      	pop	{r7, pc}
 800164a:	bf00      	nop
 800164c:	20000928 	.word	0x20000928

08001650 <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN1 RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 8001650:	b580      	push	{r7, lr}
 8001652:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8001654:	4802      	ldr	r0, [pc, #8]	; (8001660 <CAN1_RX1_IRQHandler+0x10>)
 8001656:	f001 ff52 	bl	80034fe <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 800165a:	bf00      	nop
 800165c:	bd80      	pop	{r7, pc}
 800165e:	bf00      	nop
 8001660:	20000928 	.word	0x20000928

08001664 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001664:	b580      	push	{r7, lr}
 8001666:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001668:	4802      	ldr	r0, [pc, #8]	; (8001674 <TIM6_DAC_IRQHandler+0x10>)
 800166a:	f003 fafd 	bl	8004c68 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800166e:	bf00      	nop
 8001670:	bd80      	pop	{r7, pc}
 8001672:	bf00      	nop
 8001674:	200009f0 	.word	0x200009f0

08001678 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001678:	b480      	push	{r7}
 800167a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800167c:	4b06      	ldr	r3, [pc, #24]	; (8001698 <SystemInit+0x20>)
 800167e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001682:	4a05      	ldr	r2, [pc, #20]	; (8001698 <SystemInit+0x20>)
 8001684:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001688:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800168c:	bf00      	nop
 800168e:	46bd      	mov	sp, r7
 8001690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001694:	4770      	bx	lr
 8001696:	bf00      	nop
 8001698:	e000ed00 	.word	0xe000ed00

0800169c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800169c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80016d4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80016a0:	480d      	ldr	r0, [pc, #52]	; (80016d8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80016a2:	490e      	ldr	r1, [pc, #56]	; (80016dc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80016a4:	4a0e      	ldr	r2, [pc, #56]	; (80016e0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80016a6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80016a8:	e002      	b.n	80016b0 <LoopCopyDataInit>

080016aa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80016aa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80016ac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80016ae:	3304      	adds	r3, #4

080016b0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80016b0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80016b2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80016b4:	d3f9      	bcc.n	80016aa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80016b6:	4a0b      	ldr	r2, [pc, #44]	; (80016e4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80016b8:	4c0b      	ldr	r4, [pc, #44]	; (80016e8 <LoopFillZerobss+0x26>)
  movs r3, #0
 80016ba:	2300      	movs	r3, #0
  b LoopFillZerobss
 80016bc:	e001      	b.n	80016c2 <LoopFillZerobss>

080016be <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80016be:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80016c0:	3204      	adds	r2, #4

080016c2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80016c2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80016c4:	d3fb      	bcc.n	80016be <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80016c6:	f7ff ffd7 	bl	8001678 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80016ca:	f005 fd13 	bl	80070f4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80016ce:	f7ff f935 	bl	800093c <main>
  bx  lr    
 80016d2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80016d4:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 80016d8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80016dc:	200003c4 	.word	0x200003c4
  ldr r2, =_sidata
 80016e0:	080071ec 	.word	0x080071ec
  ldr r2, =_sbss
 80016e4:	200003c4 	.word	0x200003c4
  ldr r4, =_ebss
 80016e8:	2000548c 	.word	0x2000548c

080016ec <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80016ec:	e7fe      	b.n	80016ec <ADC_IRQHandler>
	...

080016f0 <init_can>:
//  MODULE_ID module_id:     what module this is (ex. PDM_ID, ACM_ID)
//  BXCAN_TYPE bx_type:      master or slave BXcan type. This is usually BXTYPE_MASTER
// returns:
//  error codes specified in GopherCAN.h
S8 init_can(CAN_HandleTypeDef* hcan, MODULE_ID module_id, BXCAN_TYPE bx_type)
{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	b084      	sub	sp, #16
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	6078      	str	r0, [r7, #4]
 80016f8:	460b      	mov	r3, r1
 80016fa:	70fb      	strb	r3, [r7, #3]
 80016fc:	4613      	mov	r3, r2
 80016fe:	70bb      	strb	r3, [r7, #2]
	U8 c;

	// set the current module
	this_module_id = module_id;
 8001700:	4a35      	ldr	r2, [pc, #212]	; (80017d8 <init_can+0xe8>)
 8001702:	78fb      	ldrb	r3, [r7, #3]
 8001704:	7013      	strb	r3, [r2, #0]


	// init HAL_GetTick()
	HAL_SetTickFreq(HAL_TICK_FREQ_DEFAULT);
 8001706:	2001      	movs	r0, #1
 8001708:	f000 ff92 	bl	8002630 <HAL_SetTickFreq>

	// setup the two buffers
	init_buffer(&rx_buffer, rx_buffer_mem, RX_BUFFER_SIZE);
 800170c:	2220      	movs	r2, #32
 800170e:	4933      	ldr	r1, [pc, #204]	; (80017dc <init_can+0xec>)
 8001710:	4833      	ldr	r0, [pc, #204]	; (80017e0 <init_can+0xf0>)
 8001712:	f000 fe7b 	bl	800240c <init_buffer>
	init_buffer(&tx_buffer, tx_buffer_mem, TX_BUFFER_SIZE);
 8001716:	2220      	movs	r2, #32
 8001718:	4932      	ldr	r1, [pc, #200]	; (80017e4 <init_can+0xf4>)
 800171a:	4833      	ldr	r0, [pc, #204]	; (80017e8 <init_can+0xf8>)
 800171c:	f000 fe76 	bl	800240c <init_buffer>
	init_buffer(&tx_buffer_2, tx_buffer_mem_2, TX_BUFFER_SIZE);
#endif // NUM_OF_BUSSES > 2
#endif // MULTI_BUS

	// init all of the parameter data
	init_all_params();
 8001720:	f000 f868 	bl	80017f4 <init_all_params>

	// set each function pointer to the do_nothing() function
	for (c = 0; c < NUM_OF_COMMANDS; c++)
 8001724:	2300      	movs	r3, #0
 8001726:	73fb      	strb	r3, [r7, #15]
 8001728:	e01f      	b.n	800176a <init_can+0x7a>
	{
		cust_funcs[c].func_ptr = &do_nothing;
 800172a:	7bfa      	ldrb	r2, [r7, #15]
 800172c:	492f      	ldr	r1, [pc, #188]	; (80017ec <init_can+0xfc>)
 800172e:	4613      	mov	r3, r2
 8001730:	005b      	lsls	r3, r3, #1
 8001732:	4413      	add	r3, r2
 8001734:	009b      	lsls	r3, r3, #2
 8001736:	440b      	add	r3, r1
 8001738:	4a2d      	ldr	r2, [pc, #180]	; (80017f0 <init_can+0x100>)
 800173a:	601a      	str	r2, [r3, #0]
		cust_funcs[c].func_enabled = FALSE;
 800173c:	7bfa      	ldrb	r2, [r7, #15]
 800173e:	492b      	ldr	r1, [pc, #172]	; (80017ec <init_can+0xfc>)
 8001740:	4613      	mov	r3, r2
 8001742:	005b      	lsls	r3, r3, #1
 8001744:	4413      	add	r3, r2
 8001746:	009b      	lsls	r3, r3, #2
 8001748:	440b      	add	r3, r1
 800174a:	3304      	adds	r3, #4
 800174c:	2200      	movs	r2, #0
 800174e:	701a      	strb	r2, [r3, #0]
		cust_funcs[c].param_ptr = NULL;
 8001750:	7bfa      	ldrb	r2, [r7, #15]
 8001752:	4926      	ldr	r1, [pc, #152]	; (80017ec <init_can+0xfc>)
 8001754:	4613      	mov	r3, r2
 8001756:	005b      	lsls	r3, r3, #1
 8001758:	4413      	add	r3, r2
 800175a:	009b      	lsls	r3, r3, #2
 800175c:	440b      	add	r3, r1
 800175e:	3308      	adds	r3, #8
 8001760:	2200      	movs	r2, #0
 8001762:	601a      	str	r2, [r3, #0]
	for (c = 0; c < NUM_OF_COMMANDS; c++)
 8001764:	7bfb      	ldrb	r3, [r7, #15]
 8001766:	3301      	adds	r3, #1
 8001768:	73fb      	strb	r3, [r7, #15]
 800176a:	7bfb      	ldrb	r3, [r7, #15]
 800176c:	2b08      	cmp	r3, #8
 800176e:	d9dc      	bls.n	800172a <init_can+0x3a>

	}

	if (init_filters(hcan, bx_type))
 8001770:	78bb      	ldrb	r3, [r7, #2]
 8001772:	4619      	mov	r1, r3
 8001774:	6878      	ldr	r0, [r7, #4]
 8001776:	f000 f887 	bl	8001888 <init_filters>
 800177a:	4603      	mov	r3, r0
 800177c:	2b00      	cmp	r3, #0
 800177e:	d002      	beq.n	8001786 <init_can+0x96>
	{
		return FILTER_SET_FAILED;
 8001780:	f06f 0304 	mvn.w	r3, #4
 8001784:	e024      	b.n	80017d0 <init_can+0xe0>
	}

	// Setup the rx interrupt function to interrupt on any pending message
	// will call methods following the format HAL_CAN_xxxCallback()
	if (HAL_CAN_ActivateNotification(hcan, CAN_IT_RX_FIFO0_MSG_PENDING) != HAL_OK
 8001786:	2102      	movs	r1, #2
 8001788:	6878      	ldr	r0, [r7, #4]
 800178a:	f001 fe6b 	bl	8003464 <HAL_CAN_ActivateNotification>
 800178e:	4603      	mov	r3, r0
 8001790:	2b00      	cmp	r3, #0
 8001792:	d106      	bne.n	80017a2 <init_can+0xb2>
			|| HAL_CAN_ActivateNotification(hcan, CAN_IT_RX_FIFO1_MSG_PENDING) != HAL_OK)
 8001794:	2110      	movs	r1, #16
 8001796:	6878      	ldr	r0, [r7, #4]
 8001798:	f001 fe64 	bl	8003464 <HAL_CAN_ActivateNotification>
 800179c:	4603      	mov	r3, r0
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d002      	beq.n	80017a8 <init_can+0xb8>
	{
		return IRQ_SET_FAILED;
 80017a2:	f06f 0305 	mvn.w	r3, #5
 80017a6:	e013      	b.n	80017d0 <init_can+0xe0>
	}

	// The F7xx includes interrupts for when a message is complete. Activate them here
#if TARGET == F7XX || TARGET == F4XX
	if (HAL_CAN_ActivateNotification(hcan, CAN_IT_TX_MAILBOX_EMPTY) != HAL_OK)
 80017a8:	2101      	movs	r1, #1
 80017aa:	6878      	ldr	r0, [r7, #4]
 80017ac:	f001 fe5a 	bl	8003464 <HAL_CAN_ActivateNotification>
 80017b0:	4603      	mov	r3, r0
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d002      	beq.n	80017bc <init_can+0xcc>
	{
		return IRQ_SET_FAILED;
 80017b6:	f06f 0305 	mvn.w	r3, #5
 80017ba:	e009      	b.n	80017d0 <init_can+0xe0>
	}
#endif // TARGET == F7XX || TARGET == F4XX

	// start can!
	if (HAL_CAN_Start(hcan) != HAL_OK)
 80017bc:	6878      	ldr	r0, [r7, #4]
 80017be:	f001 fbc3 	bl	8002f48 <HAL_CAN_Start>
 80017c2:	4603      	mov	r3, r0
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d002      	beq.n	80017ce <init_can+0xde>
	{
		return CAN_START_FAILED;
 80017c8:	f06f 0306 	mvn.w	r3, #6
 80017cc:	e000      	b.n	80017d0 <init_can+0xe0>
	}

	return CAN_SUCCESS;
 80017ce:	2300      	movs	r3, #0
}
 80017d0:	4618      	mov	r0, r3
 80017d2:	3710      	adds	r7, #16
 80017d4:	46bd      	mov	sp, r7
 80017d6:	bd80      	pop	{r7, pc}
 80017d8:	20000aa8 	.word	0x20000aa8
 80017dc:	20000ac4 	.word	0x20000ac4
 80017e0:	20000abc 	.word	0x20000abc
 80017e4:	20000ccc 	.word	0x20000ccc
 80017e8:	20000cc4 	.word	0x20000cc4
 80017ec:	20000a3c 	.word	0x20000a3c
 80017f0:	080023e9 	.word	0x080023e9

080017f4 <init_all_params>:


// init_all_params
//  function to run through each parameter and set the default data in the struct
static void init_all_params(void)
{
 80017f4:	b480      	push	{r7}
 80017f6:	b083      	sub	sp, #12
 80017f8:	af00      	add	r7, sp, #0
	U16 c;
	CAN_INFO_STRUCT* data_struct;

	// set the param id for CAN commands
	can_command.param_id = CAN_COMMAND_ID;
 80017fa:	4b12      	ldr	r3, [pc, #72]	; (8001844 <init_all_params+0x50>)
 80017fc:	2200      	movs	r2, #0
 80017fe:	719a      	strb	r2, [r3, #6]

	// disable each parameter until the user manually enables them
	for (c = CAN_COMMAND_ID + 1; c < NUM_OF_PARAMETERS; c++)
 8001800:	2301      	movs	r3, #1
 8001802:	80fb      	strh	r3, [r7, #6]
 8001804:	e014      	b.n	8001830 <init_all_params+0x3c>
	{
		data_struct = (CAN_INFO_STRUCT*)(all_parameter_structs[c]);
 8001806:	88fb      	ldrh	r3, [r7, #6]
 8001808:	4a0f      	ldr	r2, [pc, #60]	; (8001848 <init_all_params+0x54>)
 800180a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800180e:	603b      	str	r3, [r7, #0]

		data_struct->last_rx = 0;
 8001810:	683b      	ldr	r3, [r7, #0]
 8001812:	2200      	movs	r2, #0
 8001814:	601a      	str	r2, [r3, #0]
		data_struct->update_enabled = FALSE;
 8001816:	683b      	ldr	r3, [r7, #0]
 8001818:	2200      	movs	r2, #0
 800181a:	711a      	strb	r2, [r3, #4]
		data_struct->pending_response = FALSE;
 800181c:	683b      	ldr	r3, [r7, #0]
 800181e:	2200      	movs	r2, #0
 8001820:	715a      	strb	r2, [r3, #5]

		// set the ID for each parameter
		data_struct->param_id = c;
 8001822:	88fb      	ldrh	r3, [r7, #6]
 8001824:	b2da      	uxtb	r2, r3
 8001826:	683b      	ldr	r3, [r7, #0]
 8001828:	719a      	strb	r2, [r3, #6]
	for (c = CAN_COMMAND_ID + 1; c < NUM_OF_PARAMETERS; c++)
 800182a:	88fb      	ldrh	r3, [r7, #6]
 800182c:	3301      	adds	r3, #1
 800182e:	80fb      	strh	r3, [r7, #6]
 8001830:	88fb      	ldrh	r3, [r7, #6]
 8001832:	2bb8      	cmp	r3, #184	; 0xb8
 8001834:	d9e7      	bls.n	8001806 <init_all_params+0x12>
	}
}
 8001836:	bf00      	nop
 8001838:	bf00      	nop
 800183a:	370c      	adds	r7, #12
 800183c:	46bd      	mov	sp, r7
 800183e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001842:	4770      	bx	lr
 8001844:	20000ecc 	.word	0x20000ecc
 8001848:	20000018 	.word	0x20000018

0800184c <set_all_params_state>:
//  Function to set each parameter in gopherCAN to enabled(true) or disabled (false). This
//  is easier than manually enabling all of them.
// params:
//  boolean enabled: the state to set all of the parameters to
void set_all_params_state(boolean enabled)
{
 800184c:	b480      	push	{r7}
 800184e:	b085      	sub	sp, #20
 8001850:	af00      	add	r7, sp, #0
 8001852:	4603      	mov	r3, r0
 8001854:	71fb      	strb	r3, [r7, #7]
	U16 c;

	// disable each parameter until the user manually enables them
	for (c = CAN_COMMAND_ID + 1; c < NUM_OF_PARAMETERS; c++)
 8001856:	2301      	movs	r3, #1
 8001858:	81fb      	strh	r3, [r7, #14]
 800185a:	e008      	b.n	800186e <set_all_params_state+0x22>
	{
		((CAN_INFO_STRUCT*)(all_parameter_structs[c]))->update_enabled = enabled;
 800185c:	89fb      	ldrh	r3, [r7, #14]
 800185e:	4a09      	ldr	r2, [pc, #36]	; (8001884 <set_all_params_state+0x38>)
 8001860:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001864:	79fa      	ldrb	r2, [r7, #7]
 8001866:	711a      	strb	r2, [r3, #4]
	for (c = CAN_COMMAND_ID + 1; c < NUM_OF_PARAMETERS; c++)
 8001868:	89fb      	ldrh	r3, [r7, #14]
 800186a:	3301      	adds	r3, #1
 800186c:	81fb      	strh	r3, [r7, #14]
 800186e:	89fb      	ldrh	r3, [r7, #14]
 8001870:	2bb8      	cmp	r3, #184	; 0xb8
 8001872:	d9f3      	bls.n	800185c <set_all_params_state+0x10>
	}
}
 8001874:	bf00      	nop
 8001876:	bf00      	nop
 8001878:	3714      	adds	r7, #20
 800187a:	46bd      	mov	sp, r7
 800187c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001880:	4770      	bx	lr
 8001882:	bf00      	nop
 8001884:	20000018 	.word	0x20000018

08001888 <init_filters>:


// init_filters
//  function called within init() that sets up all of the filters
static S8 init_filters(CAN_HandleTypeDef* hcan, BXCAN_TYPE bx_type)
{
 8001888:	b580      	push	{r7, lr}
 800188a:	b092      	sub	sp, #72	; 0x48
 800188c:	af00      	add	r7, sp, #0
 800188e:	6078      	str	r0, [r7, #4]
 8001890:	460b      	mov	r3, r1
 8001892:	70fb      	strb	r3, [r7, #3]
	CAN_FilterTypeDef filterConfig;
	U8 banknum = 0;
 8001894:	2300      	movs	r3, #0
 8001896:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

	if (bx_type == BXTYPE_SLAVE)
 800189a:	78fb      	ldrb	r3, [r7, #3]
 800189c:	2b01      	cmp	r3, #1
 800189e:	d102      	bne.n	80018a6 <init_filters+0x1e>
	{
		banknum = SLAVE_FIRST_FILTER;
 80018a0:	230e      	movs	r3, #14
 80018a2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	U32 filt_id_high;
	U32 filt_mask_high;
	U32 filt_mask_low;

	// get the correct bits from the id and mask for each part of the ID.
	filt_id_high = GET_ID_HIGH(this_module_id << (CAN_ID_SIZE - DEST_POS - DEST_SIZE));
 80018a6:	4b3b      	ldr	r3, [pc, #236]	; (8001994 <init_filters+0x10c>)
 80018a8:	781b      	ldrb	r3, [r3, #0]
 80018aa:	065b      	lsls	r3, r3, #25
 80018ac:	0c1b      	lsrs	r3, r3, #16
 80018ae:	643b      	str	r3, [r7, #64]	; 0x40
	filt_id_low = GET_ID_LOW(this_module_id << (CAN_ID_SIZE - DEST_POS - DEST_SIZE));
 80018b0:	2304      	movs	r3, #4
 80018b2:	63fb      	str	r3, [r7, #60]	; 0x3c
	filt_mask_high = GET_ID_HIGH(DEST_MASK);
 80018b4:	f44f 43fc 	mov.w	r3, #32256	; 0x7e00
 80018b8:	63bb      	str	r3, [r7, #56]	; 0x38
    filt_mask_low = GET_ID_LOW(DEST_MASK);
 80018ba:	2304      	movs	r3, #4
 80018bc:	637b      	str	r3, [r7, #52]	; 0x34

	// Set the the parameters on the filter struct (FIFO0)
	filterConfig.FilterBank = banknum;                                // Modify bank 0 (of 13)
 80018be:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80018c2:	623b      	str	r3, [r7, #32]
	filterConfig.FilterActivation = CAN_FILTER_ENABLE;                // enable the filter
 80018c4:	2301      	movs	r3, #1
 80018c6:	62fb      	str	r3, [r7, #44]	; 0x2c
	filterConfig.FilterFIFOAssignment = CAN_FILTER_FIFO0;             // use FIFO0
 80018c8:	2300      	movs	r3, #0
 80018ca:	61fb      	str	r3, [r7, #28]
	filterConfig.FilterMode = CAN_FILTERMODE_IDMASK;                  // Use mask mode to filter
 80018cc:	2300      	movs	r3, #0
 80018ce:	627b      	str	r3, [r7, #36]	; 0x24
	filterConfig.FilterScale = CAN_FILTERSCALE_32BIT;                 // 32 bit mask
 80018d0:	2301      	movs	r3, #1
 80018d2:	62bb      	str	r3, [r7, #40]	; 0x28
	filterConfig.FilterIdLow = filt_id_low;                           // Low bound of accepted values
 80018d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80018d6:	613b      	str	r3, [r7, #16]
	filterConfig.FilterIdHigh = filt_id_high;                         // High bound of accepted values
 80018d8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80018da:	60fb      	str	r3, [r7, #12]
	filterConfig.FilterMaskIdLow = filt_mask_low;                     // Which bits matter when filtering (high)
 80018dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80018de:	61bb      	str	r3, [r7, #24]
	filterConfig.FilterMaskIdHigh = filt_mask_high;                   // Which bits matter when filtering (low)
 80018e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80018e2:	617b      	str	r3, [r7, #20]

	if (HAL_CAN_ConfigFilter(hcan, &filterConfig) != HAL_OK)
 80018e4:	f107 030c 	add.w	r3, r7, #12
 80018e8:	4619      	mov	r1, r3
 80018ea:	6878      	ldr	r0, [r7, #4]
 80018ec:	f001 fa4c 	bl	8002d88 <HAL_CAN_ConfigFilter>
 80018f0:	4603      	mov	r3, r0
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d002      	beq.n	80018fc <init_filters+0x74>
	{
		return FILTER_SET_FAILED;
 80018f6:	f06f 0304 	mvn.w	r3, #4
 80018fa:	e047      	b.n	800198c <init_filters+0x104>
	}

	// Set the the parameters on the filter struct (FIFO1)
	// all other parameters are the same as FIFO0
	filterConfig.FilterBank = banknum + 1;                            // Modify bank 1 (of 13)
 80018fc:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8001900:	3301      	adds	r3, #1
 8001902:	623b      	str	r3, [r7, #32]
	filterConfig.FilterFIFOAssignment = CAN_FILTER_FIFO1;             // use FIFO1
 8001904:	2301      	movs	r3, #1
 8001906:	61fb      	str	r3, [r7, #28]

	if (HAL_CAN_ConfigFilter(hcan, &filterConfig) != HAL_OK)
 8001908:	f107 030c 	add.w	r3, r7, #12
 800190c:	4619      	mov	r1, r3
 800190e:	6878      	ldr	r0, [r7, #4]
 8001910:	f001 fa3a 	bl	8002d88 <HAL_CAN_ConfigFilter>
 8001914:	4603      	mov	r3, r0
 8001916:	2b00      	cmp	r3, #0
 8001918:	d002      	beq.n	8001920 <init_filters+0x98>
	{
		return FILTER_SET_FAILED;
 800191a:	f06f 0304 	mvn.w	r3, #4
 800191e:	e035      	b.n	800198c <init_filters+0x104>
	}

	// get the correct bits from the id and mask for each part of the ID for adding the general CAN ID
	filt_id_high = GET_ID_HIGH(ALL_MODULES_ID << (CAN_ID_SIZE - DEST_POS - DEST_SIZE));
 8001920:	2300      	movs	r3, #0
 8001922:	643b      	str	r3, [r7, #64]	; 0x40
	filt_id_low = GET_ID_LOW(ALL_MODULES_ID << (CAN_ID_SIZE - DEST_POS - DEST_SIZE));
 8001924:	2304      	movs	r3, #4
 8001926:	63fb      	str	r3, [r7, #60]	; 0x3c
	filt_mask_high = GET_ID_HIGH(DEST_MASK);
 8001928:	f44f 43fc 	mov.w	r3, #32256	; 0x7e00
 800192c:	63bb      	str	r3, [r7, #56]	; 0x38
	filt_mask_low = GET_ID_LOW(DEST_MASK);
 800192e:	2304      	movs	r3, #4
 8001930:	637b      	str	r3, [r7, #52]	; 0x34

	// Set the the parameters on the filter struct (FIFO0)
	filterConfig.FilterBank = banknum + 2;                            // Modify bank 2 (of 13)
 8001932:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8001936:	3302      	adds	r3, #2
 8001938:	623b      	str	r3, [r7, #32]
	filterConfig.FilterFIFOAssignment = CAN_FILTER_FIFO0;             // use FIFO0
 800193a:	2300      	movs	r3, #0
 800193c:	61fb      	str	r3, [r7, #28]
	filterConfig.FilterIdLow = filt_id_low;                           // Low bound of accepted values
 800193e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001940:	613b      	str	r3, [r7, #16]
	filterConfig.FilterIdHigh = filt_id_high;                         // High bound of accepted values
 8001942:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001944:	60fb      	str	r3, [r7, #12]
	filterConfig.FilterMaskIdLow = filt_mask_low;                     // Which bits matter when filtering (high)
 8001946:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001948:	61bb      	str	r3, [r7, #24]
	filterConfig.FilterMaskIdHigh = filt_mask_high;                   // Which bits matter when filtering (low)
 800194a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800194c:	617b      	str	r3, [r7, #20]

	if (HAL_CAN_ConfigFilter(hcan, &filterConfig) != HAL_OK)
 800194e:	f107 030c 	add.w	r3, r7, #12
 8001952:	4619      	mov	r1, r3
 8001954:	6878      	ldr	r0, [r7, #4]
 8001956:	f001 fa17 	bl	8002d88 <HAL_CAN_ConfigFilter>
 800195a:	4603      	mov	r3, r0
 800195c:	2b00      	cmp	r3, #0
 800195e:	d002      	beq.n	8001966 <init_filters+0xde>
	{
		return FILTER_SET_FAILED;
 8001960:	f06f 0304 	mvn.w	r3, #4
 8001964:	e012      	b.n	800198c <init_filters+0x104>
	}

	// Set the the parameters on the filter struct (FIFO1)
	// all other parameters are the same as FIFO0
	filterConfig.FilterBank = banknum + 3;                            // Modify bank 3 (of 13)
 8001966:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800196a:	3303      	adds	r3, #3
 800196c:	623b      	str	r3, [r7, #32]
	filterConfig.FilterFIFOAssignment = CAN_FILTER_FIFO1;             // use FIFO1
 800196e:	2301      	movs	r3, #1
 8001970:	61fb      	str	r3, [r7, #28]

	if (HAL_CAN_ConfigFilter(hcan, &filterConfig) != HAL_OK)
 8001972:	f107 030c 	add.w	r3, r7, #12
 8001976:	4619      	mov	r1, r3
 8001978:	6878      	ldr	r0, [r7, #4]
 800197a:	f001 fa05 	bl	8002d88 <HAL_CAN_ConfigFilter>
 800197e:	4603      	mov	r3, r0
 8001980:	2b00      	cmp	r3, #0
 8001982:	d002      	beq.n	800198a <init_filters+0x102>
	{
		return FILTER_SET_FAILED;
 8001984:	f06f 0304 	mvn.w	r3, #4
 8001988:	e000      	b.n	800198c <init_filters+0x104>
	}
#endif // CAN_ROUTER

	return CAN_SUCCESS;
 800198a:	2300      	movs	r3, #0
}
 800198c:	4618      	mov	r0, r3
 800198e:	3748      	adds	r7, #72	; 0x48
 8001990:	46bd      	mov	sp, r7
 8001992:	bd80      	pop	{r7, pc}
 8001994:	20000aa8 	.word	0x20000aa8

08001998 <HAL_CAN_RxFifo0MsgPendingCallback>:


// HAL_CAN_RxFifo0MsgPendingCallback
//  ISR called when CAN_RX_FIFO0 has a pending message
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef* hcan)
{
 8001998:	b580      	push	{r7, lr}
 800199a:	b082      	sub	sp, #8
 800199c:	af00      	add	r7, sp, #0
 800199e:	6078      	str	r0, [r7, #4]
    FIFO0_RX_CALLBACK
 80019a0:	2100      	movs	r1, #0
 80019a2:	6878      	ldr	r0, [r7, #4]
 80019a4:	f000 f9e6 	bl	8001d74 <service_can_rx_hardware>
	//service_can_rx_hardware(hcan, CAN_RX_FIFO0);
}
 80019a8:	bf00      	nop
 80019aa:	3708      	adds	r7, #8
 80019ac:	46bd      	mov	sp, r7
 80019ae:	bd80      	pop	{r7, pc}

080019b0 <HAL_CAN_RxFifo1MsgPendingCallback>:


// HAL_CAN_RxFifo1MsgPendingCallback
//  ISR called when CAN_RX_FIFO1 has a pending message
void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef* hcan)
{
 80019b0:	b580      	push	{r7, lr}
 80019b2:	b082      	sub	sp, #8
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	6078      	str	r0, [r7, #4]
    FIFO1_RX_CALLBACK
 80019b8:	2101      	movs	r1, #1
 80019ba:	6878      	ldr	r0, [r7, #4]
 80019bc:	f000 f9da 	bl	8001d74 <service_can_rx_hardware>
	//service_can_rx_hardware(hcan, CAN_RX_FIFO1);
}
 80019c0:	bf00      	nop
 80019c2:	3708      	adds	r7, #8
 80019c4:	46bd      	mov	sp, r7
 80019c6:	bd80      	pop	{r7, pc}

080019c8 <request_parameter>:
//  MODULE_ID dest_module:    what module to request the parameter from
//  GCAN_PARAM_ID parameter:  what parameter to request
// returns:
//  error codes specified in GopherCAN.h
S8 request_parameter(PRIORITY priority, MODULE_ID dest_module, GCAN_PARAM_ID parameter)
{
 80019c8:	b580      	push	{r7, lr}
 80019ca:	b088      	sub	sp, #32
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	4603      	mov	r3, r0
 80019d0:	71fb      	strb	r3, [r7, #7]
 80019d2:	460b      	mov	r3, r1
 80019d4:	71bb      	strb	r3, [r7, #6]
 80019d6:	4613      	mov	r3, r2
 80019d8:	717b      	strb	r3, [r7, #5]
	CAN_MSG message;
	CAN_ID id;

	if (dest_module < 0 || dest_module >= NUM_OF_MODULES)
 80019da:	79bb      	ldrb	r3, [r7, #6]
 80019dc:	2b06      	cmp	r3, #6
 80019de:	d902      	bls.n	80019e6 <request_parameter+0x1e>
	{
		return BAD_MODULE_ID;
 80019e0:	f06f 0301 	mvn.w	r3, #1
 80019e4:	e02c      	b.n	8001a40 <request_parameter+0x78>
	}

	if (parameter <= CAN_COMMAND_ID || parameter >= NUM_OF_PARAMETERS)
 80019e6:	797b      	ldrb	r3, [r7, #5]
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d002      	beq.n	80019f2 <request_parameter+0x2a>
 80019ec:	797b      	ldrb	r3, [r7, #5]
 80019ee:	2bb8      	cmp	r3, #184	; 0xb8
 80019f0:	d902      	bls.n	80019f8 <request_parameter+0x30>
	{
		return BAD_PARAMETER_ID;
 80019f2:	f06f 0302 	mvn.w	r3, #2
 80019f6:	e023      	b.n	8001a40 <request_parameter+0x78>
	}

	id.priority = priority;
 80019f8:	79fb      	ldrb	r3, [r7, #7]
 80019fa:	723b      	strb	r3, [r7, #8]
	id.dest_module = dest_module;
 80019fc:	79bb      	ldrb	r3, [r7, #6]
 80019fe:	727b      	strb	r3, [r7, #9]
	id.source_module = this_module_id;
 8001a00:	4b11      	ldr	r3, [pc, #68]	; (8001a48 <request_parameter+0x80>)
 8001a02:	781b      	ldrb	r3, [r3, #0]
 8001a04:	72bb      	strb	r3, [r7, #10]
	id.error = FALSE;
 8001a06:	2300      	movs	r3, #0
 8001a08:	72fb      	strb	r3, [r7, #11]
	id.parameter = parameter;
 8001a0a:	797b      	ldrb	r3, [r7, #5]
 8001a0c:	b29b      	uxth	r3, r3
 8001a0e:	81bb      	strh	r3, [r7, #12]

	build_message_id(&message, &id);
 8001a10:	f107 0208 	add.w	r2, r7, #8
 8001a14:	f107 0310 	add.w	r3, r7, #16
 8001a18:	4611      	mov	r1, r2
 8001a1a:	4618      	mov	r0, r3
 8001a1c:	f000 fbdc 	bl	80021d8 <build_message_id>

	// set the RTR bit to REQUEST_DATA
	message.rtr_bit = REQUEST_DATA;
 8001a20:	2302      	movs	r3, #2
 8001a22:	753b      	strb	r3, [r7, #20]

	message.dlc = REQ_PARAM_SIZE;
 8001a24:	2300      	movs	r3, #0
 8001a26:	757b      	strb	r3, [r7, #21]

	// set the pending response to true for this parameter, will be set to true once
	// the value is received from the CAN bus
	((CAN_INFO_STRUCT*)(all_parameter_structs[parameter]))->pending_response = TRUE;
 8001a28:	797b      	ldrb	r3, [r7, #5]
 8001a2a:	4a08      	ldr	r2, [pc, #32]	; (8001a4c <request_parameter+0x84>)
 8001a2c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a30:	2201      	movs	r2, #1
 8001a32:	715a      	strb	r2, [r3, #5]

	return tx_can_message(&message);
 8001a34:	f107 0310 	add.w	r3, r7, #16
 8001a38:	4618      	mov	r0, r3
 8001a3a:	f000 fa11 	bl	8001e60 <tx_can_message>
 8001a3e:	4603      	mov	r3, r0
}
 8001a40:	4618      	mov	r0, r3
 8001a42:	3720      	adds	r7, #32
 8001a44:	46bd      	mov	sp, r7
 8001a46:	bd80      	pop	{r7, pc}
 8001a48:	20000aa8 	.word	0x20000aa8
 8001a4c:	20000018 	.word	0x20000018

08001a50 <send_parameter>:
//  MODULE_ID dest_module:    what module to send the parameter to
//  GCAN_PARAM_ID parameter:  what parameter to send
// returns:
//  error codes specified in GopherCAN.h
S8 send_parameter(PRIORITY priority, MODULE_ID dest_module, GCAN_PARAM_ID parameter)
{
 8001a50:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001a54:	b09a      	sub	sp, #104	; 0x68
 8001a56:	af00      	add	r7, sp, #0
 8001a58:	4603      	mov	r3, r0
 8001a5a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8001a5e:	460b      	mov	r3, r1
 8001a60:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 8001a64:	4613      	mov	r3, r2
 8001a66:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
	CAN_ID id;
	CAN_MSG message;
	U64 data = 0;
 8001a6a:	f04f 0200 	mov.w	r2, #0
 8001a6e:	f04f 0300 	mov.w	r3, #0
 8001a72:	e9c7 2318 	strd	r2, r3, [r7, #96]	; 0x60
	S8 c;
	FLOAT_CONVERTER float_con;

	// make sure the parameter is valid
	if (parameter <= CAN_COMMAND_ID || parameter >= NUM_OF_PARAMETERS)
 8001a76:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d003      	beq.n	8001a86 <send_parameter+0x36>
 8001a7e:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8001a82:	2bb8      	cmp	r3, #184	; 0xb8
 8001a84:	d902      	bls.n	8001a8c <send_parameter+0x3c>
	{
		return BAD_PARAMETER_ID;
 8001a86:	f06f 0302 	mvn.w	r3, #2
 8001a8a:	e115      	b.n	8001cb8 <send_parameter+0x268>
	}

	// make sure the parameter is enabled
	if (!((CAN_INFO_STRUCT*)(all_parameter_structs[parameter]))->update_enabled)
 8001a8c:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8001a90:	4b8c      	ldr	r3, [pc, #560]	; (8001cc4 <send_parameter+0x274>)
 8001a92:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a96:	791b      	ldrb	r3, [r3, #4]
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d102      	bne.n	8001aa2 <send_parameter+0x52>
	{
		return NOT_ENABLED_ERR;
 8001a9c:	f06f 030a 	mvn.w	r3, #10
 8001aa0:	e10a      	b.n	8001cb8 <send_parameter+0x268>
	}

	// build the return message ID
	id.priority = priority;
 8001aa2:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8001aa6:	f887 3058 	strb.w	r3, [r7, #88]	; 0x58
	id.dest_module = dest_module;
 8001aaa:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8001aae:	f887 3059 	strb.w	r3, [r7, #89]	; 0x59
	id.source_module = this_module_id;
 8001ab2:	4b85      	ldr	r3, [pc, #532]	; (8001cc8 <send_parameter+0x278>)
 8001ab4:	781b      	ldrb	r3, [r3, #0]
 8001ab6:	f887 305a 	strb.w	r3, [r7, #90]	; 0x5a
	id.error = FALSE;
 8001aba:	2300      	movs	r3, #0
 8001abc:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
	id.parameter = parameter;
 8001ac0:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8001ac4:	b29b      	uxth	r3, r3
 8001ac6:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c

	build_message_id(&message, &id);
 8001aca:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8001ace:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001ad2:	4611      	mov	r1, r2
 8001ad4:	4618      	mov	r0, r3
 8001ad6:	f000 fb7f 	bl	80021d8 <build_message_id>

	// set the RTR bit to data type
	message.rtr_bit = DATA_MESSAGE;
 8001ada:	2300      	movs	r3, #0
 8001adc:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c

	// get the value of the data on this module and build the CAN message
	if (parameter_data_types[parameter] == UNSIGNED8
 8001ae0:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8001ae4:	4b79      	ldr	r3, [pc, #484]	; (8001ccc <send_parameter+0x27c>)
 8001ae6:	5c9b      	ldrb	r3, [r3, r2]
 8001ae8:	2b01      	cmp	r3, #1
 8001aea:	d005      	beq.n	8001af8 <send_parameter+0xa8>
		|| parameter_data_types[parameter] == SIGNED8)
 8001aec:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8001af0:	4b76      	ldr	r3, [pc, #472]	; (8001ccc <send_parameter+0x27c>)
 8001af2:	5c9b      	ldrb	r3, [r3, r2]
 8001af4:	2b05      	cmp	r3, #5
 8001af6:	d115      	bne.n	8001b24 <send_parameter+0xd4>
	{
		data |= ((U8_CAN_STRUCT*)(all_parameter_structs[parameter]))->data;
 8001af8:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8001afc:	4a71      	ldr	r2, [pc, #452]	; (8001cc4 <send_parameter+0x274>)
 8001afe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b02:	79db      	ldrb	r3, [r3, #7]
 8001b04:	b2db      	uxtb	r3, r3
 8001b06:	2200      	movs	r2, #0
 8001b08:	461c      	mov	r4, r3
 8001b0a:	4615      	mov	r5, r2
 8001b0c:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8001b10:	ea42 0a04 	orr.w	sl, r2, r4
 8001b14:	ea43 0b05 	orr.w	fp, r3, r5
 8001b18:	e9c7 ab18 	strd	sl, fp, [r7, #96]	; 0x60
		message.dlc = sizeof(U8);
 8001b1c:	2301      	movs	r3, #1
 8001b1e:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
 8001b22:	e092      	b.n	8001c4a <send_parameter+0x1fa>
	}

	else if (parameter_data_types[parameter] == UNSIGNED16
 8001b24:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8001b28:	4b68      	ldr	r3, [pc, #416]	; (8001ccc <send_parameter+0x27c>)
 8001b2a:	5c9b      	ldrb	r3, [r3, r2]
 8001b2c:	2b02      	cmp	r3, #2
 8001b2e:	d005      	beq.n	8001b3c <send_parameter+0xec>
		|| parameter_data_types[parameter] == SIGNED16)
 8001b30:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8001b34:	4b65      	ldr	r3, [pc, #404]	; (8001ccc <send_parameter+0x27c>)
 8001b36:	5c9b      	ldrb	r3, [r3, r2]
 8001b38:	2b06      	cmp	r3, #6
 8001b3a:	d11b      	bne.n	8001b74 <send_parameter+0x124>
	{
		data |= ((U16_CAN_STRUCT*)(all_parameter_structs[parameter]))->data;
 8001b3c:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8001b40:	4a60      	ldr	r2, [pc, #384]	; (8001cc4 <send_parameter+0x274>)
 8001b42:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b46:	891b      	ldrh	r3, [r3, #8]
 8001b48:	b29b      	uxth	r3, r3
 8001b4a:	2200      	movs	r2, #0
 8001b4c:	633b      	str	r3, [r7, #48]	; 0x30
 8001b4e:	637a      	str	r2, [r7, #52]	; 0x34
 8001b50:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8001b54:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001b58:	4621      	mov	r1, r4
 8001b5a:	4311      	orrs	r1, r2
 8001b5c:	61b9      	str	r1, [r7, #24]
 8001b5e:	4629      	mov	r1, r5
 8001b60:	4319      	orrs	r1, r3
 8001b62:	61f9      	str	r1, [r7, #28]
 8001b64:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8001b68:	e9c7 3418 	strd	r3, r4, [r7, #96]	; 0x60
		message.dlc = sizeof(U16);
 8001b6c:	2302      	movs	r3, #2
 8001b6e:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
 8001b72:	e06a      	b.n	8001c4a <send_parameter+0x1fa>
	}

	else if (parameter_data_types[parameter] == UNSIGNED32
 8001b74:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8001b78:	4a54      	ldr	r2, [pc, #336]	; (8001ccc <send_parameter+0x27c>)
 8001b7a:	5cd3      	ldrb	r3, [r2, r3]
 8001b7c:	2b03      	cmp	r3, #3
 8001b7e:	d005      	beq.n	8001b8c <send_parameter+0x13c>
		|| parameter_data_types[parameter] == SIGNED32)
 8001b80:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8001b84:	4a51      	ldr	r2, [pc, #324]	; (8001ccc <send_parameter+0x27c>)
 8001b86:	5cd3      	ldrb	r3, [r2, r3]
 8001b88:	2b07      	cmp	r3, #7
 8001b8a:	d11a      	bne.n	8001bc2 <send_parameter+0x172>
	{
		data |= ((U32_CAN_STRUCT*)(all_parameter_structs[parameter]))->data;
 8001b8c:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8001b90:	4a4c      	ldr	r2, [pc, #304]	; (8001cc4 <send_parameter+0x274>)
 8001b92:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b96:	689b      	ldr	r3, [r3, #8]
 8001b98:	2200      	movs	r2, #0
 8001b9a:	62bb      	str	r3, [r7, #40]	; 0x28
 8001b9c:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001b9e:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8001ba2:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	; 0x28
 8001ba6:	4621      	mov	r1, r4
 8001ba8:	4311      	orrs	r1, r2
 8001baa:	6139      	str	r1, [r7, #16]
 8001bac:	4629      	mov	r1, r5
 8001bae:	4319      	orrs	r1, r3
 8001bb0:	6179      	str	r1, [r7, #20]
 8001bb2:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8001bb6:	e9c7 3418 	strd	r3, r4, [r7, #96]	; 0x60
		message.dlc = sizeof(U32);
 8001bba:	2304      	movs	r3, #4
 8001bbc:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
 8001bc0:	e043      	b.n	8001c4a <send_parameter+0x1fa>
	}

	else if (parameter_data_types[parameter] == UNSIGNED64
 8001bc2:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8001bc6:	4a41      	ldr	r2, [pc, #260]	; (8001ccc <send_parameter+0x27c>)
 8001bc8:	5cd3      	ldrb	r3, [r2, r3]
 8001bca:	2b04      	cmp	r3, #4
 8001bcc:	d005      	beq.n	8001bda <send_parameter+0x18a>
		|| parameter_data_types[parameter] == SIGNED64)
 8001bce:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8001bd2:	4a3e      	ldr	r2, [pc, #248]	; (8001ccc <send_parameter+0x27c>)
 8001bd4:	5cd3      	ldrb	r3, [r2, r3]
 8001bd6:	2b08      	cmp	r3, #8
 8001bd8:	d115      	bne.n	8001c06 <send_parameter+0x1b6>
	{
		data |= ((U64_CAN_STRUCT*)(all_parameter_structs[parameter]))->data;
 8001bda:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8001bde:	4a39      	ldr	r2, [pc, #228]	; (8001cc4 <send_parameter+0x274>)
 8001be0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001be4:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8001be8:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8001bec:	ea40 0402 	orr.w	r4, r0, r2
 8001bf0:	60bc      	str	r4, [r7, #8]
 8001bf2:	430b      	orrs	r3, r1
 8001bf4:	60fb      	str	r3, [r7, #12]
 8001bf6:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8001bfa:	e9c7 3418 	strd	r3, r4, [r7, #96]	; 0x60
		message.dlc = sizeof(U64);
 8001bfe:	2308      	movs	r3, #8
 8001c00:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
 8001c04:	e021      	b.n	8001c4a <send_parameter+0x1fa>
	}

	else if (parameter_data_types[parameter] == FLOATING)
 8001c06:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8001c0a:	4a30      	ldr	r2, [pc, #192]	; (8001ccc <send_parameter+0x27c>)
 8001c0c:	5cd3      	ldrb	r3, [r2, r3]
 8001c0e:	2b09      	cmp	r3, #9
 8001c10:	d11b      	bne.n	8001c4a <send_parameter+0x1fa>
	{
		// Union to get the bitwise data of the float
		float_con.f = ((FLOAT_CAN_STRUCT*)(all_parameter_structs[parameter]))->data;
 8001c12:	f897 303d 	ldrb.w	r3, [r7, #61]	; 0x3d
 8001c16:	4a2b      	ldr	r2, [pc, #172]	; (8001cc4 <send_parameter+0x274>)
 8001c18:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c1c:	689b      	ldr	r3, [r3, #8]
 8001c1e:	647b      	str	r3, [r7, #68]	; 0x44

		data |= float_con.u32;
 8001c20:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001c22:	2200      	movs	r2, #0
 8001c24:	623b      	str	r3, [r7, #32]
 8001c26:	627a      	str	r2, [r7, #36]	; 0x24
 8001c28:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8001c2c:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8001c30:	4621      	mov	r1, r4
 8001c32:	4311      	orrs	r1, r2
 8001c34:	6039      	str	r1, [r7, #0]
 8001c36:	4629      	mov	r1, r5
 8001c38:	4319      	orrs	r1, r3
 8001c3a:	6079      	str	r1, [r7, #4]
 8001c3c:	e9d7 3400 	ldrd	r3, r4, [r7]
 8001c40:	e9c7 3418 	strd	r3, r4, [r7, #96]	; 0x60
		message.dlc = sizeof(float);
 8001c44:	2304      	movs	r3, #4
 8001c46:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
	}

	// build the data in the message (big endian)
	for (c = message.dlc - 1; c >= 0; c--)
 8001c4a:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8001c4e:	3b01      	subs	r3, #1
 8001c50:	b2db      	uxtb	r3, r3
 8001c52:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8001c56:	e025      	b.n	8001ca4 <send_parameter+0x254>
	{
		message.data[c] = (U8)(data >> (c * BITS_IN_BYTE));
 8001c58:	f997 305f 	ldrsb.w	r3, [r7, #95]	; 0x5f
 8001c5c:	00d9      	lsls	r1, r3, #3
 8001c5e:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8001c62:	f1c1 0420 	rsb	r4, r1, #32
 8001c66:	f1a1 0020 	sub.w	r0, r1, #32
 8001c6a:	fa22 f801 	lsr.w	r8, r2, r1
 8001c6e:	fa03 f404 	lsl.w	r4, r3, r4
 8001c72:	ea48 0804 	orr.w	r8, r8, r4
 8001c76:	fa23 f000 	lsr.w	r0, r3, r0
 8001c7a:	ea48 0800 	orr.w	r8, r8, r0
 8001c7e:	fa23 f901 	lsr.w	r9, r3, r1
 8001c82:	f997 305f 	ldrsb.w	r3, [r7, #95]	; 0x5f
 8001c86:	fa5f f288 	uxtb.w	r2, r8
 8001c8a:	3330      	adds	r3, #48	; 0x30
 8001c8c:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8001c90:	440b      	add	r3, r1
 8001c92:	f803 2c1a 	strb.w	r2, [r3, #-26]
	for (c = message.dlc - 1; c >= 0; c--)
 8001c96:	f997 305f 	ldrsb.w	r3, [r7, #95]	; 0x5f
 8001c9a:	b2db      	uxtb	r3, r3
 8001c9c:	3b01      	subs	r3, #1
 8001c9e:	b2db      	uxtb	r3, r3
 8001ca0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8001ca4:	f997 305f 	ldrsb.w	r3, [r7, #95]	; 0x5f
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	dad5      	bge.n	8001c58 <send_parameter+0x208>
	}

	// send the built CAN message
	return tx_can_message(&message);
 8001cac:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001cb0:	4618      	mov	r0, r3
 8001cb2:	f000 f8d5 	bl	8001e60 <tx_can_message>
 8001cb6:	4603      	mov	r3, r0
}
 8001cb8:	4618      	mov	r0, r3
 8001cba:	3768      	adds	r7, #104	; 0x68
 8001cbc:	46bd      	mov	sp, r7
 8001cbe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001cc2:	bf00      	nop
 8001cc4:	20000018 	.word	0x20000018
 8001cc8:	20000aa8 	.word	0x20000aa8
 8001ccc:	200002fc 	.word	0x200002fc

08001cd0 <service_can_tx_hardware>:
//  Method to interact directly with the CAN registers through the HAL_CAN commands.
//  then will fill as many tx mailboxes as possible from the tx_message_buffer
//
//  designed to be called at high priority on 1ms loop
void service_can_tx_hardware(CAN_HandleTypeDef* hcan)
{
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	b08c      	sub	sp, #48	; 0x30
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	6078      	str	r0, [r7, #4]

	// With multiple busses, choose the correct bus buffer to be working with
#ifdef MULTI_BUS
	buffer = choose_tx_buffer_from_hcan(hcan);
#else
	buffer = &tx_buffer;
 8001cd8:	4b24      	ldr	r3, [pc, #144]	; (8001d6c <service_can_tx_hardware+0x9c>)
 8001cda:	62fb      	str	r3, [r7, #44]	; 0x2c
#endif // MULTI_BUS

	// add messages to the the TX mailboxes until they are full
	while (!IS_EMPTY(buffer) && HAL_CAN_GetTxMailboxesFreeLevel(hcan))
 8001cdc:	e037      	b.n	8001d4e <service_can_tx_hardware+0x7e>
	{
		U32 tx_mailbox_num;

		// Turn off the TX interrupt (if applicable)
#if TARGET == F7XX || TARGET == F4XX
		HAL_CAN_DeactivateNotification(hcan, CAN_IT_TX_MAILBOX_EMPTY);
 8001cde:	2101      	movs	r1, #1
 8001ce0:	6878      	ldr	r0, [r7, #4]
 8001ce2:	f001 fbe5 	bl	80034b0 <HAL_CAN_DeactivateNotification>
#endif // TARGET == F7XX || TARGET == F4XX

		// get the next CAN message from the TX buffer (FIFO)
		message = GET_FROM_BUFFER(buffer, 0);
 8001ce6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ce8:	6819      	ldr	r1, [r3, #0]
 8001cea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001cec:	795b      	ldrb	r3, [r3, #5]
 8001cee:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001cf0:	7912      	ldrb	r2, [r2, #4]
 8001cf2:	fb93 f0f2 	sdiv	r0, r3, r2
 8001cf6:	fb00 f202 	mul.w	r2, r0, r2
 8001cfa:	1a9b      	subs	r3, r3, r2
 8001cfc:	011b      	lsls	r3, r3, #4
 8001cfe:	440b      	add	r3, r1
 8001d00:	62bb      	str	r3, [r7, #40]	; 0x28

		// configure the settings/params of the CAN message
		tx_header.IDE = CAN_ID_EXT;                                          // 29 bit id
 8001d02:	2304      	movs	r3, #4
 8001d04:	61bb      	str	r3, [r7, #24]
		tx_header.TransmitGlobalTime = DISABLE;                              // do not send a timestamp
 8001d06:	2300      	movs	r3, #0
 8001d08:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
		tx_header.ExtId = message->id;
 8001d0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	617b      	str	r3, [r7, #20]
		tx_header.RTR = message->rtr_bit;
 8001d12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d14:	791b      	ldrb	r3, [r3, #4]
 8001d16:	61fb      	str	r3, [r7, #28]
		tx_header.DLC = message->dlc;
 8001d18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d1a:	795b      	ldrb	r3, [r3, #5]
 8001d1c:	623b      	str	r3, [r7, #32]

		// add the message to the sending list
		if (HAL_CAN_AddTxMessage(hcan, &tx_header, message->data, &tx_mailbox_num) != HAL_OK)
 8001d1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d20:	1d9a      	adds	r2, r3, #6
 8001d22:	f107 030c 	add.w	r3, r7, #12
 8001d26:	f107 0110 	add.w	r1, r7, #16
 8001d2a:	6878      	ldr	r0, [r7, #4]
 8001d2c:	f001 f950 	bl	8002fd0 <HAL_CAN_AddTxMessage>
 8001d30:	4603      	mov	r3, r0
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d004      	beq.n	8001d40 <service_can_tx_hardware+0x70>
		{
			// this will always be HAL_ERROR. Check hcan->ErrorCode
			// hardware error (do not move the head as the message did not send, try again later)

			hcan_error = hcan->ErrorCode;
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d3a:	4a0d      	ldr	r2, [pc, #52]	; (8001d70 <service_can_tx_hardware+0xa0>)
 8001d3c:	6013      	str	r3, [r2, #0]
 8001d3e:	e011      	b.n	8001d64 <service_can_tx_hardware+0x94>
			return;
		}

		// move the head now that the first element has been removed
		remove_from_front(buffer);
 8001d40:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001d42:	f000 fb7c 	bl	800243e <remove_from_front>

		// re-enable the RX interrupt
#if TARGET == F7XX || TARGET == F4XX
		HAL_CAN_ActivateNotification(hcan, CAN_IT_TX_MAILBOX_EMPTY);
 8001d46:	2101      	movs	r1, #1
 8001d48:	6878      	ldr	r0, [r7, #4]
 8001d4a:	f001 fb8b 	bl	8003464 <HAL_CAN_ActivateNotification>
	while (!IS_EMPTY(buffer) && HAL_CAN_GetTxMailboxesFreeLevel(hcan))
 8001d4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d50:	799b      	ldrb	r3, [r3, #6]
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d005      	beq.n	8001d62 <service_can_tx_hardware+0x92>
 8001d56:	6878      	ldr	r0, [r7, #4]
 8001d58:	f001 fa15 	bl	8003186 <HAL_CAN_GetTxMailboxesFreeLevel>
 8001d5c:	4603      	mov	r3, r0
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d1bd      	bne.n	8001cde <service_can_tx_hardware+0xe>
#endif // TARGET == F7XX || TARGET == F4XX
	}

	return;
 8001d62:	bf00      	nop
}
 8001d64:	3730      	adds	r7, #48	; 0x30
 8001d66:	46bd      	mov	sp, r7
 8001d68:	bd80      	pop	{r7, pc}
 8001d6a:	bf00      	nop
 8001d6c:	20000cc4 	.word	0x20000cc4
 8001d70:	20000ab8 	.word	0x20000ab8

08001d74 <service_can_rx_hardware>:
//  U32 rx_mailbox:         the mailbox to service (CAN_RX_FIFO0 or CAN_RX_FIFO1)
//                           Make sure this is valid, no error checking is done
//
//  designed to be called as an ISR whenever there is an RX message pending
void service_can_rx_hardware(CAN_HandleTypeDef* hcan, U32 rx_mailbox)
{
 8001d74:	b580      	push	{r7, lr}
 8001d76:	b08a      	sub	sp, #40	; 0x28
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	6078      	str	r0, [r7, #4]
 8001d7c:	6039      	str	r1, [r7, #0]
	CAN_RxHeaderTypeDef rx_header;
	CAN_MSG* message;

	// get all the pending RX messages from the RX mailbox and store into the RX buffer
	while (!IS_FULL(&rx_buffer) && HAL_CAN_GetRxFifoFillLevel(hcan, rx_mailbox))
 8001d7e:	e037      	b.n	8001df0 <service_can_rx_hardware+0x7c>
	{
		// set message to the correct pointer from the RX buffer (the "last" message in the buffer)
		message = GET_FROM_BUFFER(&rx_buffer, rx_buffer.fill_level);
 8001d80:	4b23      	ldr	r3, [pc, #140]	; (8001e10 <service_can_rx_hardware+0x9c>)
 8001d82:	6819      	ldr	r1, [r3, #0]
 8001d84:	4b22      	ldr	r3, [pc, #136]	; (8001e10 <service_can_rx_hardware+0x9c>)
 8001d86:	795b      	ldrb	r3, [r3, #5]
 8001d88:	461a      	mov	r2, r3
 8001d8a:	4b21      	ldr	r3, [pc, #132]	; (8001e10 <service_can_rx_hardware+0x9c>)
 8001d8c:	799b      	ldrb	r3, [r3, #6]
 8001d8e:	4413      	add	r3, r2
 8001d90:	4a1f      	ldr	r2, [pc, #124]	; (8001e10 <service_can_rx_hardware+0x9c>)
 8001d92:	7912      	ldrb	r2, [r2, #4]
 8001d94:	fb93 f0f2 	sdiv	r0, r3, r2
 8001d98:	fb00 f202 	mul.w	r2, r0, r2
 8001d9c:	1a9b      	subs	r3, r3, r2
 8001d9e:	011b      	lsls	r3, r3, #4
 8001da0:	440b      	add	r3, r1
 8001da2:	627b      	str	r3, [r7, #36]	; 0x24

		// Build the message from the registers on the STM32
		if (HAL_CAN_GetRxMessage(hcan, rx_mailbox, &rx_header, message->data) != HAL_OK)
 8001da4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001da6:	3306      	adds	r3, #6
 8001da8:	f107 0208 	add.w	r2, r7, #8
 8001dac:	6839      	ldr	r1, [r7, #0]
 8001dae:	6878      	ldr	r0, [r7, #4]
 8001db0:	f001 fa1e 	bl	80031f0 <HAL_CAN_GetRxMessage>
 8001db4:	4603      	mov	r3, r0
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d004      	beq.n	8001dc4 <service_can_rx_hardware+0x50>
		{
			// this will always return HAL_ERROR. Check hcan->ErrorCode
			// hardware error (do not move the head as the message did not send, try again later)

			hcan_error = hcan->ErrorCode;
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dbe:	4a15      	ldr	r2, [pc, #84]	; (8001e14 <service_can_rx_hardware+0xa0>)
 8001dc0:	6013      	str	r3, [r2, #0]
 8001dc2:	e022      	b.n	8001e0a <service_can_rx_hardware+0x96>
			return;
		}

		// modify the rx_buffer data to reflect the new message
		rx_buffer.fill_level++;
 8001dc4:	4b12      	ldr	r3, [pc, #72]	; (8001e10 <service_can_rx_hardware+0x9c>)
 8001dc6:	799b      	ldrb	r3, [r3, #6]
 8001dc8:	3301      	adds	r3, #1
 8001dca:	b2da      	uxtb	r2, r3
 8001dcc:	4b10      	ldr	r3, [pc, #64]	; (8001e10 <service_can_rx_hardware+0x9c>)
 8001dce:	719a      	strb	r2, [r3, #6]

		// move the header ID, RTR bit, and DLC into the GopherCAN message struct
		message->rtr_bit = rx_header.RTR;
 8001dd0:	697b      	ldr	r3, [r7, #20]
 8001dd2:	b2da      	uxtb	r2, r3
 8001dd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dd6:	711a      	strb	r2, [r3, #4]
		message->dlc = rx_header.DLC;
 8001dd8:	69bb      	ldr	r3, [r7, #24]
 8001dda:	b2da      	uxtb	r2, r3
 8001ddc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dde:	715a      	strb	r2, [r3, #5]
		message->id = (rx_header.IDE ? rx_header.ExtId : rx_header.StdId);
 8001de0:	693b      	ldr	r3, [r7, #16]
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d001      	beq.n	8001dea <service_can_rx_hardware+0x76>
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	e000      	b.n	8001dec <service_can_rx_hardware+0x78>
 8001dea:	68bb      	ldr	r3, [r7, #8]
 8001dec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001dee:	6013      	str	r3, [r2, #0]
	while (!IS_FULL(&rx_buffer) && HAL_CAN_GetRxFifoFillLevel(hcan, rx_mailbox))
 8001df0:	4b07      	ldr	r3, [pc, #28]	; (8001e10 <service_can_rx_hardware+0x9c>)
 8001df2:	799a      	ldrb	r2, [r3, #6]
 8001df4:	4b06      	ldr	r3, [pc, #24]	; (8001e10 <service_can_rx_hardware+0x9c>)
 8001df6:	791b      	ldrb	r3, [r3, #4]
 8001df8:	429a      	cmp	r2, r3
 8001dfa:	d206      	bcs.n	8001e0a <service_can_rx_hardware+0x96>
 8001dfc:	6839      	ldr	r1, [r7, #0]
 8001dfe:	6878      	ldr	r0, [r7, #4]
 8001e00:	f001 fb08 	bl	8003414 <HAL_CAN_GetRxFifoFillLevel>
 8001e04:	4603      	mov	r3, r0
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d1ba      	bne.n	8001d80 <service_can_rx_hardware+0xc>
		// router specific functionality that directly adds messages that need to be routed
		//  directly to the correct TX buffer (if needed, that decision is made within the function)
		rout_can_message(hcan, message);
#endif // CAN_ROUTER
	}
}
 8001e0a:	3728      	adds	r7, #40	; 0x28
 8001e0c:	46bd      	mov	sp, r7
 8001e0e:	bd80      	pop	{r7, pc}
 8001e10:	20000abc 	.word	0x20000abc
 8001e14:	20000ab8 	.word	0x20000ab8

08001e18 <service_can_rx_buffer>:
//   parameter requests. The request will not be completed and the other module will have to
//   send a new request
//
//  call in a 1 ms or faster loop
S8 service_can_rx_buffer(void)
{
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	b082      	sub	sp, #8
 8001e1c:	af00      	add	r7, sp, #0
	CAN_MSG* current_message;

	// run through each message in the RX buffer and service it with service_can_rx_message() (FIFO)
	while (!IS_EMPTY(&rx_buffer))
 8001e1e:	e013      	b.n	8001e48 <service_can_rx_buffer+0x30>
	{
		// get the message at the head of the array
		current_message = GET_FROM_BUFFER(&rx_buffer, 0);
 8001e20:	4b0e      	ldr	r3, [pc, #56]	; (8001e5c <service_can_rx_buffer+0x44>)
 8001e22:	6819      	ldr	r1, [r3, #0]
 8001e24:	4b0d      	ldr	r3, [pc, #52]	; (8001e5c <service_can_rx_buffer+0x44>)
 8001e26:	795b      	ldrb	r3, [r3, #5]
 8001e28:	4a0c      	ldr	r2, [pc, #48]	; (8001e5c <service_can_rx_buffer+0x44>)
 8001e2a:	7912      	ldrb	r2, [r2, #4]
 8001e2c:	fb93 f0f2 	sdiv	r0, r3, r2
 8001e30:	fb00 f202 	mul.w	r2, r0, r2
 8001e34:	1a9b      	subs	r3, r3, r2
 8001e36:	011b      	lsls	r3, r3, #4
 8001e38:	440b      	add	r3, r1
 8001e3a:	607b      	str	r3, [r7, #4]

		// WARNING: CAN errors from other modules are not handled in this version. The message is just discarded
		// Use a CAN bus analyzer to see what the message is for debugging
		service_can_rx_message(current_message);
 8001e3c:	6878      	ldr	r0, [r7, #4]
 8001e3e:	f000 f83d 	bl	8001ebc <service_can_rx_message>

		// move the head now that the first element has been removed
		remove_from_front(&rx_buffer);
 8001e42:	4806      	ldr	r0, [pc, #24]	; (8001e5c <service_can_rx_buffer+0x44>)
 8001e44:	f000 fafb 	bl	800243e <remove_from_front>
	while (!IS_EMPTY(&rx_buffer))
 8001e48:	4b04      	ldr	r3, [pc, #16]	; (8001e5c <service_can_rx_buffer+0x44>)
 8001e4a:	799b      	ldrb	r3, [r3, #6]
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d1e7      	bne.n	8001e20 <service_can_rx_buffer+0x8>
	}

	return CAN_SUCCESS;
 8001e50:	2300      	movs	r3, #0
}
 8001e52:	4618      	mov	r0, r3
 8001e54:	3708      	adds	r7, #8
 8001e56:	46bd      	mov	sp, r7
 8001e58:	bd80      	pop	{r7, pc}
 8001e5a:	bf00      	nop
 8001e5c:	20000abc 	.word	0x20000abc

08001e60 <tx_can_message>:


// tx_can_message
//  Takes in a CAN_MSG struct, adds it to the TX buffer
static S8 tx_can_message(CAN_MSG* message_to_add)
{
 8001e60:	b580      	push	{r7, lr}
 8001e62:	b084      	sub	sp, #16
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	6078      	str	r0, [r7, #4]
	CAN_MSG_RING_BUFFER* buffer;

	// remove any trailing zeros in the CAN message. This is done by starting at the
	// back of the message and decrementing the DLC for each byte in the message that
	// is zero at the back. RX logic will add zero bytes as needed
	while (message_to_add->dlc > 0
 8001e68:	e005      	b.n	8001e76 <tx_can_message+0x16>
			&& message_to_add->data[message_to_add->dlc - 1] == 0)
	{
		message_to_add->dlc--;
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	795b      	ldrb	r3, [r3, #5]
 8001e6e:	3b01      	subs	r3, #1
 8001e70:	b2da      	uxtb	r2, r3
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	715a      	strb	r2, [r3, #5]
	while (message_to_add->dlc > 0
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	795b      	ldrb	r3, [r3, #5]
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d007      	beq.n	8001e8e <tx_can_message+0x2e>
			&& message_to_add->data[message_to_add->dlc - 1] == 0)
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	795b      	ldrb	r3, [r3, #5]
 8001e82:	3b01      	subs	r3, #1
 8001e84:	687a      	ldr	r2, [r7, #4]
 8001e86:	4413      	add	r3, r2
 8001e88:	799b      	ldrb	r3, [r3, #6]
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d0ed      	beq.n	8001e6a <tx_can_message+0xa>

	// If there are multiple busses, choose the correct bus based on the routing table
	buffer = choose_tx_buffer_from_dest_module(message_to_add);

#else
	buffer = &tx_buffer;
 8001e8e:	4b0a      	ldr	r3, [pc, #40]	; (8001eb8 <tx_can_message+0x58>)
 8001e90:	60fb      	str	r3, [r7, #12]
#endif // MULTI_BUS

	// check to make sure the buffer is not full, then add it to the back of the TX buffer
	if (IS_FULL(buffer))
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	799a      	ldrb	r2, [r3, #6]
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	791b      	ldrb	r3, [r3, #4]
 8001e9a:	429a      	cmp	r2, r3
 8001e9c:	d302      	bcc.n	8001ea4 <tx_can_message+0x44>
	{
		return TX_BUFFER_FULL;
 8001e9e:	f06f 0307 	mvn.w	r3, #7
 8001ea2:	e004      	b.n	8001eae <tx_can_message+0x4e>
#endif // TARGET == F7XX || TARGET == F4XX

	return CAN_SUCCESS;
}
#else
    add_message_by_highest_prio(buffer, message_to_add);
 8001ea4:	6879      	ldr	r1, [r7, #4]
 8001ea6:	68f8      	ldr	r0, [r7, #12]
 8001ea8:	f000 faeb 	bl	8002482 <add_message_by_highest_prio>

    return CAN_SUCCESS;
 8001eac:	2300      	movs	r3, #0
}
 8001eae:	4618      	mov	r0, r3
 8001eb0:	3710      	adds	r7, #16
 8001eb2:	46bd      	mov	sp, r7
 8001eb4:	bd80      	pop	{r7, pc}
 8001eb6:	bf00      	nop
 8001eb8:	20000cc4 	.word	0x20000cc4

08001ebc <service_can_rx_message>:
//  CAN message bus interrupt function this will update all
//  the global variables or trigger the CAN functions if needed.
//  Designed to be called by service_can_rx_software to loop perform
//  this task for each pending CAN message
static S8 service_can_rx_message(CAN_MSG* message)
{
 8001ebc:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001ec0:	b08a      	sub	sp, #40	; 0x28
 8001ec2:	af00      	add	r7, sp, #0
 8001ec4:	6078      	str	r0, [r7, #4]
	CAN_ID id;
	CAN_INFO_STRUCT* data_struct = 0;
 8001ec6:	2300      	movs	r3, #0
 8001ec8:	61bb      	str	r3, [r7, #24]
	FLOAT_CONVERTER float_con;
	U64 received_data = 0;
 8001eca:	f04f 0200 	mov.w	r2, #0
 8001ece:	f04f 0300 	mov.w	r3, #0
 8001ed2:	e9c7 2308 	strd	r2, r3, [r7, #32]
	S8 c;

	get_message_id(&id, message);
 8001ed6:	f107 0310 	add.w	r3, r7, #16
 8001eda:	6879      	ldr	r1, [r7, #4]
 8001edc:	4618      	mov	r0, r3
 8001ede:	f000 f9db 	bl	8002298 <get_message_id>

	// A double check to make sure this message is actually for this module (most useful in the CAN router)
	if (id.dest_module != this_module_id && id.dest_module != ALL_MODULES_ID)
 8001ee2:	7c7a      	ldrb	r2, [r7, #17]
 8001ee4:	4b74      	ldr	r3, [pc, #464]	; (80020b8 <service_can_rx_message+0x1fc>)
 8001ee6:	781b      	ldrb	r3, [r3, #0]
 8001ee8:	429a      	cmp	r2, r3
 8001eea:	d005      	beq.n	8001ef8 <service_can_rx_message+0x3c>
 8001eec:	7c7b      	ldrb	r3, [r7, #17]
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d002      	beq.n	8001ef8 <service_can_rx_message+0x3c>
	{
		// This is not for this module. Do not process this message
		return WRONG_DEST_ERR;
 8001ef2:	f06f 030c 	mvn.w	r3, #12
 8001ef6:	e0d9      	b.n	80020ac <service_can_rx_message+0x1f0>
	}

	// if the message received has the error flag high, put the details into the last_error struct, then return
	if (id.error)
 8001ef8:	7cfb      	ldrb	r3, [r7, #19]
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d014      	beq.n	8001f28 <service_can_rx_message+0x6c>
	{
		// this could possibly be changed into a ring buffer
		last_error.last_rx = HAL_GetTick();
 8001efe:	f000 fb8b 	bl	8002618 <HAL_GetTick>
 8001f02:	4603      	mov	r3, r0
 8001f04:	4a6d      	ldr	r2, [pc, #436]	; (80020bc <service_can_rx_message+0x200>)
 8001f06:	6013      	str	r3, [r2, #0]
		last_error.source_module = id.source_module;
 8001f08:	7cba      	ldrb	r2, [r7, #18]
 8001f0a:	4b6c      	ldr	r3, [pc, #432]	; (80020bc <service_can_rx_message+0x200>)
 8001f0c:	711a      	strb	r2, [r3, #4]
		last_error.parameter = id.parameter;
 8001f0e:	8aba      	ldrh	r2, [r7, #20]
 8001f10:	4b6a      	ldr	r3, [pc, #424]	; (80020bc <service_can_rx_message+0x200>)
 8001f12:	80da      	strh	r2, [r3, #6]
		if (message->dlc > 0)
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	795b      	ldrb	r3, [r3, #5]
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d003      	beq.n	8001f24 <service_can_rx_message+0x68>
		{
			last_error.error_id = message->data[0];
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	799a      	ldrb	r2, [r3, #6]
 8001f20:	4b66      	ldr	r3, [pc, #408]	; (80020bc <service_can_rx_message+0x200>)
 8001f22:	721a      	strb	r2, [r3, #8]
		}

		// return success because the problem is not with the RX
		return CAN_SUCCESS;
 8001f24:	2300      	movs	r3, #0
 8001f26:	e0c1      	b.n	80020ac <service_can_rx_message+0x1f0>
	}

	// error checking on the parameter requested
	if (id.parameter < 0 || id.parameter >= NUM_OF_PARAMETERS)
 8001f28:	8abb      	ldrh	r3, [r7, #20]
 8001f2a:	2bb8      	cmp	r3, #184	; 0xb8
 8001f2c:	d908      	bls.n	8001f40 <service_can_rx_message+0x84>
	{
		send_error_message(&id, ID_NOT_FOUND);
 8001f2e:	f107 0310 	add.w	r3, r7, #16
 8001f32:	2100      	movs	r1, #0
 8001f34:	4618      	mov	r0, r3
 8001f36:	f000 f9e7 	bl	8002308 <send_error_message>

		return NOT_FOUND_ERR;
 8001f3a:	f06f 0309 	mvn.w	r3, #9
 8001f3e:	e0b5      	b.n	80020ac <service_can_rx_message+0x1f0>
	}
	
	// get the associated data struct and set last_rx
	data_struct = (CAN_INFO_STRUCT*)(all_parameter_structs[id.parameter]);
 8001f40:	8abb      	ldrh	r3, [r7, #20]
 8001f42:	461a      	mov	r2, r3
 8001f44:	4b5e      	ldr	r3, [pc, #376]	; (80020c0 <service_can_rx_message+0x204>)
 8001f46:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f4a:	61bb      	str	r3, [r7, #24]
	data_struct->last_rx = HAL_GetTick();
 8001f4c:	f000 fb64 	bl	8002618 <HAL_GetTick>
 8001f50:	4602      	mov	r2, r0
 8001f52:	69bb      	ldr	r3, [r7, #24]
 8001f54:	601a      	str	r2, [r3, #0]

    // run command: run the command specified by the CAN message on this module
	if (parameter_data_types[id.parameter] == COMMAND)
 8001f56:	8abb      	ldrh	r3, [r7, #20]
 8001f58:	461a      	mov	r2, r3
 8001f5a:	4b5a      	ldr	r3, [pc, #360]	; (80020c4 <service_can_rx_message+0x208>)
 8001f5c:	5c9b      	ldrb	r3, [r3, r2]
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d107      	bne.n	8001f72 <service_can_rx_message+0xb6>
	{
		return run_can_command(message, &id);
 8001f62:	f107 0310 	add.w	r3, r7, #16
 8001f66:	4619      	mov	r1, r3
 8001f68:	6878      	ldr	r0, [r7, #4]
 8001f6a:	f000 f8db 	bl	8002124 <run_can_command>
 8001f6e:	4603      	mov	r3, r0
 8001f70:	e09c      	b.n	80020ac <service_can_rx_message+0x1f0>
	}

	// Check the update_enabled flag (if it is not a CAN command)
	if (!(data_struct->update_enabled))
 8001f72:	69bb      	ldr	r3, [r7, #24]
 8001f74:	791b      	ldrb	r3, [r3, #4]
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d108      	bne.n	8001f8c <service_can_rx_message+0xd0>
	{
		send_error_message(&id, PARAM_NOT_ENABLED);
 8001f7a:	f107 0310 	add.w	r3, r7, #16
 8001f7e:	2102      	movs	r1, #2
 8001f80:	4618      	mov	r0, r3
 8001f82:	f000 f9c1 	bl	8002308 <send_error_message>
		return NOT_ENABLED_ERR;
 8001f86:	f06f 030a 	mvn.w	r3, #10
 8001f8a:	e08f      	b.n	80020ac <service_can_rx_message+0x1f0>
	}

	// request parameter: return a CAN message with the data taken from this module
	if (message->rtr_bit)
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	791b      	ldrb	r3, [r3, #4]
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d007      	beq.n	8001fa4 <service_can_rx_message+0xe8>
	{
		return parameter_requested(message, &id);
 8001f94:	f107 0310 	add.w	r3, r7, #16
 8001f98:	4619      	mov	r1, r3
 8001f9a:	6878      	ldr	r0, [r7, #4]
 8001f9c:	f000 f894 	bl	80020c8 <parameter_requested>
 8001fa0:	4603      	mov	r3, r0
 8001fa2:	e083      	b.n	80020ac <service_can_rx_message+0x1f0>
	}

	// this code should only be reached if the message is a data message

	// build the data U64 (big endian)
	for (c = (message->dlc - 1); c >= 0; c--)
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	795b      	ldrb	r3, [r3, #5]
 8001fa8:	3b01      	subs	r3, #1
 8001faa:	b2db      	uxtb	r3, r3
 8001fac:	77fb      	strb	r3, [r7, #31]
 8001fae:	e01b      	b.n	8001fe8 <service_can_rx_message+0x12c>
	{
		received_data |= message->data[c] << (c * BITS_IN_BYTE);
 8001fb0:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8001fb4:	687a      	ldr	r2, [r7, #4]
 8001fb6:	4413      	add	r3, r2
 8001fb8:	799b      	ldrb	r3, [r3, #6]
 8001fba:	461a      	mov	r2, r3
 8001fbc:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8001fc0:	00db      	lsls	r3, r3, #3
 8001fc2:	fa02 f303 	lsl.w	r3, r2, r3
 8001fc6:	17da      	asrs	r2, r3, #31
 8001fc8:	461c      	mov	r4, r3
 8001fca:	4615      	mov	r5, r2
 8001fcc:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001fd0:	ea42 0804 	orr.w	r8, r2, r4
 8001fd4:	ea43 0905 	orr.w	r9, r3, r5
 8001fd8:	e9c7 8908 	strd	r8, r9, [r7, #32]
	for (c = (message->dlc - 1); c >= 0; c--)
 8001fdc:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8001fe0:	b2db      	uxtb	r3, r3
 8001fe2:	3b01      	subs	r3, #1
 8001fe4:	b2db      	uxtb	r3, r3
 8001fe6:	77fb      	strb	r3, [r7, #31]
 8001fe8:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	dadf      	bge.n	8001fb0 <service_can_rx_message+0xf4>
	}

	// Switch the pending_response flag
	data_struct->pending_response = FALSE;
 8001ff0:	69bb      	ldr	r3, [r7, #24]
 8001ff2:	2200      	movs	r2, #0
 8001ff4:	715a      	strb	r2, [r3, #5]

	// this switch will handle all of the different possible data types
	// that can be sent over CAN
	switch (parameter_data_types[id.parameter])
 8001ff6:	8abb      	ldrh	r3, [r7, #20]
 8001ff8:	461a      	mov	r2, r3
 8001ffa:	4b32      	ldr	r3, [pc, #200]	; (80020c4 <service_can_rx_message+0x208>)
 8001ffc:	5c9b      	ldrb	r3, [r3, r2]
 8001ffe:	3b01      	subs	r3, #1
 8002000:	2b08      	cmp	r3, #8
 8002002:	d84b      	bhi.n	800209c <service_can_rx_message+0x1e0>
 8002004:	a201      	add	r2, pc, #4	; (adr r2, 800200c <service_can_rx_message+0x150>)
 8002006:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800200a:	bf00      	nop
 800200c:	08002031 	.word	0x08002031
 8002010:	0800203d 	.word	0x0800203d
 8002014:	08002047 	.word	0x08002047
 8002018:	08002051 	.word	0x08002051
 800201c:	0800205f 	.word	0x0800205f
 8002020:	0800206b 	.word	0x0800206b
 8002024:	08002077 	.word	0x08002077
 8002028:	08002081 	.word	0x08002081
 800202c:	0800208f 	.word	0x0800208f
	{
	case UNSIGNED8:
		((U8_CAN_STRUCT*)(data_struct))->data = (U8)received_data;
 8002030:	f897 2020 	ldrb.w	r2, [r7, #32]
 8002034:	69bb      	ldr	r3, [r7, #24]
 8002036:	71da      	strb	r2, [r3, #7]
		return CAN_SUCCESS;
 8002038:	2300      	movs	r3, #0
 800203a:	e037      	b.n	80020ac <service_can_rx_message+0x1f0>

	case UNSIGNED16:
		((U16_CAN_STRUCT*)(data_struct))->data = (U16)received_data;
 800203c:	8c3a      	ldrh	r2, [r7, #32]
 800203e:	69bb      	ldr	r3, [r7, #24]
 8002040:	811a      	strh	r2, [r3, #8]
		return CAN_SUCCESS;
 8002042:	2300      	movs	r3, #0
 8002044:	e032      	b.n	80020ac <service_can_rx_message+0x1f0>

	case UNSIGNED32:
		((U32_CAN_STRUCT*)(data_struct))->data = (U32)received_data;
 8002046:	6a3a      	ldr	r2, [r7, #32]
 8002048:	69bb      	ldr	r3, [r7, #24]
 800204a:	609a      	str	r2, [r3, #8]
		return CAN_SUCCESS;
 800204c:	2300      	movs	r3, #0
 800204e:	e02d      	b.n	80020ac <service_can_rx_message+0x1f0>

	case UNSIGNED64:
		((U64_CAN_STRUCT*)(data_struct))->data = (U64)received_data;
 8002050:	69b9      	ldr	r1, [r7, #24]
 8002052:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002056:	e9c1 2302 	strd	r2, r3, [r1, #8]
		return CAN_SUCCESS;
 800205a:	2300      	movs	r3, #0
 800205c:	e026      	b.n	80020ac <service_can_rx_message+0x1f0>

	case SIGNED8:
		((S8_CAN_STRUCT*)(data_struct))->data = (S8)received_data;
 800205e:	f997 2020 	ldrsb.w	r2, [r7, #32]
 8002062:	69bb      	ldr	r3, [r7, #24]
 8002064:	71da      	strb	r2, [r3, #7]
		return CAN_SUCCESS;
 8002066:	2300      	movs	r3, #0
 8002068:	e020      	b.n	80020ac <service_can_rx_message+0x1f0>

	case SIGNED16:
		((S16_CAN_STRUCT*)(data_struct))->data = (S16)received_data;
 800206a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800206e:	69bb      	ldr	r3, [r7, #24]
 8002070:	811a      	strh	r2, [r3, #8]
		return CAN_SUCCESS;
 8002072:	2300      	movs	r3, #0
 8002074:	e01a      	b.n	80020ac <service_can_rx_message+0x1f0>

	case SIGNED32:
		((S32_CAN_STRUCT*)(data_struct))->data = (S32)received_data;
 8002076:	6a3a      	ldr	r2, [r7, #32]
 8002078:	69bb      	ldr	r3, [r7, #24]
 800207a:	609a      	str	r2, [r3, #8]
		return CAN_SUCCESS;
 800207c:	2300      	movs	r3, #0
 800207e:	e015      	b.n	80020ac <service_can_rx_message+0x1f0>

	case SIGNED64:
		((S64_CAN_STRUCT*)(data_struct))->data = (S64)received_data;
 8002080:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002084:	69b9      	ldr	r1, [r7, #24]
 8002086:	e9c1 2302 	strd	r2, r3, [r1, #8]
		return CAN_SUCCESS;
 800208a:	2300      	movs	r3, #0
 800208c:	e00e      	b.n	80020ac <service_can_rx_message+0x1f0>

	case FLOATING:
		// Union to get the bitwise data of the float
		float_con.u32 = (U32)received_data;
 800208e:	6a3b      	ldr	r3, [r7, #32]
 8002090:	60fb      	str	r3, [r7, #12]

		((FLOAT_CAN_STRUCT*)(data_struct))->data = float_con.f;
 8002092:	68fa      	ldr	r2, [r7, #12]
 8002094:	69bb      	ldr	r3, [r7, #24]
 8002096:	609a      	str	r2, [r3, #8]
		return CAN_SUCCESS;
 8002098:	2300      	movs	r3, #0
 800209a:	e007      	b.n	80020ac <service_can_rx_message+0x1f0>

	default:
		send_error_message(&id, DATATYPE_NOT_FOUND);
 800209c:	f107 0310 	add.w	r3, r7, #16
 80020a0:	2104      	movs	r1, #4
 80020a2:	4618      	mov	r0, r3
 80020a4:	f000 f930 	bl	8002308 <send_error_message>
		return NOT_FOUND_ERR;
 80020a8:	f06f 0309 	mvn.w	r3, #9
	}

	return CAN_SUCCESS;
}
 80020ac:	4618      	mov	r0, r3
 80020ae:	3728      	adds	r7, #40	; 0x28
 80020b0:	46bd      	mov	sp, r7
 80020b2:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80020b6:	bf00      	nop
 80020b8:	20000aa8 	.word	0x20000aa8
 80020bc:	20000aac 	.word	0x20000aac
 80020c0:	20000018 	.word	0x20000018
 80020c4:	200002fc 	.word	0x200002fc

080020c8 <parameter_requested>:


// parameter_requested
//  return a CAN message with the data taken from this module
static S8 parameter_requested(CAN_MSG* message, CAN_ID* id)
{
 80020c8:	b580      	push	{r7, lr}
 80020ca:	b082      	sub	sp, #8
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	6078      	str	r0, [r7, #4]
 80020d0:	6039      	str	r1, [r7, #0]
	if (message->dlc != REQ_PARAM_SIZE)
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	795b      	ldrb	r3, [r3, #5]
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d006      	beq.n	80020e8 <parameter_requested+0x20>
	{
		send_error_message(id, SIZE_ERROR);
 80020da:	2103      	movs	r1, #3
 80020dc:	6838      	ldr	r0, [r7, #0]
 80020de:	f000 f913 	bl	8002308 <send_error_message>

		return SIZE_ERR;
 80020e2:	f06f 030b 	mvn.w	r3, #11
 80020e6:	e019      	b.n	800211c <parameter_requested+0x54>
	}

	// the requested parameter is stored in id->parameter of the received CAN message
	if (id->parameter <= CAN_COMMAND_ID || id->parameter >= NUM_OF_PARAMETERS)
 80020e8:	683b      	ldr	r3, [r7, #0]
 80020ea:	889b      	ldrh	r3, [r3, #4]
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d003      	beq.n	80020f8 <parameter_requested+0x30>
 80020f0:	683b      	ldr	r3, [r7, #0]
 80020f2:	889b      	ldrh	r3, [r3, #4]
 80020f4:	2bb8      	cmp	r3, #184	; 0xb8
 80020f6:	d906      	bls.n	8002106 <parameter_requested+0x3e>
	{
		send_error_message(id, ID_NOT_FOUND);
 80020f8:	2100      	movs	r1, #0
 80020fa:	6838      	ldr	r0, [r7, #0]
 80020fc:	f000 f904 	bl	8002308 <send_error_message>

		return NOT_FOUND_ERR;
 8002100:	f06f 0309 	mvn.w	r3, #9
 8002104:	e00a      	b.n	800211c <parameter_requested+0x54>
	}

	// send the parameter data to the module that requested
	return send_parameter(id->priority, id->source_module, id->parameter);
 8002106:	683b      	ldr	r3, [r7, #0]
 8002108:	7818      	ldrb	r0, [r3, #0]
 800210a:	683b      	ldr	r3, [r7, #0]
 800210c:	7899      	ldrb	r1, [r3, #2]
 800210e:	683b      	ldr	r3, [r7, #0]
 8002110:	889b      	ldrh	r3, [r3, #4]
 8002112:	b2db      	uxtb	r3, r3
 8002114:	461a      	mov	r2, r3
 8002116:	f7ff fc9b 	bl	8001a50 <send_parameter>
 800211a:	4603      	mov	r3, r0
}
 800211c:	4618      	mov	r0, r3
 800211e:	3708      	adds	r7, #8
 8002120:	46bd      	mov	sp, r7
 8002122:	bd80      	pop	{r7, pc}

08002124 <run_can_command>:


// run_can_command
//  run the command specified by the CAN message on this module
static S8 run_can_command(CAN_MSG* message, CAN_ID* id)
{
 8002124:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002126:	b087      	sub	sp, #28
 8002128:	af02      	add	r7, sp, #8
 800212a:	6078      	str	r0, [r7, #4]
 800212c:	6039      	str	r1, [r7, #0]
	GCAN_COMMAND_ID command_id;
	CUST_FUNC* this_function;
	U8 c;

	// DLC error checking
	if (message->dlc > COMMAND_SIZE)
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	795b      	ldrb	r3, [r3, #5]
 8002132:	2b05      	cmp	r3, #5
 8002134:	d906      	bls.n	8002144 <run_can_command+0x20>
	{
		// there is either no DLC (no function ID) or too many parameters sent
		send_error_message(id, SIZE_ERROR);
 8002136:	2103      	movs	r1, #3
 8002138:	6838      	ldr	r0, [r7, #0]
 800213a:	f000 f8e5 	bl	8002308 <send_error_message>
		return SIZE_ERR;
 800213e:	f06f 030b 	mvn.w	r3, #11
 8002142:	e042      	b.n	80021ca <run_can_command+0xa6>
	}

	// fill in the extra DLC of the message with zeros
	for (c = message->dlc; c < COMMAND_SIZE; c++)
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	795b      	ldrb	r3, [r3, #5]
 8002148:	73fb      	strb	r3, [r7, #15]
 800214a:	e007      	b.n	800215c <run_can_command+0x38>
	{
		message->data[c] = 0;
 800214c:	7bfb      	ldrb	r3, [r7, #15]
 800214e:	687a      	ldr	r2, [r7, #4]
 8002150:	4413      	add	r3, r2
 8002152:	2200      	movs	r2, #0
 8002154:	719a      	strb	r2, [r3, #6]
	for (c = message->dlc; c < COMMAND_SIZE; c++)
 8002156:	7bfb      	ldrb	r3, [r7, #15]
 8002158:	3301      	adds	r3, #1
 800215a:	73fb      	strb	r3, [r7, #15]
 800215c:	7bfb      	ldrb	r3, [r7, #15]
 800215e:	2b04      	cmp	r3, #4
 8002160:	d9f4      	bls.n	800214c <run_can_command+0x28>
	}

	// error checking on the command ID
	command_id = message->data[COMMAND_ID_POS];
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	799b      	ldrb	r3, [r3, #6]
 8002166:	73bb      	strb	r3, [r7, #14]
	if (command_id < 0 || command_id >= NUM_OF_COMMANDS)
 8002168:	7bbb      	ldrb	r3, [r7, #14]
 800216a:	2b08      	cmp	r3, #8
 800216c:	d906      	bls.n	800217c <run_can_command+0x58>
	{
		send_error_message(id, COMMAND_ID_NOT_FOUND);
 800216e:	2101      	movs	r1, #1
 8002170:	6838      	ldr	r0, [r7, #0]
 8002172:	f000 f8c9 	bl	8002308 <send_error_message>

		return NOT_FOUND_ERR;
 8002176:	f06f 0309 	mvn.w	r3, #9
 800217a:	e026      	b.n	80021ca <run_can_command+0xa6>
	}

	this_function = &(cust_funcs[command_id]);
 800217c:	7bba      	ldrb	r2, [r7, #14]
 800217e:	4613      	mov	r3, r2
 8002180:	005b      	lsls	r3, r3, #1
 8002182:	4413      	add	r3, r2
 8002184:	009b      	lsls	r3, r3, #2
 8002186:	4a13      	ldr	r2, [pc, #76]	; (80021d4 <run_can_command+0xb0>)
 8002188:	4413      	add	r3, r2
 800218a:	60bb      	str	r3, [r7, #8]

	// check if the function is enabled
	if (!this_function->func_enabled)
 800218c:	68bb      	ldr	r3, [r7, #8]
 800218e:	791b      	ldrb	r3, [r3, #4]
 8002190:	2b00      	cmp	r3, #0
 8002192:	d106      	bne.n	80021a2 <run_can_command+0x7e>
	{
		send_error_message(id, COMMAND_NOT_ENABLED);
 8002194:	2105      	movs	r1, #5
 8002196:	6838      	ldr	r0, [r7, #0]
 8002198:	f000 f8b6 	bl	8002308 <send_error_message>

		return NOT_ENABLED_ERR;
 800219c:	f06f 030a 	mvn.w	r3, #10
 80021a0:	e013      	b.n	80021ca <run_can_command+0xa6>
	}

	// run the function
	(*(this_function->func_ptr))(id->source_module, this_function->param_ptr,
 80021a2:	68bb      	ldr	r3, [r7, #8]
 80021a4:	681c      	ldr	r4, [r3, #0]
 80021a6:	683b      	ldr	r3, [r7, #0]
 80021a8:	7898      	ldrb	r0, [r3, #2]
 80021aa:	68bb      	ldr	r3, [r7, #8]
 80021ac:	6899      	ldr	r1, [r3, #8]
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	79dd      	ldrb	r5, [r3, #7]
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	7a1e      	ldrb	r6, [r3, #8]
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	7a5b      	ldrb	r3, [r3, #9]
 80021ba:	687a      	ldr	r2, [r7, #4]
 80021bc:	7a92      	ldrb	r2, [r2, #10]
 80021be:	9201      	str	r2, [sp, #4]
 80021c0:	9300      	str	r3, [sp, #0]
 80021c2:	4633      	mov	r3, r6
 80021c4:	462a      	mov	r2, r5
 80021c6:	47a0      	blx	r4
		message->data[COMMAND_PARAM_0], message->data[COMMAND_PARAM_1],
		message->data[COMMAND_PARAM_2], message->data[COMMAND_PARAM_3]);

	return CAN_SUCCESS;
 80021c8:	2300      	movs	r3, #0
}
 80021ca:	4618      	mov	r0, r3
 80021cc:	3714      	adds	r7, #20
 80021ce:	46bd      	mov	sp, r7
 80021d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80021d2:	bf00      	nop
 80021d4:	20000a3c 	.word	0x20000a3c

080021d8 <build_message_id>:

// build_can_id
//  this function will fill in the id of msg when called.
//  No error checking is preformed in this function besides masking
static void build_message_id(CAN_MSG* msg, CAN_ID* id)
{
 80021d8:	b480      	push	{r7}
 80021da:	b085      	sub	sp, #20
 80021dc:	af00      	add	r7, sp, #0
 80021de:	6078      	str	r0, [r7, #4]
 80021e0:	6039      	str	r1, [r7, #0]
	U32 temp;

	msg->id = 0;
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	2200      	movs	r2, #0
 80021e6:	601a      	str	r2, [r3, #0]

	// priority bit
	temp = !!id->priority;
 80021e8:	683b      	ldr	r3, [r7, #0]
 80021ea:	781b      	ldrb	r3, [r3, #0]
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	bf14      	ite	ne
 80021f0:	2301      	movne	r3, #1
 80021f2:	2300      	moveq	r3, #0
 80021f4:	b2db      	uxtb	r3, r3
 80021f6:	60fb      	str	r3, [r7, #12]
	temp <<= (CAN_ID_SIZE - PRIORITY_POS - PRIORITY_SIZE);
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	071b      	lsls	r3, r3, #28
 80021fc:	60fb      	str	r3, [r7, #12]
	temp &= PRIORITY_MASK;
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002204:	60fb      	str	r3, [r7, #12]
	msg->id |= temp;
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681a      	ldr	r2, [r3, #0]
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	431a      	orrs	r2, r3
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	601a      	str	r2, [r3, #0]

	// destination bits
	temp = id->dest_module;
 8002212:	683b      	ldr	r3, [r7, #0]
 8002214:	785b      	ldrb	r3, [r3, #1]
 8002216:	60fb      	str	r3, [r7, #12]
	temp <<= (CAN_ID_SIZE - DEST_POS - DEST_SIZE);
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	059b      	lsls	r3, r3, #22
 800221c:	60fb      	str	r3, [r7, #12]
	temp &= DEST_MASK;
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	f003 637c 	and.w	r3, r3, #264241152	; 0xfc00000
 8002224:	60fb      	str	r3, [r7, #12]
	msg->id |= temp;
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681a      	ldr	r2, [r3, #0]
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	431a      	orrs	r2, r3
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	601a      	str	r2, [r3, #0]

    // source bits
	temp = id->source_module;
 8002232:	683b      	ldr	r3, [r7, #0]
 8002234:	789b      	ldrb	r3, [r3, #2]
 8002236:	60fb      	str	r3, [r7, #12]
	temp <<= (CAN_ID_SIZE - SOURCE_POS - SOURCE_SIZE);
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	041b      	lsls	r3, r3, #16
 800223c:	60fb      	str	r3, [r7, #12]
	temp &= SOURCE_MASK;
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	f403 137c 	and.w	r3, r3, #4128768	; 0x3f0000
 8002244:	60fb      	str	r3, [r7, #12]
	msg->id |= temp;
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681a      	ldr	r2, [r3, #0]
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	431a      	orrs	r2, r3
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	601a      	str	r2, [r3, #0]

	// error bit
	temp = id->error;
 8002252:	683b      	ldr	r3, [r7, #0]
 8002254:	78db      	ldrb	r3, [r3, #3]
 8002256:	60fb      	str	r3, [r7, #12]
	temp <<= (CAN_ID_SIZE - ERROR_POS - ERROR_SIZE);
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	03db      	lsls	r3, r3, #15
 800225c:	60fb      	str	r3, [r7, #12]
	temp &= ERROR_MASK;
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002264:	60fb      	str	r3, [r7, #12]
	msg->id |= temp;
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681a      	ldr	r2, [r3, #0]
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	431a      	orrs	r2, r3
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	601a      	str	r2, [r3, #0]

	// parameter bits
	temp = id->parameter;
 8002272:	683b      	ldr	r3, [r7, #0]
 8002274:	889b      	ldrh	r3, [r3, #4]
 8002276:	60fb      	str	r3, [r7, #12]
	temp <<= (CAN_ID_SIZE - PARAM_POS - PARAM_SIZE);
	temp &= PARAM_MASK;
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800227e:	60fb      	str	r3, [r7, #12]
	msg->id |= temp;
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681a      	ldr	r2, [r3, #0]
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	431a      	orrs	r2, r3
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	601a      	str	r2, [r3, #0]
}
 800228c:	bf00      	nop
 800228e:	3714      	adds	r7, #20
 8002290:	46bd      	mov	sp, r7
 8002292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002296:	4770      	bx	lr

08002298 <get_message_id>:

// get_message_id
//  this function will take in a CAN message and convert it to
//  a CAN id struct. No error checking is performed
static void get_message_id(CAN_ID* id, CAN_MSG* message)
{
 8002298:	b480      	push	{r7}
 800229a:	b083      	sub	sp, #12
 800229c:	af00      	add	r7, sp, #0
 800229e:	6078      	str	r0, [r7, #4]
 80022a0:	6039      	str	r1, [r7, #0]
	id->priority = GET_ID_PRIO(message->id);
 80022a2:	683b      	ldr	r3, [r7, #0]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	0f1b      	lsrs	r3, r3, #28
 80022a8:	b2db      	uxtb	r3, r3
 80022aa:	f003 0301 	and.w	r3, r3, #1
 80022ae:	b2da      	uxtb	r2, r3
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	701a      	strb	r2, [r3, #0]
	id->dest_module = GET_ID_DEST(message->id);
 80022b4:	683b      	ldr	r3, [r7, #0]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	0d9b      	lsrs	r3, r3, #22
 80022ba:	b2db      	uxtb	r3, r3
 80022bc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80022c0:	b2da      	uxtb	r2, r3
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	705a      	strb	r2, [r3, #1]
	id->source_module = GET_ID_SOURCE(message->id);
 80022c6:	683b      	ldr	r3, [r7, #0]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	0c1b      	lsrs	r3, r3, #16
 80022cc:	b2db      	uxtb	r3, r3
 80022ce:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80022d2:	b2da      	uxtb	r2, r3
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	709a      	strb	r2, [r3, #2]
	id->error = GET_ID_ERROR(message->id);
 80022d8:	683b      	ldr	r3, [r7, #0]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	0bdb      	lsrs	r3, r3, #15
 80022de:	b2db      	uxtb	r3, r3
 80022e0:	f003 0301 	and.w	r3, r3, #1
 80022e4:	b2da      	uxtb	r2, r3
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	70da      	strb	r2, [r3, #3]
	id->parameter = GET_ID_PARAM(message->id);
 80022ea:	683b      	ldr	r3, [r7, #0]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	b29b      	uxth	r3, r3
 80022f0:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80022f4:	b29a      	uxth	r2, r3
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	809a      	strh	r2, [r3, #4]
}
 80022fa:	bf00      	nop
 80022fc:	370c      	adds	r7, #12
 80022fe:	46bd      	mov	sp, r7
 8002300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002304:	4770      	bx	lr
	...

08002308 <send_error_message>:


// send_error_message
//  Sends a return message to the original sender with the ID specified
static S8 send_error_message(CAN_ID* rx_id, U8 error_id)
{
 8002308:	b580      	push	{r7, lr}
 800230a:	b088      	sub	sp, #32
 800230c:	af00      	add	r7, sp, #0
 800230e:	6078      	str	r0, [r7, #4]
 8002310:	460b      	mov	r3, r1
 8002312:	70fb      	strb	r3, [r7, #3]
	CAN_MSG message;
	CAN_ID tx_id;

	// create the CAN ID for the error message
	tx_id.priority = rx_id->priority;
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	781b      	ldrb	r3, [r3, #0]
 8002318:	723b      	strb	r3, [r7, #8]
	tx_id.dest_module = rx_id->source_module;
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	789b      	ldrb	r3, [r3, #2]
 800231e:	727b      	strb	r3, [r7, #9]
	tx_id.source_module = this_module_id;
 8002320:	4b0f      	ldr	r3, [pc, #60]	; (8002360 <send_error_message+0x58>)
 8002322:	781b      	ldrb	r3, [r3, #0]
 8002324:	72bb      	strb	r3, [r7, #10]
	tx_id.error = TRUE;
 8002326:	2301      	movs	r3, #1
 8002328:	72fb      	strb	r3, [r7, #11]
	tx_id.parameter = rx_id->parameter;
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	889b      	ldrh	r3, [r3, #4]
 800232e:	81bb      	strh	r3, [r7, #12]

	build_message_id(&message, &tx_id);
 8002330:	f107 0208 	add.w	r2, r7, #8
 8002334:	f107 0310 	add.w	r3, r7, #16
 8002338:	4611      	mov	r1, r2
 800233a:	4618      	mov	r0, r3
 800233c:	f7ff ff4c 	bl	80021d8 <build_message_id>

	// set the RTR bit to a data message
	message.rtr_bit = DATA_MESSAGE;
 8002340:	2300      	movs	r3, #0
 8002342:	753b      	strb	r3, [r7, #20]

	// set the DLC and data
	message.dlc = sizeof(error_id);
 8002344:	2301      	movs	r3, #1
 8002346:	757b      	strb	r3, [r7, #21]
	message.data[0] = error_id;
 8002348:	78fb      	ldrb	r3, [r7, #3]
 800234a:	75bb      	strb	r3, [r7, #22]

	// send the CAN message
	return tx_can_message(&message);
 800234c:	f107 0310 	add.w	r3, r7, #16
 8002350:	4618      	mov	r0, r3
 8002352:	f7ff fd85 	bl	8001e60 <tx_can_message>
 8002356:	4603      	mov	r3, r0
}
 8002358:	4618      	mov	r0, r3
 800235a:	3720      	adds	r7, #32
 800235c:	46bd      	mov	sp, r7
 800235e:	bd80      	pop	{r7, pc}
 8002360:	20000aa8 	.word	0x20000aa8

08002364 <HAL_CAN_TxMailbox0CompleteCallback>:


// the F7xx has ISRs for available TX mailboxes having an opening. All callbacks should service the TX hardware
#if TARGET == F7XX || TARGET == F4XX
void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef* hcan)
{
 8002364:	b580      	push	{r7, lr}
 8002366:	b082      	sub	sp, #8
 8002368:	af00      	add	r7, sp, #0
 800236a:	6078      	str	r0, [r7, #4]
	service_can_tx_hardware(hcan);
 800236c:	6878      	ldr	r0, [r7, #4]
 800236e:	f7ff fcaf 	bl	8001cd0 <service_can_tx_hardware>
}
 8002372:	bf00      	nop
 8002374:	3708      	adds	r7, #8
 8002376:	46bd      	mov	sp, r7
 8002378:	bd80      	pop	{r7, pc}

0800237a <HAL_CAN_TxMailbox1CompleteCallback>:

void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef* hcan)
{
 800237a:	b580      	push	{r7, lr}
 800237c:	b082      	sub	sp, #8
 800237e:	af00      	add	r7, sp, #0
 8002380:	6078      	str	r0, [r7, #4]
	service_can_tx_hardware(hcan);
 8002382:	6878      	ldr	r0, [r7, #4]
 8002384:	f7ff fca4 	bl	8001cd0 <service_can_tx_hardware>
}
 8002388:	bf00      	nop
 800238a:	3708      	adds	r7, #8
 800238c:	46bd      	mov	sp, r7
 800238e:	bd80      	pop	{r7, pc}

08002390 <HAL_CAN_TxMailbox2CompleteCallback>:

void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef* hcan)
{
 8002390:	b580      	push	{r7, lr}
 8002392:	b082      	sub	sp, #8
 8002394:	af00      	add	r7, sp, #0
 8002396:	6078      	str	r0, [r7, #4]
	service_can_tx_hardware(hcan);
 8002398:	6878      	ldr	r0, [r7, #4]
 800239a:	f7ff fc99 	bl	8001cd0 <service_can_tx_hardware>
}
 800239e:	bf00      	nop
 80023a0:	3708      	adds	r7, #8
 80023a2:	46bd      	mov	sp, r7
 80023a4:	bd80      	pop	{r7, pc}

080023a6 <HAL_CAN_TxMailbox0AbortCallback>:

void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef* hcan)
{
 80023a6:	b580      	push	{r7, lr}
 80023a8:	b082      	sub	sp, #8
 80023aa:	af00      	add	r7, sp, #0
 80023ac:	6078      	str	r0, [r7, #4]
	service_can_tx_hardware(hcan);
 80023ae:	6878      	ldr	r0, [r7, #4]
 80023b0:	f7ff fc8e 	bl	8001cd0 <service_can_tx_hardware>
}
 80023b4:	bf00      	nop
 80023b6:	3708      	adds	r7, #8
 80023b8:	46bd      	mov	sp, r7
 80023ba:	bd80      	pop	{r7, pc}

080023bc <HAL_CAN_TxMailbox1AbortCallback>:

void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef* hcan)
{
 80023bc:	b580      	push	{r7, lr}
 80023be:	b082      	sub	sp, #8
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	6078      	str	r0, [r7, #4]
	service_can_tx_hardware(hcan);
 80023c4:	6878      	ldr	r0, [r7, #4]
 80023c6:	f7ff fc83 	bl	8001cd0 <service_can_tx_hardware>
}
 80023ca:	bf00      	nop
 80023cc:	3708      	adds	r7, #8
 80023ce:	46bd      	mov	sp, r7
 80023d0:	bd80      	pop	{r7, pc}

080023d2 <HAL_CAN_TxMailbox2AbortCallback>:

void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef* hcan)
{
 80023d2:	b580      	push	{r7, lr}
 80023d4:	b082      	sub	sp, #8
 80023d6:	af00      	add	r7, sp, #0
 80023d8:	6078      	str	r0, [r7, #4]
	service_can_tx_hardware(hcan);
 80023da:	6878      	ldr	r0, [r7, #4]
 80023dc:	f7ff fc78 	bl	8001cd0 <service_can_tx_hardware>
}
 80023e0:	bf00      	nop
 80023e2:	3708      	adds	r7, #8
 80023e4:	46bd      	mov	sp, r7
 80023e6:	bd80      	pop	{r7, pc}

080023e8 <do_nothing>:
// do_nothing
//  this exists to give a default function pointer to all of the CAN commands
//  to avoid errors from bad function pointers
void do_nothing(U8 sending_module, void* param,
	U8 remote_param0, U8 remote_param1, U8 remote_param2, U8 remote_param3)
{
 80023e8:	b480      	push	{r7}
 80023ea:	b083      	sub	sp, #12
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	6039      	str	r1, [r7, #0]
 80023f0:	4611      	mov	r1, r2
 80023f2:	461a      	mov	r2, r3
 80023f4:	4603      	mov	r3, r0
 80023f6:	71fb      	strb	r3, [r7, #7]
 80023f8:	460b      	mov	r3, r1
 80023fa:	71bb      	strb	r3, [r7, #6]
 80023fc:	4613      	mov	r3, r2
 80023fe:	717b      	strb	r3, [r7, #5]
	// this function has successfully done nothing
}
 8002400:	bf00      	nop
 8002402:	370c      	adds	r7, #12
 8002404:	46bd      	mov	sp, r7
 8002406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800240a:	4770      	bx	lr

0800240c <init_buffer>:


// init_buffer
//  initialize the buffer with the values passed in as parameters
void init_buffer(CAN_MSG_RING_BUFFER* buffer, CAN_MSG buffer_memory_ptr[], U8 buffer_size)
{
 800240c:	b480      	push	{r7}
 800240e:	b085      	sub	sp, #20
 8002410:	af00      	add	r7, sp, #0
 8002412:	60f8      	str	r0, [r7, #12]
 8002414:	60b9      	str	r1, [r7, #8]
 8002416:	4613      	mov	r3, r2
 8002418:	71fb      	strb	r3, [r7, #7]
	buffer->head = 0;
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	2200      	movs	r2, #0
 800241e:	715a      	strb	r2, [r3, #5]
	buffer->fill_level = 0;
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	2200      	movs	r2, #0
 8002424:	719a      	strb	r2, [r3, #6]
	buffer->size = buffer_size;
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	79fa      	ldrb	r2, [r7, #7]
 800242a:	711a      	strb	r2, [r3, #4]
	buffer->message_buffer = buffer_memory_ptr;
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	68ba      	ldr	r2, [r7, #8]
 8002430:	601a      	str	r2, [r3, #0]
}
 8002432:	bf00      	nop
 8002434:	3714      	adds	r7, #20
 8002436:	46bd      	mov	sp, r7
 8002438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800243c:	4770      	bx	lr

0800243e <remove_from_front>:


// remove_from_front
//  will remove the first element of the ring buffer. If the buffer is empty it will do nothing
void remove_from_front(CAN_MSG_RING_BUFFER* buffer)
{
 800243e:	b480      	push	{r7}
 8002440:	b083      	sub	sp, #12
 8002442:	af00      	add	r7, sp, #0
 8002444:	6078      	str	r0, [r7, #4]
	// don't do anything if the buffer is empty
	if (IS_EMPTY(buffer))
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	799b      	ldrb	r3, [r3, #6]
 800244a:	2b00      	cmp	r3, #0
 800244c:	d013      	beq.n	8002476 <remove_from_front+0x38>
	{
		return;
	}

	// move the head to the next element
	buffer->head = (buffer->head + 1) % buffer->size;
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	795b      	ldrb	r3, [r3, #5]
 8002452:	3301      	adds	r3, #1
 8002454:	687a      	ldr	r2, [r7, #4]
 8002456:	7912      	ldrb	r2, [r2, #4]
 8002458:	fb93 f1f2 	sdiv	r1, r3, r2
 800245c:	fb01 f202 	mul.w	r2, r1, r2
 8002460:	1a9b      	subs	r3, r3, r2
 8002462:	b2da      	uxtb	r2, r3
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	715a      	strb	r2, [r3, #5]

	// decrement the fill level
	buffer->fill_level--;
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	799b      	ldrb	r3, [r3, #6]
 800246c:	3b01      	subs	r3, #1
 800246e:	b2da      	uxtb	r2, r3
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	719a      	strb	r2, [r3, #6]
 8002474:	e000      	b.n	8002478 <remove_from_front+0x3a>
		return;
 8002476:	bf00      	nop
}
 8002478:	370c      	adds	r7, #12
 800247a:	46bd      	mov	sp, r7
 800247c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002480:	4770      	bx	lr

08002482 <add_message_by_highest_prio>:
//  This function will add message to the buffer based on the ID of the message. Higher
//  priority messages (lower ID) will be towards the front, with lower priority
//  messages (greater ID) will be towards the back. Removing from the front will get
//  the highest priority message. This function assumes the buffer is not full
void add_message_by_highest_prio(CAN_MSG_RING_BUFFER* buffer, CAN_MSG* message)
{
 8002482:	b580      	push	{r7, lr}
 8002484:	b084      	sub	sp, #16
 8002486:	af00      	add	r7, sp, #0
 8002488:	6078      	str	r0, [r7, #4]
 800248a:	6039      	str	r1, [r7, #0]
	CAN_MSG* buffer_message = GET_FROM_BUFFER(buffer, 0);
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	6819      	ldr	r1, [r3, #0]
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	795b      	ldrb	r3, [r3, #5]
 8002494:	687a      	ldr	r2, [r7, #4]
 8002496:	7912      	ldrb	r2, [r2, #4]
 8002498:	fb93 f0f2 	sdiv	r0, r3, r2
 800249c:	fb00 f202 	mul.w	r2, r0, r2
 80024a0:	1a9b      	subs	r3, r3, r2
 80024a2:	011b      	lsls	r3, r3, #4
 80024a4:	440b      	add	r3, r1
 80024a6:	60fb      	str	r3, [r7, #12]

	// start from the back of the buffer, moving each message towards the back
	// by one and put the new message in the correct spot by ID. If the buffer
	// was empty when the message first went through here, it will put the new
	// message in position 0
	buffer->fill_level++;
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	799b      	ldrb	r3, [r3, #6]
 80024ac:	3301      	adds	r3, #1
 80024ae:	b2da      	uxtb	r2, r3
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	719a      	strb	r2, [r3, #6]
	for (c = buffer->fill_level - 2; c >= 0; c--)
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	799b      	ldrb	r3, [r3, #6]
 80024b8:	b29b      	uxth	r3, r3
 80024ba:	3b02      	subs	r3, #2
 80024bc:	b29b      	uxth	r3, r3
 80024be:	817b      	strh	r3, [r7, #10]
 80024c0:	e047      	b.n	8002552 <add_message_by_highest_prio+0xd0>
	{
		buffer_message = GET_FROM_BUFFER(buffer, c);
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	6819      	ldr	r1, [r3, #0]
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	795b      	ldrb	r3, [r3, #5]
 80024ca:	461a      	mov	r2, r3
 80024cc:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80024d0:	4413      	add	r3, r2
 80024d2:	687a      	ldr	r2, [r7, #4]
 80024d4:	7912      	ldrb	r2, [r2, #4]
 80024d6:	fb93 f0f2 	sdiv	r0, r3, r2
 80024da:	fb00 f202 	mul.w	r2, r0, r2
 80024de:	1a9b      	subs	r3, r3, r2
 80024e0:	011b      	lsls	r3, r3, #4
 80024e2:	440b      	add	r3, r1
 80024e4:	60fb      	str	r3, [r7, #12]
		if (message->id >= buffer_message->id)
 80024e6:	683b      	ldr	r3, [r7, #0]
 80024e8:	681a      	ldr	r2, [r3, #0]
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	429a      	cmp	r2, r3
 80024f0:	d313      	bcc.n	800251a <add_message_by_highest_prio+0x98>
		{
			// we have found the correct place for the new message
			buffer_message = GET_FROM_BUFFER(buffer, c + 1);
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	6819      	ldr	r1, [r3, #0]
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	795b      	ldrb	r3, [r3, #5]
 80024fa:	461a      	mov	r2, r3
 80024fc:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8002500:	4413      	add	r3, r2
 8002502:	3301      	adds	r3, #1
 8002504:	687a      	ldr	r2, [r7, #4]
 8002506:	7912      	ldrb	r2, [r2, #4]
 8002508:	fb93 f0f2 	sdiv	r0, r3, r2
 800250c:	fb00 f202 	mul.w	r2, r0, r2
 8002510:	1a9b      	subs	r3, r3, r2
 8002512:	011b      	lsls	r3, r3, #4
 8002514:	440b      	add	r3, r1
 8002516:	60fb      	str	r3, [r7, #12]
			break;
 8002518:	e01f      	b.n	800255a <add_message_by_highest_prio+0xd8>
		}

		// move this message back by 1 and try again
		copy_message(buffer_message, GET_FROM_BUFFER(buffer, c + 1));
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	6819      	ldr	r1, [r3, #0]
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	795b      	ldrb	r3, [r3, #5]
 8002522:	461a      	mov	r2, r3
 8002524:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8002528:	4413      	add	r3, r2
 800252a:	3301      	adds	r3, #1
 800252c:	687a      	ldr	r2, [r7, #4]
 800252e:	7912      	ldrb	r2, [r2, #4]
 8002530:	fb93 f0f2 	sdiv	r0, r3, r2
 8002534:	fb00 f202 	mul.w	r2, r0, r2
 8002538:	1a9b      	subs	r3, r3, r2
 800253a:	011b      	lsls	r3, r3, #4
 800253c:	440b      	add	r3, r1
 800253e:	4619      	mov	r1, r3
 8002540:	68f8      	ldr	r0, [r7, #12]
 8002542:	f000 f812 	bl	800256a <copy_message>
	for (c = buffer->fill_level - 2; c >= 0; c--)
 8002546:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800254a:	b29b      	uxth	r3, r3
 800254c:	3b01      	subs	r3, #1
 800254e:	b29b      	uxth	r3, r3
 8002550:	817b      	strh	r3, [r7, #10]
 8002552:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8002556:	2b00      	cmp	r3, #0
 8002558:	dab3      	bge.n	80024c2 <add_message_by_highest_prio+0x40>
	}

	// put the message into the buffer at this position
	copy_message(message, buffer_message);
 800255a:	68f9      	ldr	r1, [r7, #12]
 800255c:	6838      	ldr	r0, [r7, #0]
 800255e:	f000 f804 	bl	800256a <copy_message>
}
 8002562:	bf00      	nop
 8002564:	3710      	adds	r7, #16
 8002566:	46bd      	mov	sp, r7
 8002568:	bd80      	pop	{r7, pc}

0800256a <copy_message>:


// copy_message
//  function to copy all of the data in source to dest by value, not by refernce
static void copy_message(CAN_MSG* source, CAN_MSG* dest)
{
 800256a:	b480      	push	{r7}
 800256c:	b085      	sub	sp, #20
 800256e:	af00      	add	r7, sp, #0
 8002570:	6078      	str	r0, [r7, #4]
 8002572:	6039      	str	r1, [r7, #0]
	U8 c;

	dest->id = source->id;
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681a      	ldr	r2, [r3, #0]
 8002578:	683b      	ldr	r3, [r7, #0]
 800257a:	601a      	str	r2, [r3, #0]
	dest->dlc = source->dlc;
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	795a      	ldrb	r2, [r3, #5]
 8002580:	683b      	ldr	r3, [r7, #0]
 8002582:	715a      	strb	r2, [r3, #5]
	dest->rtr_bit = source->rtr_bit;
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	791a      	ldrb	r2, [r3, #4]
 8002588:	683b      	ldr	r3, [r7, #0]
 800258a:	711a      	strb	r2, [r3, #4]

	for (c = 0; c < dest->dlc; c++)
 800258c:	2300      	movs	r3, #0
 800258e:	73fb      	strb	r3, [r7, #15]
 8002590:	e00b      	b.n	80025aa <copy_message+0x40>
	{
		dest->data[c] = source->data[c];
 8002592:	7bfa      	ldrb	r2, [r7, #15]
 8002594:	7bfb      	ldrb	r3, [r7, #15]
 8002596:	6879      	ldr	r1, [r7, #4]
 8002598:	440a      	add	r2, r1
 800259a:	7991      	ldrb	r1, [r2, #6]
 800259c:	683a      	ldr	r2, [r7, #0]
 800259e:	4413      	add	r3, r2
 80025a0:	460a      	mov	r2, r1
 80025a2:	719a      	strb	r2, [r3, #6]
	for (c = 0; c < dest->dlc; c++)
 80025a4:	7bfb      	ldrb	r3, [r7, #15]
 80025a6:	3301      	adds	r3, #1
 80025a8:	73fb      	strb	r3, [r7, #15]
 80025aa:	683b      	ldr	r3, [r7, #0]
 80025ac:	795b      	ldrb	r3, [r3, #5]
 80025ae:	7bfa      	ldrb	r2, [r7, #15]
 80025b0:	429a      	cmp	r2, r3
 80025b2:	d3ee      	bcc.n	8002592 <copy_message+0x28>
	}
}
 80025b4:	bf00      	nop
 80025b6:	bf00      	nop
 80025b8:	3714      	adds	r7, #20
 80025ba:	46bd      	mov	sp, r7
 80025bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c0:	4770      	bx	lr
	...

080025c4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80025c4:	b580      	push	{r7, lr}
 80025c6:	af00      	add	r7, sp, #0
  /* Configure Instruction cache through ART accelerator */ 
#if (ART_ACCLERATOR_ENABLE != 0)
   __HAL_FLASH_ART_ENABLE();
 80025c8:	4b08      	ldr	r3, [pc, #32]	; (80025ec <HAL_Init+0x28>)
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	4a07      	ldr	r2, [pc, #28]	; (80025ec <HAL_Init+0x28>)
 80025ce:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80025d2:	6013      	str	r3, [r2, #0]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80025d4:	2003      	movs	r0, #3
 80025d6:	f001 fa28 	bl	8003a2a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80025da:	2000      	movs	r0, #0
 80025dc:	f7fe ffb6 	bl	800154c <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 80025e0:	f7fe fe00 	bl	80011e4 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 80025e4:	2300      	movs	r3, #0
}
 80025e6:	4618      	mov	r0, r3
 80025e8:	bd80      	pop	{r7, pc}
 80025ea:	bf00      	nop
 80025ec:	40023c00 	.word	0x40023c00

080025f0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80025f0:	b480      	push	{r7}
 80025f2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80025f4:	4b06      	ldr	r3, [pc, #24]	; (8002610 <HAL_IncTick+0x20>)
 80025f6:	781b      	ldrb	r3, [r3, #0]
 80025f8:	461a      	mov	r2, r3
 80025fa:	4b06      	ldr	r3, [pc, #24]	; (8002614 <HAL_IncTick+0x24>)
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	4413      	add	r3, r2
 8002600:	4a04      	ldr	r2, [pc, #16]	; (8002614 <HAL_IncTick+0x24>)
 8002602:	6013      	str	r3, [r2, #0]
}
 8002604:	bf00      	nop
 8002606:	46bd      	mov	sp, r7
 8002608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800260c:	4770      	bx	lr
 800260e:	bf00      	nop
 8002610:	200003bc 	.word	0x200003bc
 8002614:	2000173c 	.word	0x2000173c

08002618 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002618:	b480      	push	{r7}
 800261a:	af00      	add	r7, sp, #0
  return uwTick;
 800261c:	4b03      	ldr	r3, [pc, #12]	; (800262c <HAL_GetTick+0x14>)
 800261e:	681b      	ldr	r3, [r3, #0]
}
 8002620:	4618      	mov	r0, r3
 8002622:	46bd      	mov	sp, r7
 8002624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002628:	4770      	bx	lr
 800262a:	bf00      	nop
 800262c:	2000173c 	.word	0x2000173c

08002630 <HAL_SetTickFreq>:
/**
  * @brief Set new tick Freq.
  * @retval Status
  */
HAL_StatusTypeDef HAL_SetTickFreq(HAL_TickFreqTypeDef Freq)
{
 8002630:	b580      	push	{r7, lr}
 8002632:	b084      	sub	sp, #16
 8002634:	af00      	add	r7, sp, #0
 8002636:	4603      	mov	r3, r0
 8002638:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef status  = HAL_OK;
 800263a:	2300      	movs	r3, #0
 800263c:	73fb      	strb	r3, [r7, #15]
  HAL_TickFreqTypeDef prevTickFreq;

  assert_param(IS_TICKFREQ(Freq));

  if (uwTickFreq != Freq)
 800263e:	4b0e      	ldr	r3, [pc, #56]	; (8002678 <HAL_SetTickFreq+0x48>)
 8002640:	781b      	ldrb	r3, [r3, #0]
 8002642:	79fa      	ldrb	r2, [r7, #7]
 8002644:	429a      	cmp	r2, r3
 8002646:	d012      	beq.n	800266e <HAL_SetTickFreq+0x3e>
  {
    /* Back up uwTickFreq frequency */
    prevTickFreq = uwTickFreq;
 8002648:	4b0b      	ldr	r3, [pc, #44]	; (8002678 <HAL_SetTickFreq+0x48>)
 800264a:	781b      	ldrb	r3, [r3, #0]
 800264c:	73bb      	strb	r3, [r7, #14]

    /* Update uwTickFreq global variable used by HAL_InitTick() */
    uwTickFreq = Freq;
 800264e:	4a0a      	ldr	r2, [pc, #40]	; (8002678 <HAL_SetTickFreq+0x48>)
 8002650:	79fb      	ldrb	r3, [r7, #7]
 8002652:	7013      	strb	r3, [r2, #0]

    /* Apply the new tick Freq  */
    status = HAL_InitTick(uwTickPrio);
 8002654:	4b09      	ldr	r3, [pc, #36]	; (800267c <HAL_SetTickFreq+0x4c>)
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	4618      	mov	r0, r3
 800265a:	f7fe ff77 	bl	800154c <HAL_InitTick>
 800265e:	4603      	mov	r3, r0
 8002660:	73fb      	strb	r3, [r7, #15]

    if (status != HAL_OK)
 8002662:	7bfb      	ldrb	r3, [r7, #15]
 8002664:	2b00      	cmp	r3, #0
 8002666:	d002      	beq.n	800266e <HAL_SetTickFreq+0x3e>
    {
      /* Restore previous tick frequency */
      uwTickFreq = prevTickFreq;
 8002668:	4a03      	ldr	r2, [pc, #12]	; (8002678 <HAL_SetTickFreq+0x48>)
 800266a:	7bbb      	ldrb	r3, [r7, #14]
 800266c:	7013      	strb	r3, [r2, #0]
    }
  }

  return status;
 800266e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002670:	4618      	mov	r0, r3
 8002672:	3710      	adds	r7, #16
 8002674:	46bd      	mov	sp, r7
 8002676:	bd80      	pop	{r7, pc}
 8002678:	200003bc 	.word	0x200003bc
 800267c:	200003b8 	.word	0x200003b8

08002680 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002680:	b580      	push	{r7, lr}
 8002682:	b084      	sub	sp, #16
 8002684:	af00      	add	r7, sp, #0
 8002686:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002688:	2300      	movs	r3, #0
 800268a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	2b00      	cmp	r3, #0
 8002690:	d101      	bne.n	8002696 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002692:	2301      	movs	r3, #1
 8002694:	e031      	b.n	80026fa <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800269a:	2b00      	cmp	r3, #0
 800269c:	d109      	bne.n	80026b2 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800269e:	6878      	ldr	r0, [r7, #4]
 80026a0:	f7fe fdc8 	bl	8001234 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	2200      	movs	r2, #0
 80026a8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	2200      	movs	r2, #0
 80026ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026b6:	f003 0310 	and.w	r3, r3, #16
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d116      	bne.n	80026ec <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80026c2:	4b10      	ldr	r3, [pc, #64]	; (8002704 <HAL_ADC_Init+0x84>)
 80026c4:	4013      	ands	r3, r2
 80026c6:	f043 0202 	orr.w	r2, r3, #2
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80026ce:	6878      	ldr	r0, [r7, #4]
 80026d0:	f000 f964 	bl	800299c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	2200      	movs	r2, #0
 80026d8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026de:	f023 0303 	bic.w	r3, r3, #3
 80026e2:	f043 0201 	orr.w	r2, r3, #1
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	641a      	str	r2, [r3, #64]	; 0x40
 80026ea:	e001      	b.n	80026f0 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80026ec:	2301      	movs	r3, #1
 80026ee:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	2200      	movs	r2, #0
 80026f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80026f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80026fa:	4618      	mov	r0, r3
 80026fc:	3710      	adds	r7, #16
 80026fe:	46bd      	mov	sp, r7
 8002700:	bd80      	pop	{r7, pc}
 8002702:	bf00      	nop
 8002704:	ffffeefd 	.word	0xffffeefd

08002708 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002708:	b480      	push	{r7}
 800270a:	b085      	sub	sp, #20
 800270c:	af00      	add	r7, sp, #0
 800270e:	6078      	str	r0, [r7, #4]
 8002710:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8002712:	2300      	movs	r3, #0
 8002714:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800271c:	2b01      	cmp	r3, #1
 800271e:	d101      	bne.n	8002724 <HAL_ADC_ConfigChannel+0x1c>
 8002720:	2302      	movs	r3, #2
 8002722:	e12a      	b.n	800297a <HAL_ADC_ConfigChannel+0x272>
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	2201      	movs	r2, #1
 8002728:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 800272c:	683b      	ldr	r3, [r7, #0]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	2b09      	cmp	r3, #9
 8002732:	d93a      	bls.n	80027aa <HAL_ADC_ConfigChannel+0xa2>
 8002734:	683b      	ldr	r3, [r7, #0]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800273c:	d035      	beq.n	80027aa <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	68d9      	ldr	r1, [r3, #12]
 8002744:	683b      	ldr	r3, [r7, #0]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	b29b      	uxth	r3, r3
 800274a:	461a      	mov	r2, r3
 800274c:	4613      	mov	r3, r2
 800274e:	005b      	lsls	r3, r3, #1
 8002750:	4413      	add	r3, r2
 8002752:	3b1e      	subs	r3, #30
 8002754:	2207      	movs	r2, #7
 8002756:	fa02 f303 	lsl.w	r3, r2, r3
 800275a:	43da      	mvns	r2, r3
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	400a      	ands	r2, r1
 8002762:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002764:	683b      	ldr	r3, [r7, #0]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	4a87      	ldr	r2, [pc, #540]	; (8002988 <HAL_ADC_ConfigChannel+0x280>)
 800276a:	4293      	cmp	r3, r2
 800276c:	d10a      	bne.n	8002784 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	68d9      	ldr	r1, [r3, #12]
 8002774:	683b      	ldr	r3, [r7, #0]
 8002776:	689b      	ldr	r3, [r3, #8]
 8002778:	061a      	lsls	r2, r3, #24
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	430a      	orrs	r2, r1
 8002780:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002782:	e035      	b.n	80027f0 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	68d9      	ldr	r1, [r3, #12]
 800278a:	683b      	ldr	r3, [r7, #0]
 800278c:	689a      	ldr	r2, [r3, #8]
 800278e:	683b      	ldr	r3, [r7, #0]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	b29b      	uxth	r3, r3
 8002794:	4618      	mov	r0, r3
 8002796:	4603      	mov	r3, r0
 8002798:	005b      	lsls	r3, r3, #1
 800279a:	4403      	add	r3, r0
 800279c:	3b1e      	subs	r3, #30
 800279e:	409a      	lsls	r2, r3
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	430a      	orrs	r2, r1
 80027a6:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80027a8:	e022      	b.n	80027f0 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	6919      	ldr	r1, [r3, #16]
 80027b0:	683b      	ldr	r3, [r7, #0]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	b29b      	uxth	r3, r3
 80027b6:	461a      	mov	r2, r3
 80027b8:	4613      	mov	r3, r2
 80027ba:	005b      	lsls	r3, r3, #1
 80027bc:	4413      	add	r3, r2
 80027be:	2207      	movs	r2, #7
 80027c0:	fa02 f303 	lsl.w	r3, r2, r3
 80027c4:	43da      	mvns	r2, r3
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	400a      	ands	r2, r1
 80027cc:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	6919      	ldr	r1, [r3, #16]
 80027d4:	683b      	ldr	r3, [r7, #0]
 80027d6:	689a      	ldr	r2, [r3, #8]
 80027d8:	683b      	ldr	r3, [r7, #0]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	b29b      	uxth	r3, r3
 80027de:	4618      	mov	r0, r3
 80027e0:	4603      	mov	r3, r0
 80027e2:	005b      	lsls	r3, r3, #1
 80027e4:	4403      	add	r3, r0
 80027e6:	409a      	lsls	r2, r3
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	430a      	orrs	r2, r1
 80027ee:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 80027f0:	683b      	ldr	r3, [r7, #0]
 80027f2:	685b      	ldr	r3, [r3, #4]
 80027f4:	2b06      	cmp	r3, #6
 80027f6:	d824      	bhi.n	8002842 <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80027fe:	683b      	ldr	r3, [r7, #0]
 8002800:	685a      	ldr	r2, [r3, #4]
 8002802:	4613      	mov	r3, r2
 8002804:	009b      	lsls	r3, r3, #2
 8002806:	4413      	add	r3, r2
 8002808:	3b05      	subs	r3, #5
 800280a:	221f      	movs	r2, #31
 800280c:	fa02 f303 	lsl.w	r3, r2, r3
 8002810:	43da      	mvns	r2, r3
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	400a      	ands	r2, r1
 8002818:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002820:	683b      	ldr	r3, [r7, #0]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	b29b      	uxth	r3, r3
 8002826:	4618      	mov	r0, r3
 8002828:	683b      	ldr	r3, [r7, #0]
 800282a:	685a      	ldr	r2, [r3, #4]
 800282c:	4613      	mov	r3, r2
 800282e:	009b      	lsls	r3, r3, #2
 8002830:	4413      	add	r3, r2
 8002832:	3b05      	subs	r3, #5
 8002834:	fa00 f203 	lsl.w	r2, r0, r3
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	430a      	orrs	r2, r1
 800283e:	635a      	str	r2, [r3, #52]	; 0x34
 8002840:	e04c      	b.n	80028dc <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8002842:	683b      	ldr	r3, [r7, #0]
 8002844:	685b      	ldr	r3, [r3, #4]
 8002846:	2b0c      	cmp	r3, #12
 8002848:	d824      	bhi.n	8002894 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002850:	683b      	ldr	r3, [r7, #0]
 8002852:	685a      	ldr	r2, [r3, #4]
 8002854:	4613      	mov	r3, r2
 8002856:	009b      	lsls	r3, r3, #2
 8002858:	4413      	add	r3, r2
 800285a:	3b23      	subs	r3, #35	; 0x23
 800285c:	221f      	movs	r2, #31
 800285e:	fa02 f303 	lsl.w	r3, r2, r3
 8002862:	43da      	mvns	r2, r3
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	400a      	ands	r2, r1
 800286a:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002872:	683b      	ldr	r3, [r7, #0]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	b29b      	uxth	r3, r3
 8002878:	4618      	mov	r0, r3
 800287a:	683b      	ldr	r3, [r7, #0]
 800287c:	685a      	ldr	r2, [r3, #4]
 800287e:	4613      	mov	r3, r2
 8002880:	009b      	lsls	r3, r3, #2
 8002882:	4413      	add	r3, r2
 8002884:	3b23      	subs	r3, #35	; 0x23
 8002886:	fa00 f203 	lsl.w	r2, r0, r3
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	430a      	orrs	r2, r1
 8002890:	631a      	str	r2, [r3, #48]	; 0x30
 8002892:	e023      	b.n	80028dc <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800289a:	683b      	ldr	r3, [r7, #0]
 800289c:	685a      	ldr	r2, [r3, #4]
 800289e:	4613      	mov	r3, r2
 80028a0:	009b      	lsls	r3, r3, #2
 80028a2:	4413      	add	r3, r2
 80028a4:	3b41      	subs	r3, #65	; 0x41
 80028a6:	221f      	movs	r2, #31
 80028a8:	fa02 f303 	lsl.w	r3, r2, r3
 80028ac:	43da      	mvns	r2, r3
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	400a      	ands	r2, r1
 80028b4:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80028bc:	683b      	ldr	r3, [r7, #0]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	b29b      	uxth	r3, r3
 80028c2:	4618      	mov	r0, r3
 80028c4:	683b      	ldr	r3, [r7, #0]
 80028c6:	685a      	ldr	r2, [r3, #4]
 80028c8:	4613      	mov	r3, r2
 80028ca:	009b      	lsls	r3, r3, #2
 80028cc:	4413      	add	r3, r2
 80028ce:	3b41      	subs	r3, #65	; 0x41
 80028d0:	fa00 f203 	lsl.w	r2, r0, r3
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	430a      	orrs	r2, r1
 80028da:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	4a2a      	ldr	r2, [pc, #168]	; (800298c <HAL_ADC_ConfigChannel+0x284>)
 80028e2:	4293      	cmp	r3, r2
 80028e4:	d10a      	bne.n	80028fc <HAL_ADC_ConfigChannel+0x1f4>
 80028e6:	683b      	ldr	r3, [r7, #0]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80028ee:	d105      	bne.n	80028fc <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 80028f0:	4b27      	ldr	r3, [pc, #156]	; (8002990 <HAL_ADC_ConfigChannel+0x288>)
 80028f2:	685b      	ldr	r3, [r3, #4]
 80028f4:	4a26      	ldr	r2, [pc, #152]	; (8002990 <HAL_ADC_ConfigChannel+0x288>)
 80028f6:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 80028fa:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	4a22      	ldr	r2, [pc, #136]	; (800298c <HAL_ADC_ConfigChannel+0x284>)
 8002902:	4293      	cmp	r3, r2
 8002904:	d109      	bne.n	800291a <HAL_ADC_ConfigChannel+0x212>
 8002906:	683b      	ldr	r3, [r7, #0]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	2b12      	cmp	r3, #18
 800290c:	d105      	bne.n	800291a <HAL_ADC_ConfigChannel+0x212>
  {
    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 800290e:	4b20      	ldr	r3, [pc, #128]	; (8002990 <HAL_ADC_ConfigChannel+0x288>)
 8002910:	685b      	ldr	r3, [r3, #4]
 8002912:	4a1f      	ldr	r2, [pc, #124]	; (8002990 <HAL_ADC_ConfigChannel+0x288>)
 8002914:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002918:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	4a1b      	ldr	r2, [pc, #108]	; (800298c <HAL_ADC_ConfigChannel+0x284>)
 8002920:	4293      	cmp	r3, r2
 8002922:	d125      	bne.n	8002970 <HAL_ADC_ConfigChannel+0x268>
 8002924:	683b      	ldr	r3, [r7, #0]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	4a17      	ldr	r2, [pc, #92]	; (8002988 <HAL_ADC_ConfigChannel+0x280>)
 800292a:	4293      	cmp	r3, r2
 800292c:	d003      	beq.n	8002936 <HAL_ADC_ConfigChannel+0x22e>
 800292e:	683b      	ldr	r3, [r7, #0]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	2b11      	cmp	r3, #17
 8002934:	d11c      	bne.n	8002970 <HAL_ADC_ConfigChannel+0x268>
  {
    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8002936:	4b16      	ldr	r3, [pc, #88]	; (8002990 <HAL_ADC_ConfigChannel+0x288>)
 8002938:	685b      	ldr	r3, [r3, #4]
 800293a:	4a15      	ldr	r2, [pc, #84]	; (8002990 <HAL_ADC_ConfigChannel+0x288>)
 800293c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002940:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002942:	683b      	ldr	r3, [r7, #0]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	4a10      	ldr	r2, [pc, #64]	; (8002988 <HAL_ADC_ConfigChannel+0x280>)
 8002948:	4293      	cmp	r3, r2
 800294a:	d111      	bne.n	8002970 <HAL_ADC_ConfigChannel+0x268>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 800294c:	4b11      	ldr	r3, [pc, #68]	; (8002994 <HAL_ADC_ConfigChannel+0x28c>)
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	4a11      	ldr	r2, [pc, #68]	; (8002998 <HAL_ADC_ConfigChannel+0x290>)
 8002952:	fba2 2303 	umull	r2, r3, r2, r3
 8002956:	0c9a      	lsrs	r2, r3, #18
 8002958:	4613      	mov	r3, r2
 800295a:	009b      	lsls	r3, r3, #2
 800295c:	4413      	add	r3, r2
 800295e:	005b      	lsls	r3, r3, #1
 8002960:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8002962:	e002      	b.n	800296a <HAL_ADC_ConfigChannel+0x262>
      {
        counter--;
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	3b01      	subs	r3, #1
 8002968:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	2b00      	cmp	r3, #0
 800296e:	d1f9      	bne.n	8002964 <HAL_ADC_ConfigChannel+0x25c>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	2200      	movs	r2, #0
 8002974:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002978:	2300      	movs	r3, #0
}
 800297a:	4618      	mov	r0, r3
 800297c:	3714      	adds	r7, #20
 800297e:	46bd      	mov	sp, r7
 8002980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002984:	4770      	bx	lr
 8002986:	bf00      	nop
 8002988:	10000012 	.word	0x10000012
 800298c:	40012000 	.word	0x40012000
 8002990:	40012300 	.word	0x40012300
 8002994:	20000014 	.word	0x20000014
 8002998:	431bde83 	.word	0x431bde83

0800299c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 800299c:	b480      	push	{r7}
 800299e:	b083      	sub	sp, #12
 80029a0:	af00      	add	r7, sp, #0
 80029a2:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 80029a4:	4b78      	ldr	r3, [pc, #480]	; (8002b88 <ADC_Init+0x1ec>)
 80029a6:	685b      	ldr	r3, [r3, #4]
 80029a8:	4a77      	ldr	r2, [pc, #476]	; (8002b88 <ADC_Init+0x1ec>)
 80029aa:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 80029ae:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 80029b0:	4b75      	ldr	r3, [pc, #468]	; (8002b88 <ADC_Init+0x1ec>)
 80029b2:	685a      	ldr	r2, [r3, #4]
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	685b      	ldr	r3, [r3, #4]
 80029b8:	4973      	ldr	r1, [pc, #460]	; (8002b88 <ADC_Init+0x1ec>)
 80029ba:	4313      	orrs	r3, r2
 80029bc:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	685a      	ldr	r2, [r3, #4]
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80029cc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	6859      	ldr	r1, [r3, #4]
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	691b      	ldr	r3, [r3, #16]
 80029d8:	021a      	lsls	r2, r3, #8
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	430a      	orrs	r2, r1
 80029e0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	685a      	ldr	r2, [r3, #4]
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80029f0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	6859      	ldr	r1, [r3, #4]
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	689a      	ldr	r2, [r3, #8]
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	430a      	orrs	r2, r1
 8002a02:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	689a      	ldr	r2, [r3, #8]
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002a12:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	6899      	ldr	r1, [r3, #8]
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	68da      	ldr	r2, [r3, #12]
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	430a      	orrs	r2, r1
 8002a24:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a2a:	4a58      	ldr	r2, [pc, #352]	; (8002b8c <ADC_Init+0x1f0>)
 8002a2c:	4293      	cmp	r3, r2
 8002a2e:	d022      	beq.n	8002a76 <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	689a      	ldr	r2, [r3, #8]
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002a3e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	6899      	ldr	r1, [r3, #8]
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	430a      	orrs	r2, r1
 8002a50:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	689a      	ldr	r2, [r3, #8]
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002a60:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	6899      	ldr	r1, [r3, #8]
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	430a      	orrs	r2, r1
 8002a72:	609a      	str	r2, [r3, #8]
 8002a74:	e00f      	b.n	8002a96 <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	689a      	ldr	r2, [r3, #8]
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002a84:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	689a      	ldr	r2, [r3, #8]
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002a94:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	689a      	ldr	r2, [r3, #8]
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	f022 0202 	bic.w	r2, r2, #2
 8002aa4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	6899      	ldr	r1, [r3, #8]
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	699b      	ldr	r3, [r3, #24]
 8002ab0:	005a      	lsls	r2, r3, #1
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	430a      	orrs	r2, r1
 8002ab8:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d01b      	beq.n	8002afc <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	685a      	ldr	r2, [r3, #4]
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002ad2:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	685a      	ldr	r2, [r3, #4]
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002ae2:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	6859      	ldr	r1, [r3, #4]
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002aee:	3b01      	subs	r3, #1
 8002af0:	035a      	lsls	r2, r3, #13
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	430a      	orrs	r2, r1
 8002af8:	605a      	str	r2, [r3, #4]
 8002afa:	e007      	b.n	8002b0c <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	685a      	ldr	r2, [r3, #4]
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002b0a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002b1a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	69db      	ldr	r3, [r3, #28]
 8002b26:	3b01      	subs	r3, #1
 8002b28:	051a      	lsls	r2, r3, #20
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	430a      	orrs	r2, r1
 8002b30:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	689a      	ldr	r2, [r3, #8]
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002b40:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	6899      	ldr	r1, [r3, #8]
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002b4e:	025a      	lsls	r2, r3, #9
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	430a      	orrs	r2, r1
 8002b56:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	689a      	ldr	r2, [r3, #8]
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002b66:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	6899      	ldr	r1, [r3, #8]
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	695b      	ldr	r3, [r3, #20]
 8002b72:	029a      	lsls	r2, r3, #10
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	430a      	orrs	r2, r1
 8002b7a:	609a      	str	r2, [r3, #8]
}
 8002b7c:	bf00      	nop
 8002b7e:	370c      	adds	r7, #12
 8002b80:	46bd      	mov	sp, r7
 8002b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b86:	4770      	bx	lr
 8002b88:	40012300 	.word	0x40012300
 8002b8c:	0f000001 	.word	0x0f000001

08002b90 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8002b90:	b580      	push	{r7, lr}
 8002b92:	b084      	sub	sp, #16
 8002b94:	af00      	add	r7, sp, #0
 8002b96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d101      	bne.n	8002ba2 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8002b9e:	2301      	movs	r3, #1
 8002ba0:	e0ed      	b.n	8002d7e <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002ba8:	b2db      	uxtb	r3, r3
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d102      	bne.n	8002bb4 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8002bae:	6878      	ldr	r0, [r7, #4]
 8002bb0:	f7fe fbe2 	bl	8001378 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	681a      	ldr	r2, [r3, #0]
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	f022 0202 	bic.w	r2, r2, #2
 8002bc2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002bc4:	f7ff fd28 	bl	8002618 <HAL_GetTick>
 8002bc8:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002bca:	e012      	b.n	8002bf2 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002bcc:	f7ff fd24 	bl	8002618 <HAL_GetTick>
 8002bd0:	4602      	mov	r2, r0
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	1ad3      	subs	r3, r2, r3
 8002bd6:	2b0a      	cmp	r3, #10
 8002bd8:	d90b      	bls.n	8002bf2 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bde:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	2205      	movs	r2, #5
 8002bea:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002bee:	2301      	movs	r3, #1
 8002bf0:	e0c5      	b.n	8002d7e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	685b      	ldr	r3, [r3, #4]
 8002bf8:	f003 0302 	and.w	r3, r3, #2
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d1e5      	bne.n	8002bcc <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	681a      	ldr	r2, [r3, #0]
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	f042 0201 	orr.w	r2, r2, #1
 8002c0e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002c10:	f7ff fd02 	bl	8002618 <HAL_GetTick>
 8002c14:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002c16:	e012      	b.n	8002c3e <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002c18:	f7ff fcfe 	bl	8002618 <HAL_GetTick>
 8002c1c:	4602      	mov	r2, r0
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	1ad3      	subs	r3, r2, r3
 8002c22:	2b0a      	cmp	r3, #10
 8002c24:	d90b      	bls.n	8002c3e <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c2a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	2205      	movs	r2, #5
 8002c36:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002c3a:	2301      	movs	r3, #1
 8002c3c:	e09f      	b.n	8002d7e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	685b      	ldr	r3, [r3, #4]
 8002c44:	f003 0301 	and.w	r3, r3, #1
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d0e5      	beq.n	8002c18 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	7e1b      	ldrb	r3, [r3, #24]
 8002c50:	2b01      	cmp	r3, #1
 8002c52:	d108      	bne.n	8002c66 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	681a      	ldr	r2, [r3, #0]
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002c62:	601a      	str	r2, [r3, #0]
 8002c64:	e007      	b.n	8002c76 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	681a      	ldr	r2, [r3, #0]
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002c74:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	7e5b      	ldrb	r3, [r3, #25]
 8002c7a:	2b01      	cmp	r3, #1
 8002c7c:	d108      	bne.n	8002c90 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	681a      	ldr	r2, [r3, #0]
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002c8c:	601a      	str	r2, [r3, #0]
 8002c8e:	e007      	b.n	8002ca0 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	681a      	ldr	r2, [r3, #0]
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002c9e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	7e9b      	ldrb	r3, [r3, #26]
 8002ca4:	2b01      	cmp	r3, #1
 8002ca6:	d108      	bne.n	8002cba <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	681a      	ldr	r2, [r3, #0]
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	f042 0220 	orr.w	r2, r2, #32
 8002cb6:	601a      	str	r2, [r3, #0]
 8002cb8:	e007      	b.n	8002cca <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	681a      	ldr	r2, [r3, #0]
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	f022 0220 	bic.w	r2, r2, #32
 8002cc8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	7edb      	ldrb	r3, [r3, #27]
 8002cce:	2b01      	cmp	r3, #1
 8002cd0:	d108      	bne.n	8002ce4 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	681a      	ldr	r2, [r3, #0]
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	f022 0210 	bic.w	r2, r2, #16
 8002ce0:	601a      	str	r2, [r3, #0]
 8002ce2:	e007      	b.n	8002cf4 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	681a      	ldr	r2, [r3, #0]
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	f042 0210 	orr.w	r2, r2, #16
 8002cf2:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	7f1b      	ldrb	r3, [r3, #28]
 8002cf8:	2b01      	cmp	r3, #1
 8002cfa:	d108      	bne.n	8002d0e <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	681a      	ldr	r2, [r3, #0]
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	f042 0208 	orr.w	r2, r2, #8
 8002d0a:	601a      	str	r2, [r3, #0]
 8002d0c:	e007      	b.n	8002d1e <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	681a      	ldr	r2, [r3, #0]
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	f022 0208 	bic.w	r2, r2, #8
 8002d1c:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	7f5b      	ldrb	r3, [r3, #29]
 8002d22:	2b01      	cmp	r3, #1
 8002d24:	d108      	bne.n	8002d38 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	681a      	ldr	r2, [r3, #0]
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	f042 0204 	orr.w	r2, r2, #4
 8002d34:	601a      	str	r2, [r3, #0]
 8002d36:	e007      	b.n	8002d48 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	681a      	ldr	r2, [r3, #0]
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	f022 0204 	bic.w	r2, r2, #4
 8002d46:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	689a      	ldr	r2, [r3, #8]
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	68db      	ldr	r3, [r3, #12]
 8002d50:	431a      	orrs	r2, r3
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	691b      	ldr	r3, [r3, #16]
 8002d56:	431a      	orrs	r2, r3
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	695b      	ldr	r3, [r3, #20]
 8002d5c:	ea42 0103 	orr.w	r1, r2, r3
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	685b      	ldr	r3, [r3, #4]
 8002d64:	1e5a      	subs	r2, r3, #1
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	430a      	orrs	r2, r1
 8002d6c:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	2200      	movs	r2, #0
 8002d72:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	2201      	movs	r2, #1
 8002d78:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8002d7c:	2300      	movs	r3, #0
}
 8002d7e:	4618      	mov	r0, r3
 8002d80:	3710      	adds	r7, #16
 8002d82:	46bd      	mov	sp, r7
 8002d84:	bd80      	pop	{r7, pc}
	...

08002d88 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8002d88:	b480      	push	{r7}
 8002d8a:	b087      	sub	sp, #28
 8002d8c:	af00      	add	r7, sp, #0
 8002d8e:	6078      	str	r0, [r7, #4]
 8002d90:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002d9e:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8002da0:	7cfb      	ldrb	r3, [r7, #19]
 8002da2:	2b01      	cmp	r3, #1
 8002da4:	d003      	beq.n	8002dae <HAL_CAN_ConfigFilter+0x26>
 8002da6:	7cfb      	ldrb	r3, [r7, #19]
 8002da8:	2b02      	cmp	r3, #2
 8002daa:	f040 80be 	bne.w	8002f2a <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 8002dae:	4b65      	ldr	r3, [pc, #404]	; (8002f44 <HAL_CAN_ConfigFilter+0x1bc>)
 8002db0:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8002db2:	697b      	ldr	r3, [r7, #20]
 8002db4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002db8:	f043 0201 	orr.w	r2, r3, #1
 8002dbc:	697b      	ldr	r3, [r7, #20]
 8002dbe:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8002dc2:	697b      	ldr	r3, [r7, #20]
 8002dc4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002dc8:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8002dcc:	697b      	ldr	r3, [r7, #20]
 8002dce:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8002dd2:	697b      	ldr	r3, [r7, #20]
 8002dd4:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8002dd8:	683b      	ldr	r3, [r7, #0]
 8002dda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ddc:	021b      	lsls	r3, r3, #8
 8002dde:	431a      	orrs	r2, r3
 8002de0:	697b      	ldr	r3, [r7, #20]
 8002de2:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8002de6:	683b      	ldr	r3, [r7, #0]
 8002de8:	695b      	ldr	r3, [r3, #20]
 8002dea:	f003 031f 	and.w	r3, r3, #31
 8002dee:	2201      	movs	r2, #1
 8002df0:	fa02 f303 	lsl.w	r3, r2, r3
 8002df4:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8002df6:	697b      	ldr	r3, [r7, #20]
 8002df8:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	43db      	mvns	r3, r3
 8002e00:	401a      	ands	r2, r3
 8002e02:	697b      	ldr	r3, [r7, #20]
 8002e04:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8002e08:	683b      	ldr	r3, [r7, #0]
 8002e0a:	69db      	ldr	r3, [r3, #28]
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d123      	bne.n	8002e58 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8002e10:	697b      	ldr	r3, [r7, #20]
 8002e12:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	43db      	mvns	r3, r3
 8002e1a:	401a      	ands	r2, r3
 8002e1c:	697b      	ldr	r3, [r7, #20]
 8002e1e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8002e22:	683b      	ldr	r3, [r7, #0]
 8002e24:	68db      	ldr	r3, [r3, #12]
 8002e26:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8002e28:	683b      	ldr	r3, [r7, #0]
 8002e2a:	685b      	ldr	r3, [r3, #4]
 8002e2c:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002e2e:	683a      	ldr	r2, [r7, #0]
 8002e30:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8002e32:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002e34:	697b      	ldr	r3, [r7, #20]
 8002e36:	3248      	adds	r2, #72	; 0x48
 8002e38:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002e3c:	683b      	ldr	r3, [r7, #0]
 8002e3e:	689b      	ldr	r3, [r3, #8]
 8002e40:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8002e42:	683b      	ldr	r3, [r7, #0]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002e48:	683b      	ldr	r3, [r7, #0]
 8002e4a:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002e4c:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002e4e:	6979      	ldr	r1, [r7, #20]
 8002e50:	3348      	adds	r3, #72	; 0x48
 8002e52:	00db      	lsls	r3, r3, #3
 8002e54:	440b      	add	r3, r1
 8002e56:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8002e58:	683b      	ldr	r3, [r7, #0]
 8002e5a:	69db      	ldr	r3, [r3, #28]
 8002e5c:	2b01      	cmp	r3, #1
 8002e5e:	d122      	bne.n	8002ea6 <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8002e60:	697b      	ldr	r3, [r7, #20]
 8002e62:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	431a      	orrs	r2, r3
 8002e6a:	697b      	ldr	r3, [r7, #20]
 8002e6c:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8002e70:	683b      	ldr	r3, [r7, #0]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8002e76:	683b      	ldr	r3, [r7, #0]
 8002e78:	685b      	ldr	r3, [r3, #4]
 8002e7a:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002e7c:	683a      	ldr	r2, [r7, #0]
 8002e7e:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8002e80:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002e82:	697b      	ldr	r3, [r7, #20]
 8002e84:	3248      	adds	r2, #72	; 0x48
 8002e86:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002e8a:	683b      	ldr	r3, [r7, #0]
 8002e8c:	689b      	ldr	r3, [r3, #8]
 8002e8e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8002e90:	683b      	ldr	r3, [r7, #0]
 8002e92:	68db      	ldr	r3, [r3, #12]
 8002e94:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002e96:	683b      	ldr	r3, [r7, #0]
 8002e98:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002e9a:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002e9c:	6979      	ldr	r1, [r7, #20]
 8002e9e:	3348      	adds	r3, #72	; 0x48
 8002ea0:	00db      	lsls	r3, r3, #3
 8002ea2:	440b      	add	r3, r1
 8002ea4:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8002ea6:	683b      	ldr	r3, [r7, #0]
 8002ea8:	699b      	ldr	r3, [r3, #24]
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d109      	bne.n	8002ec2 <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8002eae:	697b      	ldr	r3, [r7, #20]
 8002eb0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	43db      	mvns	r3, r3
 8002eb8:	401a      	ands	r2, r3
 8002eba:	697b      	ldr	r3, [r7, #20]
 8002ebc:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8002ec0:	e007      	b.n	8002ed2 <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8002ec2:	697b      	ldr	r3, [r7, #20]
 8002ec4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	431a      	orrs	r2, r3
 8002ecc:	697b      	ldr	r3, [r7, #20]
 8002ece:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8002ed2:	683b      	ldr	r3, [r7, #0]
 8002ed4:	691b      	ldr	r3, [r3, #16]
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d109      	bne.n	8002eee <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8002eda:	697b      	ldr	r3, [r7, #20]
 8002edc:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	43db      	mvns	r3, r3
 8002ee4:	401a      	ands	r2, r3
 8002ee6:	697b      	ldr	r3, [r7, #20]
 8002ee8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8002eec:	e007      	b.n	8002efe <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8002eee:	697b      	ldr	r3, [r7, #20]
 8002ef0:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	431a      	orrs	r2, r3
 8002ef8:	697b      	ldr	r3, [r7, #20]
 8002efa:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8002efe:	683b      	ldr	r3, [r7, #0]
 8002f00:	6a1b      	ldr	r3, [r3, #32]
 8002f02:	2b01      	cmp	r3, #1
 8002f04:	d107      	bne.n	8002f16 <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8002f06:	697b      	ldr	r3, [r7, #20]
 8002f08:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	431a      	orrs	r2, r3
 8002f10:	697b      	ldr	r3, [r7, #20]
 8002f12:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8002f16:	697b      	ldr	r3, [r7, #20]
 8002f18:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002f1c:	f023 0201 	bic.w	r2, r3, #1
 8002f20:	697b      	ldr	r3, [r7, #20]
 8002f22:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8002f26:	2300      	movs	r3, #0
 8002f28:	e006      	b.n	8002f38 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f2e:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002f36:	2301      	movs	r3, #1
  }
}
 8002f38:	4618      	mov	r0, r3
 8002f3a:	371c      	adds	r7, #28
 8002f3c:	46bd      	mov	sp, r7
 8002f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f42:	4770      	bx	lr
 8002f44:	40006400 	.word	0x40006400

08002f48 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8002f48:	b580      	push	{r7, lr}
 8002f4a:	b084      	sub	sp, #16
 8002f4c:	af00      	add	r7, sp, #0
 8002f4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002f56:	b2db      	uxtb	r3, r3
 8002f58:	2b01      	cmp	r3, #1
 8002f5a:	d12e      	bne.n	8002fba <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	2202      	movs	r2, #2
 8002f60:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	681a      	ldr	r2, [r3, #0]
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	f022 0201 	bic.w	r2, r2, #1
 8002f72:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002f74:	f7ff fb50 	bl	8002618 <HAL_GetTick>
 8002f78:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002f7a:	e012      	b.n	8002fa2 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002f7c:	f7ff fb4c 	bl	8002618 <HAL_GetTick>
 8002f80:	4602      	mov	r2, r0
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	1ad3      	subs	r3, r2, r3
 8002f86:	2b0a      	cmp	r3, #10
 8002f88:	d90b      	bls.n	8002fa2 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f8e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	2205      	movs	r2, #5
 8002f9a:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8002f9e:	2301      	movs	r3, #1
 8002fa0:	e012      	b.n	8002fc8 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	685b      	ldr	r3, [r3, #4]
 8002fa8:	f003 0301 	and.w	r3, r3, #1
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d1e5      	bne.n	8002f7c <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	2200      	movs	r2, #0
 8002fb4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8002fb6:	2300      	movs	r3, #0
 8002fb8:	e006      	b.n	8002fc8 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fbe:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002fc6:	2301      	movs	r3, #1
  }
}
 8002fc8:	4618      	mov	r0, r3
 8002fca:	3710      	adds	r7, #16
 8002fcc:	46bd      	mov	sp, r7
 8002fce:	bd80      	pop	{r7, pc}

08002fd0 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8002fd0:	b480      	push	{r7}
 8002fd2:	b089      	sub	sp, #36	; 0x24
 8002fd4:	af00      	add	r7, sp, #0
 8002fd6:	60f8      	str	r0, [r7, #12]
 8002fd8:	60b9      	str	r1, [r7, #8]
 8002fda:	607a      	str	r2, [r7, #4]
 8002fdc:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002fe4:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	689b      	ldr	r3, [r3, #8]
 8002fec:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8002fee:	7ffb      	ldrb	r3, [r7, #31]
 8002ff0:	2b01      	cmp	r3, #1
 8002ff2:	d003      	beq.n	8002ffc <HAL_CAN_AddTxMessage+0x2c>
 8002ff4:	7ffb      	ldrb	r3, [r7, #31]
 8002ff6:	2b02      	cmp	r3, #2
 8002ff8:	f040 80b8 	bne.w	800316c <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8002ffc:	69bb      	ldr	r3, [r7, #24]
 8002ffe:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003002:	2b00      	cmp	r3, #0
 8003004:	d10a      	bne.n	800301c <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8003006:	69bb      	ldr	r3, [r7, #24]
 8003008:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800300c:	2b00      	cmp	r3, #0
 800300e:	d105      	bne.n	800301c <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8003010:	69bb      	ldr	r3, [r7, #24]
 8003012:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8003016:	2b00      	cmp	r3, #0
 8003018:	f000 80a0 	beq.w	800315c <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 800301c:	69bb      	ldr	r3, [r7, #24]
 800301e:	0e1b      	lsrs	r3, r3, #24
 8003020:	f003 0303 	and.w	r3, r3, #3
 8003024:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8003026:	697b      	ldr	r3, [r7, #20]
 8003028:	2b02      	cmp	r3, #2
 800302a:	d907      	bls.n	800303c <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003030:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8003038:	2301      	movs	r3, #1
 800303a:	e09e      	b.n	800317a <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 800303c:	2201      	movs	r2, #1
 800303e:	697b      	ldr	r3, [r7, #20]
 8003040:	409a      	lsls	r2, r3
 8003042:	683b      	ldr	r3, [r7, #0]
 8003044:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8003046:	68bb      	ldr	r3, [r7, #8]
 8003048:	689b      	ldr	r3, [r3, #8]
 800304a:	2b00      	cmp	r3, #0
 800304c:	d10d      	bne.n	800306a <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800304e:	68bb      	ldr	r3, [r7, #8]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8003054:	68bb      	ldr	r3, [r7, #8]
 8003056:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8003058:	68f9      	ldr	r1, [r7, #12]
 800305a:	6809      	ldr	r1, [r1, #0]
 800305c:	431a      	orrs	r2, r3
 800305e:	697b      	ldr	r3, [r7, #20]
 8003060:	3318      	adds	r3, #24
 8003062:	011b      	lsls	r3, r3, #4
 8003064:	440b      	add	r3, r1
 8003066:	601a      	str	r2, [r3, #0]
 8003068:	e00f      	b.n	800308a <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800306a:	68bb      	ldr	r3, [r7, #8]
 800306c:	685b      	ldr	r3, [r3, #4]
 800306e:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8003070:	68bb      	ldr	r3, [r7, #8]
 8003072:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003074:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8003076:	68bb      	ldr	r3, [r7, #8]
 8003078:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800307a:	68f9      	ldr	r1, [r7, #12]
 800307c:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 800307e:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003080:	697b      	ldr	r3, [r7, #20]
 8003082:	3318      	adds	r3, #24
 8003084:	011b      	lsls	r3, r3, #4
 8003086:	440b      	add	r3, r1
 8003088:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	6819      	ldr	r1, [r3, #0]
 800308e:	68bb      	ldr	r3, [r7, #8]
 8003090:	691a      	ldr	r2, [r3, #16]
 8003092:	697b      	ldr	r3, [r7, #20]
 8003094:	3318      	adds	r3, #24
 8003096:	011b      	lsls	r3, r3, #4
 8003098:	440b      	add	r3, r1
 800309a:	3304      	adds	r3, #4
 800309c:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 800309e:	68bb      	ldr	r3, [r7, #8]
 80030a0:	7d1b      	ldrb	r3, [r3, #20]
 80030a2:	2b01      	cmp	r3, #1
 80030a4:	d111      	bne.n	80030ca <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	681a      	ldr	r2, [r3, #0]
 80030aa:	697b      	ldr	r3, [r7, #20]
 80030ac:	3318      	adds	r3, #24
 80030ae:	011b      	lsls	r3, r3, #4
 80030b0:	4413      	add	r3, r2
 80030b2:	3304      	adds	r3, #4
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	68fa      	ldr	r2, [r7, #12]
 80030b8:	6811      	ldr	r1, [r2, #0]
 80030ba:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80030be:	697b      	ldr	r3, [r7, #20]
 80030c0:	3318      	adds	r3, #24
 80030c2:	011b      	lsls	r3, r3, #4
 80030c4:	440b      	add	r3, r1
 80030c6:	3304      	adds	r3, #4
 80030c8:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	3307      	adds	r3, #7
 80030ce:	781b      	ldrb	r3, [r3, #0]
 80030d0:	061a      	lsls	r2, r3, #24
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	3306      	adds	r3, #6
 80030d6:	781b      	ldrb	r3, [r3, #0]
 80030d8:	041b      	lsls	r3, r3, #16
 80030da:	431a      	orrs	r2, r3
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	3305      	adds	r3, #5
 80030e0:	781b      	ldrb	r3, [r3, #0]
 80030e2:	021b      	lsls	r3, r3, #8
 80030e4:	4313      	orrs	r3, r2
 80030e6:	687a      	ldr	r2, [r7, #4]
 80030e8:	3204      	adds	r2, #4
 80030ea:	7812      	ldrb	r2, [r2, #0]
 80030ec:	4610      	mov	r0, r2
 80030ee:	68fa      	ldr	r2, [r7, #12]
 80030f0:	6811      	ldr	r1, [r2, #0]
 80030f2:	ea43 0200 	orr.w	r2, r3, r0
 80030f6:	697b      	ldr	r3, [r7, #20]
 80030f8:	011b      	lsls	r3, r3, #4
 80030fa:	440b      	add	r3, r1
 80030fc:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8003100:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	3303      	adds	r3, #3
 8003106:	781b      	ldrb	r3, [r3, #0]
 8003108:	061a      	lsls	r2, r3, #24
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	3302      	adds	r3, #2
 800310e:	781b      	ldrb	r3, [r3, #0]
 8003110:	041b      	lsls	r3, r3, #16
 8003112:	431a      	orrs	r2, r3
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	3301      	adds	r3, #1
 8003118:	781b      	ldrb	r3, [r3, #0]
 800311a:	021b      	lsls	r3, r3, #8
 800311c:	4313      	orrs	r3, r2
 800311e:	687a      	ldr	r2, [r7, #4]
 8003120:	7812      	ldrb	r2, [r2, #0]
 8003122:	4610      	mov	r0, r2
 8003124:	68fa      	ldr	r2, [r7, #12]
 8003126:	6811      	ldr	r1, [r2, #0]
 8003128:	ea43 0200 	orr.w	r2, r3, r0
 800312c:	697b      	ldr	r3, [r7, #20]
 800312e:	011b      	lsls	r3, r3, #4
 8003130:	440b      	add	r3, r1
 8003132:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8003136:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	681a      	ldr	r2, [r3, #0]
 800313c:	697b      	ldr	r3, [r7, #20]
 800313e:	3318      	adds	r3, #24
 8003140:	011b      	lsls	r3, r3, #4
 8003142:	4413      	add	r3, r2
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	68fa      	ldr	r2, [r7, #12]
 8003148:	6811      	ldr	r1, [r2, #0]
 800314a:	f043 0201 	orr.w	r2, r3, #1
 800314e:	697b      	ldr	r3, [r7, #20]
 8003150:	3318      	adds	r3, #24
 8003152:	011b      	lsls	r3, r3, #4
 8003154:	440b      	add	r3, r1
 8003156:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8003158:	2300      	movs	r3, #0
 800315a:	e00e      	b.n	800317a <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003160:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8003168:	2301      	movs	r3, #1
 800316a:	e006      	b.n	800317a <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003170:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003178:	2301      	movs	r3, #1
  }
}
 800317a:	4618      	mov	r0, r3
 800317c:	3724      	adds	r7, #36	; 0x24
 800317e:	46bd      	mov	sp, r7
 8003180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003184:	4770      	bx	lr

08003186 <HAL_CAN_GetTxMailboxesFreeLevel>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval Number of free Tx Mailboxes.
  */
uint32_t HAL_CAN_GetTxMailboxesFreeLevel(CAN_HandleTypeDef *hcan)
{
 8003186:	b480      	push	{r7}
 8003188:	b085      	sub	sp, #20
 800318a:	af00      	add	r7, sp, #0
 800318c:	6078      	str	r0, [r7, #4]
  uint32_t freelevel = 0U;
 800318e:	2300      	movs	r3, #0
 8003190:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003198:	72fb      	strb	r3, [r7, #11]

  if ((state == HAL_CAN_STATE_READY) ||
 800319a:	7afb      	ldrb	r3, [r7, #11]
 800319c:	2b01      	cmp	r3, #1
 800319e:	d002      	beq.n	80031a6 <HAL_CAN_GetTxMailboxesFreeLevel+0x20>
 80031a0:	7afb      	ldrb	r3, [r7, #11]
 80031a2:	2b02      	cmp	r3, #2
 80031a4:	d11d      	bne.n	80031e2 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	689b      	ldr	r3, [r3, #8]
 80031ac:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d002      	beq.n	80031ba <HAL_CAN_GetTxMailboxesFreeLevel+0x34>
    {
      freelevel++;
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	3301      	adds	r3, #1
 80031b8:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 1 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	689b      	ldr	r3, [r3, #8]
 80031c0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d002      	beq.n	80031ce <HAL_CAN_GetTxMailboxesFreeLevel+0x48>
    {
      freelevel++;
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	3301      	adds	r3, #1
 80031cc:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 2 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	689b      	ldr	r3, [r3, #8]
 80031d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d002      	beq.n	80031e2 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
    {
      freelevel++;
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	3301      	adds	r3, #1
 80031e0:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Tx Mailboxes free level */
  return freelevel;
 80031e2:	68fb      	ldr	r3, [r7, #12]
}
 80031e4:	4618      	mov	r0, r3
 80031e6:	3714      	adds	r7, #20
 80031e8:	46bd      	mov	sp, r7
 80031ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ee:	4770      	bx	lr

080031f0 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 80031f0:	b480      	push	{r7}
 80031f2:	b087      	sub	sp, #28
 80031f4:	af00      	add	r7, sp, #0
 80031f6:	60f8      	str	r0, [r7, #12]
 80031f8:	60b9      	str	r1, [r7, #8]
 80031fa:	607a      	str	r2, [r7, #4]
 80031fc:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003204:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8003206:	7dfb      	ldrb	r3, [r7, #23]
 8003208:	2b01      	cmp	r3, #1
 800320a:	d003      	beq.n	8003214 <HAL_CAN_GetRxMessage+0x24>
 800320c:	7dfb      	ldrb	r3, [r7, #23]
 800320e:	2b02      	cmp	r3, #2
 8003210:	f040 80f3 	bne.w	80033fa <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8003214:	68bb      	ldr	r3, [r7, #8]
 8003216:	2b00      	cmp	r3, #0
 8003218:	d10e      	bne.n	8003238 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	68db      	ldr	r3, [r3, #12]
 8003220:	f003 0303 	and.w	r3, r3, #3
 8003224:	2b00      	cmp	r3, #0
 8003226:	d116      	bne.n	8003256 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800322c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8003234:	2301      	movs	r3, #1
 8003236:	e0e7      	b.n	8003408 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	691b      	ldr	r3, [r3, #16]
 800323e:	f003 0303 	and.w	r3, r3, #3
 8003242:	2b00      	cmp	r3, #0
 8003244:	d107      	bne.n	8003256 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800324a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8003252:	2301      	movs	r3, #1
 8003254:	e0d8      	b.n	8003408 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	681a      	ldr	r2, [r3, #0]
 800325a:	68bb      	ldr	r3, [r7, #8]
 800325c:	331b      	adds	r3, #27
 800325e:	011b      	lsls	r3, r3, #4
 8003260:	4413      	add	r3, r2
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	f003 0204 	and.w	r2, r3, #4
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	689b      	ldr	r3, [r3, #8]
 8003270:	2b00      	cmp	r3, #0
 8003272:	d10c      	bne.n	800328e <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	681a      	ldr	r2, [r3, #0]
 8003278:	68bb      	ldr	r3, [r7, #8]
 800327a:	331b      	adds	r3, #27
 800327c:	011b      	lsls	r3, r3, #4
 800327e:	4413      	add	r3, r2
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	0d5b      	lsrs	r3, r3, #21
 8003284:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	601a      	str	r2, [r3, #0]
 800328c:	e00b      	b.n	80032a6 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	681a      	ldr	r2, [r3, #0]
 8003292:	68bb      	ldr	r3, [r7, #8]
 8003294:	331b      	adds	r3, #27
 8003296:	011b      	lsls	r3, r3, #4
 8003298:	4413      	add	r3, r2
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	08db      	lsrs	r3, r3, #3
 800329e:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	681a      	ldr	r2, [r3, #0]
 80032aa:	68bb      	ldr	r3, [r7, #8]
 80032ac:	331b      	adds	r3, #27
 80032ae:	011b      	lsls	r3, r3, #4
 80032b0:	4413      	add	r3, r2
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	f003 0202 	and.w	r2, r3, #2
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	681a      	ldr	r2, [r3, #0]
 80032c0:	68bb      	ldr	r3, [r7, #8]
 80032c2:	331b      	adds	r3, #27
 80032c4:	011b      	lsls	r3, r3, #4
 80032c6:	4413      	add	r3, r2
 80032c8:	3304      	adds	r3, #4
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	f003 020f 	and.w	r2, r3, #15
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	681a      	ldr	r2, [r3, #0]
 80032d8:	68bb      	ldr	r3, [r7, #8]
 80032da:	331b      	adds	r3, #27
 80032dc:	011b      	lsls	r3, r3, #4
 80032de:	4413      	add	r3, r2
 80032e0:	3304      	adds	r3, #4
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	0a1b      	lsrs	r3, r3, #8
 80032e6:	b2da      	uxtb	r2, r3
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	681a      	ldr	r2, [r3, #0]
 80032f0:	68bb      	ldr	r3, [r7, #8]
 80032f2:	331b      	adds	r3, #27
 80032f4:	011b      	lsls	r3, r3, #4
 80032f6:	4413      	add	r3, r2
 80032f8:	3304      	adds	r3, #4
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	0c1b      	lsrs	r3, r3, #16
 80032fe:	b29a      	uxth	r2, r3
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	681a      	ldr	r2, [r3, #0]
 8003308:	68bb      	ldr	r3, [r7, #8]
 800330a:	011b      	lsls	r3, r3, #4
 800330c:	4413      	add	r3, r2
 800330e:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	b2da      	uxtb	r2, r3
 8003316:	683b      	ldr	r3, [r7, #0]
 8003318:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	681a      	ldr	r2, [r3, #0]
 800331e:	68bb      	ldr	r3, [r7, #8]
 8003320:	011b      	lsls	r3, r3, #4
 8003322:	4413      	add	r3, r2
 8003324:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	0a1a      	lsrs	r2, r3, #8
 800332c:	683b      	ldr	r3, [r7, #0]
 800332e:	3301      	adds	r3, #1
 8003330:	b2d2      	uxtb	r2, r2
 8003332:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	681a      	ldr	r2, [r3, #0]
 8003338:	68bb      	ldr	r3, [r7, #8]
 800333a:	011b      	lsls	r3, r3, #4
 800333c:	4413      	add	r3, r2
 800333e:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	0c1a      	lsrs	r2, r3, #16
 8003346:	683b      	ldr	r3, [r7, #0]
 8003348:	3302      	adds	r3, #2
 800334a:	b2d2      	uxtb	r2, r2
 800334c:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	681a      	ldr	r2, [r3, #0]
 8003352:	68bb      	ldr	r3, [r7, #8]
 8003354:	011b      	lsls	r3, r3, #4
 8003356:	4413      	add	r3, r2
 8003358:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	0e1a      	lsrs	r2, r3, #24
 8003360:	683b      	ldr	r3, [r7, #0]
 8003362:	3303      	adds	r3, #3
 8003364:	b2d2      	uxtb	r2, r2
 8003366:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	681a      	ldr	r2, [r3, #0]
 800336c:	68bb      	ldr	r3, [r7, #8]
 800336e:	011b      	lsls	r3, r3, #4
 8003370:	4413      	add	r3, r2
 8003372:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003376:	681a      	ldr	r2, [r3, #0]
 8003378:	683b      	ldr	r3, [r7, #0]
 800337a:	3304      	adds	r3, #4
 800337c:	b2d2      	uxtb	r2, r2
 800337e:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	681a      	ldr	r2, [r3, #0]
 8003384:	68bb      	ldr	r3, [r7, #8]
 8003386:	011b      	lsls	r3, r3, #4
 8003388:	4413      	add	r3, r2
 800338a:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	0a1a      	lsrs	r2, r3, #8
 8003392:	683b      	ldr	r3, [r7, #0]
 8003394:	3305      	adds	r3, #5
 8003396:	b2d2      	uxtb	r2, r2
 8003398:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	681a      	ldr	r2, [r3, #0]
 800339e:	68bb      	ldr	r3, [r7, #8]
 80033a0:	011b      	lsls	r3, r3, #4
 80033a2:	4413      	add	r3, r2
 80033a4:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	0c1a      	lsrs	r2, r3, #16
 80033ac:	683b      	ldr	r3, [r7, #0]
 80033ae:	3306      	adds	r3, #6
 80033b0:	b2d2      	uxtb	r2, r2
 80033b2:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	681a      	ldr	r2, [r3, #0]
 80033b8:	68bb      	ldr	r3, [r7, #8]
 80033ba:	011b      	lsls	r3, r3, #4
 80033bc:	4413      	add	r3, r2
 80033be:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	0e1a      	lsrs	r2, r3, #24
 80033c6:	683b      	ldr	r3, [r7, #0]
 80033c8:	3307      	adds	r3, #7
 80033ca:	b2d2      	uxtb	r2, r2
 80033cc:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80033ce:	68bb      	ldr	r3, [r7, #8]
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d108      	bne.n	80033e6 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	68da      	ldr	r2, [r3, #12]
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	f042 0220 	orr.w	r2, r2, #32
 80033e2:	60da      	str	r2, [r3, #12]
 80033e4:	e007      	b.n	80033f6 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	691a      	ldr	r2, [r3, #16]
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	f042 0220 	orr.w	r2, r2, #32
 80033f4:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 80033f6:	2300      	movs	r3, #0
 80033f8:	e006      	b.n	8003408 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033fe:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003406:	2301      	movs	r3, #1
  }
}
 8003408:	4618      	mov	r0, r3
 800340a:	371c      	adds	r7, #28
 800340c:	46bd      	mov	sp, r7
 800340e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003412:	4770      	bx	lr

08003414 <HAL_CAN_GetRxFifoFillLevel>:
  * @param  RxFifo Rx FIFO.
  *         This parameter can be a value of @arg CAN_receive_FIFO_number.
  * @retval Number of messages available in Rx FIFO.
  */
uint32_t HAL_CAN_GetRxFifoFillLevel(CAN_HandleTypeDef *hcan, uint32_t RxFifo)
{
 8003414:	b480      	push	{r7}
 8003416:	b085      	sub	sp, #20
 8003418:	af00      	add	r7, sp, #0
 800341a:	6078      	str	r0, [r7, #4]
 800341c:	6039      	str	r1, [r7, #0]
  uint32_t filllevel = 0U;
 800341e:	2300      	movs	r3, #0
 8003420:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003428:	72fb      	strb	r3, [r7, #11]

  /* Check function parameters */
  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 800342a:	7afb      	ldrb	r3, [r7, #11]
 800342c:	2b01      	cmp	r3, #1
 800342e:	d002      	beq.n	8003436 <HAL_CAN_GetRxFifoFillLevel+0x22>
 8003430:	7afb      	ldrb	r3, [r7, #11]
 8003432:	2b02      	cmp	r3, #2
 8003434:	d10f      	bne.n	8003456 <HAL_CAN_GetRxFifoFillLevel+0x42>
      (state == HAL_CAN_STATE_LISTENING))
  {
    if (RxFifo == CAN_RX_FIFO0)
 8003436:	683b      	ldr	r3, [r7, #0]
 8003438:	2b00      	cmp	r3, #0
 800343a:	d106      	bne.n	800344a <HAL_CAN_GetRxFifoFillLevel+0x36>
    {
      filllevel = hcan->Instance->RF0R & CAN_RF0R_FMP0;
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	68db      	ldr	r3, [r3, #12]
 8003442:	f003 0303 	and.w	r3, r3, #3
 8003446:	60fb      	str	r3, [r7, #12]
 8003448:	e005      	b.n	8003456 <HAL_CAN_GetRxFifoFillLevel+0x42>
    }
    else /* RxFifo == CAN_RX_FIFO1 */
    {
      filllevel = hcan->Instance->RF1R & CAN_RF1R_FMP1;
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	691b      	ldr	r3, [r3, #16]
 8003450:	f003 0303 	and.w	r3, r3, #3
 8003454:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Rx FIFO fill level */
  return filllevel;
 8003456:	68fb      	ldr	r3, [r7, #12]
}
 8003458:	4618      	mov	r0, r3
 800345a:	3714      	adds	r7, #20
 800345c:	46bd      	mov	sp, r7
 800345e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003462:	4770      	bx	lr

08003464 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8003464:	b480      	push	{r7}
 8003466:	b085      	sub	sp, #20
 8003468:	af00      	add	r7, sp, #0
 800346a:	6078      	str	r0, [r7, #4]
 800346c:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003474:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8003476:	7bfb      	ldrb	r3, [r7, #15]
 8003478:	2b01      	cmp	r3, #1
 800347a:	d002      	beq.n	8003482 <HAL_CAN_ActivateNotification+0x1e>
 800347c:	7bfb      	ldrb	r3, [r7, #15]
 800347e:	2b02      	cmp	r3, #2
 8003480:	d109      	bne.n	8003496 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	6959      	ldr	r1, [r3, #20]
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	683a      	ldr	r2, [r7, #0]
 800348e:	430a      	orrs	r2, r1
 8003490:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8003492:	2300      	movs	r3, #0
 8003494:	e006      	b.n	80034a4 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800349a:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80034a2:	2301      	movs	r3, #1
  }
}
 80034a4:	4618      	mov	r0, r3
 80034a6:	3714      	adds	r7, #20
 80034a8:	46bd      	mov	sp, r7
 80034aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ae:	4770      	bx	lr

080034b0 <HAL_CAN_DeactivateNotification>:
  * @param  InactiveITs indicates which interrupts will be disabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_DeactivateNotification(CAN_HandleTypeDef *hcan, uint32_t InactiveITs)
{
 80034b0:	b480      	push	{r7}
 80034b2:	b085      	sub	sp, #20
 80034b4:	af00      	add	r7, sp, #0
 80034b6:	6078      	str	r0, [r7, #4]
 80034b8:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80034c0:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(InactiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 80034c2:	7bfb      	ldrb	r3, [r7, #15]
 80034c4:	2b01      	cmp	r3, #1
 80034c6:	d002      	beq.n	80034ce <HAL_CAN_DeactivateNotification+0x1e>
 80034c8:	7bfb      	ldrb	r3, [r7, #15]
 80034ca:	2b02      	cmp	r3, #2
 80034cc:	d10a      	bne.n	80034e4 <HAL_CAN_DeactivateNotification+0x34>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Disable the selected interrupts */
    __HAL_CAN_DISABLE_IT(hcan, InactiveITs);
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	6959      	ldr	r1, [r3, #20]
 80034d4:	683b      	ldr	r3, [r7, #0]
 80034d6:	43da      	mvns	r2, r3
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	400a      	ands	r2, r1
 80034de:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 80034e0:	2300      	movs	r3, #0
 80034e2:	e006      	b.n	80034f2 <HAL_CAN_DeactivateNotification+0x42>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034e8:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80034f0:	2301      	movs	r3, #1
  }
}
 80034f2:	4618      	mov	r0, r3
 80034f4:	3714      	adds	r7, #20
 80034f6:	46bd      	mov	sp, r7
 80034f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034fc:	4770      	bx	lr

080034fe <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 80034fe:	b580      	push	{r7, lr}
 8003500:	b08a      	sub	sp, #40	; 0x28
 8003502:	af00      	add	r7, sp, #0
 8003504:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8003506:	2300      	movs	r3, #0
 8003508:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	695b      	ldr	r3, [r3, #20]
 8003510:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	685b      	ldr	r3, [r3, #4]
 8003518:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	689b      	ldr	r3, [r3, #8]
 8003520:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	68db      	ldr	r3, [r3, #12]
 8003528:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	691b      	ldr	r3, [r3, #16]
 8003530:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	699b      	ldr	r3, [r3, #24]
 8003538:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 800353a:	6a3b      	ldr	r3, [r7, #32]
 800353c:	f003 0301 	and.w	r3, r3, #1
 8003540:	2b00      	cmp	r3, #0
 8003542:	d07c      	beq.n	800363e <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8003544:	69bb      	ldr	r3, [r7, #24]
 8003546:	f003 0301 	and.w	r3, r3, #1
 800354a:	2b00      	cmp	r3, #0
 800354c:	d023      	beq.n	8003596 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	2201      	movs	r2, #1
 8003554:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8003556:	69bb      	ldr	r3, [r7, #24]
 8003558:	f003 0302 	and.w	r3, r3, #2
 800355c:	2b00      	cmp	r3, #0
 800355e:	d003      	beq.n	8003568 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8003560:	6878      	ldr	r0, [r7, #4]
 8003562:	f7fe feff 	bl	8002364 <HAL_CAN_TxMailbox0CompleteCallback>
 8003566:	e016      	b.n	8003596 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8003568:	69bb      	ldr	r3, [r7, #24]
 800356a:	f003 0304 	and.w	r3, r3, #4
 800356e:	2b00      	cmp	r3, #0
 8003570:	d004      	beq.n	800357c <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8003572:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003574:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003578:	627b      	str	r3, [r7, #36]	; 0x24
 800357a:	e00c      	b.n	8003596 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 800357c:	69bb      	ldr	r3, [r7, #24]
 800357e:	f003 0308 	and.w	r3, r3, #8
 8003582:	2b00      	cmp	r3, #0
 8003584:	d004      	beq.n	8003590 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8003586:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003588:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800358c:	627b      	str	r3, [r7, #36]	; 0x24
 800358e:	e002      	b.n	8003596 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8003590:	6878      	ldr	r0, [r7, #4]
 8003592:	f7fe ff08 	bl	80023a6 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8003596:	69bb      	ldr	r3, [r7, #24]
 8003598:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800359c:	2b00      	cmp	r3, #0
 800359e:	d024      	beq.n	80035ea <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80035a8:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 80035aa:	69bb      	ldr	r3, [r7, #24]
 80035ac:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d003      	beq.n	80035bc <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 80035b4:	6878      	ldr	r0, [r7, #4]
 80035b6:	f7fe fee0 	bl	800237a <HAL_CAN_TxMailbox1CompleteCallback>
 80035ba:	e016      	b.n	80035ea <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 80035bc:	69bb      	ldr	r3, [r7, #24]
 80035be:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d004      	beq.n	80035d0 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 80035c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035c8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80035cc:	627b      	str	r3, [r7, #36]	; 0x24
 80035ce:	e00c      	b.n	80035ea <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 80035d0:	69bb      	ldr	r3, [r7, #24]
 80035d2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d004      	beq.n	80035e4 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 80035da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035dc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80035e0:	627b      	str	r3, [r7, #36]	; 0x24
 80035e2:	e002      	b.n	80035ea <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 80035e4:	6878      	ldr	r0, [r7, #4]
 80035e6:	f7fe fee9 	bl	80023bc <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 80035ea:	69bb      	ldr	r3, [r7, #24]
 80035ec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d024      	beq.n	800363e <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80035fc:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 80035fe:	69bb      	ldr	r3, [r7, #24]
 8003600:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003604:	2b00      	cmp	r3, #0
 8003606:	d003      	beq.n	8003610 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8003608:	6878      	ldr	r0, [r7, #4]
 800360a:	f7fe fec1 	bl	8002390 <HAL_CAN_TxMailbox2CompleteCallback>
 800360e:	e016      	b.n	800363e <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8003610:	69bb      	ldr	r3, [r7, #24]
 8003612:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003616:	2b00      	cmp	r3, #0
 8003618:	d004      	beq.n	8003624 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 800361a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800361c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003620:	627b      	str	r3, [r7, #36]	; 0x24
 8003622:	e00c      	b.n	800363e <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8003624:	69bb      	ldr	r3, [r7, #24]
 8003626:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800362a:	2b00      	cmp	r3, #0
 800362c:	d004      	beq.n	8003638 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 800362e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003630:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003634:	627b      	str	r3, [r7, #36]	; 0x24
 8003636:	e002      	b.n	800363e <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8003638:	6878      	ldr	r0, [r7, #4]
 800363a:	f7fe feca 	bl	80023d2 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 800363e:	6a3b      	ldr	r3, [r7, #32]
 8003640:	f003 0308 	and.w	r3, r3, #8
 8003644:	2b00      	cmp	r3, #0
 8003646:	d00c      	beq.n	8003662 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8003648:	697b      	ldr	r3, [r7, #20]
 800364a:	f003 0310 	and.w	r3, r3, #16
 800364e:	2b00      	cmp	r3, #0
 8003650:	d007      	beq.n	8003662 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8003652:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003654:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003658:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	2210      	movs	r2, #16
 8003660:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8003662:	6a3b      	ldr	r3, [r7, #32]
 8003664:	f003 0304 	and.w	r3, r3, #4
 8003668:	2b00      	cmp	r3, #0
 800366a:	d00b      	beq.n	8003684 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 800366c:	697b      	ldr	r3, [r7, #20]
 800366e:	f003 0308 	and.w	r3, r3, #8
 8003672:	2b00      	cmp	r3, #0
 8003674:	d006      	beq.n	8003684 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	2208      	movs	r2, #8
 800367c:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 800367e:	6878      	ldr	r0, [r7, #4]
 8003680:	f000 f8f4 	bl	800386c <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8003684:	6a3b      	ldr	r3, [r7, #32]
 8003686:	f003 0302 	and.w	r3, r3, #2
 800368a:	2b00      	cmp	r3, #0
 800368c:	d009      	beq.n	80036a2 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	68db      	ldr	r3, [r3, #12]
 8003694:	f003 0303 	and.w	r3, r3, #3
 8003698:	2b00      	cmp	r3, #0
 800369a:	d002      	beq.n	80036a2 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 800369c:	6878      	ldr	r0, [r7, #4]
 800369e:	f7fe f97b 	bl	8001998 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 80036a2:	6a3b      	ldr	r3, [r7, #32]
 80036a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d00c      	beq.n	80036c6 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 80036ac:	693b      	ldr	r3, [r7, #16]
 80036ae:	f003 0310 	and.w	r3, r3, #16
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d007      	beq.n	80036c6 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 80036b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036b8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80036bc:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	2210      	movs	r2, #16
 80036c4:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 80036c6:	6a3b      	ldr	r3, [r7, #32]
 80036c8:	f003 0320 	and.w	r3, r3, #32
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d00b      	beq.n	80036e8 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 80036d0:	693b      	ldr	r3, [r7, #16]
 80036d2:	f003 0308 	and.w	r3, r3, #8
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d006      	beq.n	80036e8 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	2208      	movs	r2, #8
 80036e0:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 80036e2:	6878      	ldr	r0, [r7, #4]
 80036e4:	f000 f8cc 	bl	8003880 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 80036e8:	6a3b      	ldr	r3, [r7, #32]
 80036ea:	f003 0310 	and.w	r3, r3, #16
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d009      	beq.n	8003706 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	691b      	ldr	r3, [r3, #16]
 80036f8:	f003 0303 	and.w	r3, r3, #3
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d002      	beq.n	8003706 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8003700:	6878      	ldr	r0, [r7, #4]
 8003702:	f7fe f955 	bl	80019b0 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8003706:	6a3b      	ldr	r3, [r7, #32]
 8003708:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800370c:	2b00      	cmp	r3, #0
 800370e:	d00b      	beq.n	8003728 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8003710:	69fb      	ldr	r3, [r7, #28]
 8003712:	f003 0310 	and.w	r3, r3, #16
 8003716:	2b00      	cmp	r3, #0
 8003718:	d006      	beq.n	8003728 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	2210      	movs	r2, #16
 8003720:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8003722:	6878      	ldr	r0, [r7, #4]
 8003724:	f000 f8b6 	bl	8003894 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8003728:	6a3b      	ldr	r3, [r7, #32]
 800372a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800372e:	2b00      	cmp	r3, #0
 8003730:	d00b      	beq.n	800374a <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8003732:	69fb      	ldr	r3, [r7, #28]
 8003734:	f003 0308 	and.w	r3, r3, #8
 8003738:	2b00      	cmp	r3, #0
 800373a:	d006      	beq.n	800374a <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	2208      	movs	r2, #8
 8003742:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8003744:	6878      	ldr	r0, [r7, #4]
 8003746:	f000 f8af 	bl	80038a8 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 800374a:	6a3b      	ldr	r3, [r7, #32]
 800374c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003750:	2b00      	cmp	r3, #0
 8003752:	d07b      	beq.n	800384c <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8003754:	69fb      	ldr	r3, [r7, #28]
 8003756:	f003 0304 	and.w	r3, r3, #4
 800375a:	2b00      	cmp	r3, #0
 800375c:	d072      	beq.n	8003844 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800375e:	6a3b      	ldr	r3, [r7, #32]
 8003760:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003764:	2b00      	cmp	r3, #0
 8003766:	d008      	beq.n	800377a <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800376e:	2b00      	cmp	r3, #0
 8003770:	d003      	beq.n	800377a <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8003772:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003774:	f043 0301 	orr.w	r3, r3, #1
 8003778:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800377a:	6a3b      	ldr	r3, [r7, #32]
 800377c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003780:	2b00      	cmp	r3, #0
 8003782:	d008      	beq.n	8003796 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800378a:	2b00      	cmp	r3, #0
 800378c:	d003      	beq.n	8003796 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 800378e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003790:	f043 0302 	orr.w	r3, r3, #2
 8003794:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8003796:	6a3b      	ldr	r3, [r7, #32]
 8003798:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800379c:	2b00      	cmp	r3, #0
 800379e:	d008      	beq.n	80037b2 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d003      	beq.n	80037b2 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 80037aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037ac:	f043 0304 	orr.w	r3, r3, #4
 80037b0:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80037b2:	6a3b      	ldr	r3, [r7, #32]
 80037b4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d043      	beq.n	8003844 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d03e      	beq.n	8003844 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80037cc:	2b60      	cmp	r3, #96	; 0x60
 80037ce:	d02b      	beq.n	8003828 <HAL_CAN_IRQHandler+0x32a>
 80037d0:	2b60      	cmp	r3, #96	; 0x60
 80037d2:	d82e      	bhi.n	8003832 <HAL_CAN_IRQHandler+0x334>
 80037d4:	2b50      	cmp	r3, #80	; 0x50
 80037d6:	d022      	beq.n	800381e <HAL_CAN_IRQHandler+0x320>
 80037d8:	2b50      	cmp	r3, #80	; 0x50
 80037da:	d82a      	bhi.n	8003832 <HAL_CAN_IRQHandler+0x334>
 80037dc:	2b40      	cmp	r3, #64	; 0x40
 80037de:	d019      	beq.n	8003814 <HAL_CAN_IRQHandler+0x316>
 80037e0:	2b40      	cmp	r3, #64	; 0x40
 80037e2:	d826      	bhi.n	8003832 <HAL_CAN_IRQHandler+0x334>
 80037e4:	2b30      	cmp	r3, #48	; 0x30
 80037e6:	d010      	beq.n	800380a <HAL_CAN_IRQHandler+0x30c>
 80037e8:	2b30      	cmp	r3, #48	; 0x30
 80037ea:	d822      	bhi.n	8003832 <HAL_CAN_IRQHandler+0x334>
 80037ec:	2b10      	cmp	r3, #16
 80037ee:	d002      	beq.n	80037f6 <HAL_CAN_IRQHandler+0x2f8>
 80037f0:	2b20      	cmp	r3, #32
 80037f2:	d005      	beq.n	8003800 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 80037f4:	e01d      	b.n	8003832 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 80037f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037f8:	f043 0308 	orr.w	r3, r3, #8
 80037fc:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80037fe:	e019      	b.n	8003834 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8003800:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003802:	f043 0310 	orr.w	r3, r3, #16
 8003806:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003808:	e014      	b.n	8003834 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 800380a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800380c:	f043 0320 	orr.w	r3, r3, #32
 8003810:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003812:	e00f      	b.n	8003834 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8003814:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003816:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800381a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800381c:	e00a      	b.n	8003834 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 800381e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003820:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003824:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003826:	e005      	b.n	8003834 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8003828:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800382a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800382e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003830:	e000      	b.n	8003834 <HAL_CAN_IRQHandler+0x336>
            break;
 8003832:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	699a      	ldr	r2, [r3, #24]
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8003842:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	2204      	movs	r2, #4
 800384a:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 800384c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800384e:	2b00      	cmp	r3, #0
 8003850:	d008      	beq.n	8003864 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003856:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003858:	431a      	orrs	r2, r3
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 800385e:	6878      	ldr	r0, [r7, #4]
 8003860:	f000 f82c 	bl	80038bc <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8003864:	bf00      	nop
 8003866:	3728      	adds	r7, #40	; 0x28
 8003868:	46bd      	mov	sp, r7
 800386a:	bd80      	pop	{r7, pc}

0800386c <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 800386c:	b480      	push	{r7}
 800386e:	b083      	sub	sp, #12
 8003870:	af00      	add	r7, sp, #0
 8003872:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8003874:	bf00      	nop
 8003876:	370c      	adds	r7, #12
 8003878:	46bd      	mov	sp, r7
 800387a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800387e:	4770      	bx	lr

08003880 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8003880:	b480      	push	{r7}
 8003882:	b083      	sub	sp, #12
 8003884:	af00      	add	r7, sp, #0
 8003886:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8003888:	bf00      	nop
 800388a:	370c      	adds	r7, #12
 800388c:	46bd      	mov	sp, r7
 800388e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003892:	4770      	bx	lr

08003894 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8003894:	b480      	push	{r7}
 8003896:	b083      	sub	sp, #12
 8003898:	af00      	add	r7, sp, #0
 800389a:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 800389c:	bf00      	nop
 800389e:	370c      	adds	r7, #12
 80038a0:	46bd      	mov	sp, r7
 80038a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a6:	4770      	bx	lr

080038a8 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 80038a8:	b480      	push	{r7}
 80038aa:	b083      	sub	sp, #12
 80038ac:	af00      	add	r7, sp, #0
 80038ae:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 80038b0:	bf00      	nop
 80038b2:	370c      	adds	r7, #12
 80038b4:	46bd      	mov	sp, r7
 80038b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ba:	4770      	bx	lr

080038bc <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 80038bc:	b480      	push	{r7}
 80038be:	b083      	sub	sp, #12
 80038c0:	af00      	add	r7, sp, #0
 80038c2:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 80038c4:	bf00      	nop
 80038c6:	370c      	adds	r7, #12
 80038c8:	46bd      	mov	sp, r7
 80038ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ce:	4770      	bx	lr

080038d0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80038d0:	b480      	push	{r7}
 80038d2:	b085      	sub	sp, #20
 80038d4:	af00      	add	r7, sp, #0
 80038d6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	f003 0307 	and.w	r3, r3, #7
 80038de:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80038e0:	4b0b      	ldr	r3, [pc, #44]	; (8003910 <__NVIC_SetPriorityGrouping+0x40>)
 80038e2:	68db      	ldr	r3, [r3, #12]
 80038e4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80038e6:	68ba      	ldr	r2, [r7, #8]
 80038e8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80038ec:	4013      	ands	r3, r2
 80038ee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80038f4:	68bb      	ldr	r3, [r7, #8]
 80038f6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80038f8:	4b06      	ldr	r3, [pc, #24]	; (8003914 <__NVIC_SetPriorityGrouping+0x44>)
 80038fa:	4313      	orrs	r3, r2
 80038fc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80038fe:	4a04      	ldr	r2, [pc, #16]	; (8003910 <__NVIC_SetPriorityGrouping+0x40>)
 8003900:	68bb      	ldr	r3, [r7, #8]
 8003902:	60d3      	str	r3, [r2, #12]
}
 8003904:	bf00      	nop
 8003906:	3714      	adds	r7, #20
 8003908:	46bd      	mov	sp, r7
 800390a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800390e:	4770      	bx	lr
 8003910:	e000ed00 	.word	0xe000ed00
 8003914:	05fa0000 	.word	0x05fa0000

08003918 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003918:	b480      	push	{r7}
 800391a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800391c:	4b04      	ldr	r3, [pc, #16]	; (8003930 <__NVIC_GetPriorityGrouping+0x18>)
 800391e:	68db      	ldr	r3, [r3, #12]
 8003920:	0a1b      	lsrs	r3, r3, #8
 8003922:	f003 0307 	and.w	r3, r3, #7
}
 8003926:	4618      	mov	r0, r3
 8003928:	46bd      	mov	sp, r7
 800392a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800392e:	4770      	bx	lr
 8003930:	e000ed00 	.word	0xe000ed00

08003934 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003934:	b480      	push	{r7}
 8003936:	b083      	sub	sp, #12
 8003938:	af00      	add	r7, sp, #0
 800393a:	4603      	mov	r3, r0
 800393c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800393e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003942:	2b00      	cmp	r3, #0
 8003944:	db0b      	blt.n	800395e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003946:	79fb      	ldrb	r3, [r7, #7]
 8003948:	f003 021f 	and.w	r2, r3, #31
 800394c:	4907      	ldr	r1, [pc, #28]	; (800396c <__NVIC_EnableIRQ+0x38>)
 800394e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003952:	095b      	lsrs	r3, r3, #5
 8003954:	2001      	movs	r0, #1
 8003956:	fa00 f202 	lsl.w	r2, r0, r2
 800395a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800395e:	bf00      	nop
 8003960:	370c      	adds	r7, #12
 8003962:	46bd      	mov	sp, r7
 8003964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003968:	4770      	bx	lr
 800396a:	bf00      	nop
 800396c:	e000e100 	.word	0xe000e100

08003970 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003970:	b480      	push	{r7}
 8003972:	b083      	sub	sp, #12
 8003974:	af00      	add	r7, sp, #0
 8003976:	4603      	mov	r3, r0
 8003978:	6039      	str	r1, [r7, #0]
 800397a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800397c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003980:	2b00      	cmp	r3, #0
 8003982:	db0a      	blt.n	800399a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003984:	683b      	ldr	r3, [r7, #0]
 8003986:	b2da      	uxtb	r2, r3
 8003988:	490c      	ldr	r1, [pc, #48]	; (80039bc <__NVIC_SetPriority+0x4c>)
 800398a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800398e:	0112      	lsls	r2, r2, #4
 8003990:	b2d2      	uxtb	r2, r2
 8003992:	440b      	add	r3, r1
 8003994:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003998:	e00a      	b.n	80039b0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800399a:	683b      	ldr	r3, [r7, #0]
 800399c:	b2da      	uxtb	r2, r3
 800399e:	4908      	ldr	r1, [pc, #32]	; (80039c0 <__NVIC_SetPriority+0x50>)
 80039a0:	79fb      	ldrb	r3, [r7, #7]
 80039a2:	f003 030f 	and.w	r3, r3, #15
 80039a6:	3b04      	subs	r3, #4
 80039a8:	0112      	lsls	r2, r2, #4
 80039aa:	b2d2      	uxtb	r2, r2
 80039ac:	440b      	add	r3, r1
 80039ae:	761a      	strb	r2, [r3, #24]
}
 80039b0:	bf00      	nop
 80039b2:	370c      	adds	r7, #12
 80039b4:	46bd      	mov	sp, r7
 80039b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ba:	4770      	bx	lr
 80039bc:	e000e100 	.word	0xe000e100
 80039c0:	e000ed00 	.word	0xe000ed00

080039c4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80039c4:	b480      	push	{r7}
 80039c6:	b089      	sub	sp, #36	; 0x24
 80039c8:	af00      	add	r7, sp, #0
 80039ca:	60f8      	str	r0, [r7, #12]
 80039cc:	60b9      	str	r1, [r7, #8]
 80039ce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	f003 0307 	and.w	r3, r3, #7
 80039d6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80039d8:	69fb      	ldr	r3, [r7, #28]
 80039da:	f1c3 0307 	rsb	r3, r3, #7
 80039de:	2b04      	cmp	r3, #4
 80039e0:	bf28      	it	cs
 80039e2:	2304      	movcs	r3, #4
 80039e4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80039e6:	69fb      	ldr	r3, [r7, #28]
 80039e8:	3304      	adds	r3, #4
 80039ea:	2b06      	cmp	r3, #6
 80039ec:	d902      	bls.n	80039f4 <NVIC_EncodePriority+0x30>
 80039ee:	69fb      	ldr	r3, [r7, #28]
 80039f0:	3b03      	subs	r3, #3
 80039f2:	e000      	b.n	80039f6 <NVIC_EncodePriority+0x32>
 80039f4:	2300      	movs	r3, #0
 80039f6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80039f8:	f04f 32ff 	mov.w	r2, #4294967295
 80039fc:	69bb      	ldr	r3, [r7, #24]
 80039fe:	fa02 f303 	lsl.w	r3, r2, r3
 8003a02:	43da      	mvns	r2, r3
 8003a04:	68bb      	ldr	r3, [r7, #8]
 8003a06:	401a      	ands	r2, r3
 8003a08:	697b      	ldr	r3, [r7, #20]
 8003a0a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003a0c:	f04f 31ff 	mov.w	r1, #4294967295
 8003a10:	697b      	ldr	r3, [r7, #20]
 8003a12:	fa01 f303 	lsl.w	r3, r1, r3
 8003a16:	43d9      	mvns	r1, r3
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003a1c:	4313      	orrs	r3, r2
         );
}
 8003a1e:	4618      	mov	r0, r3
 8003a20:	3724      	adds	r7, #36	; 0x24
 8003a22:	46bd      	mov	sp, r7
 8003a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a28:	4770      	bx	lr

08003a2a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003a2a:	b580      	push	{r7, lr}
 8003a2c:	b082      	sub	sp, #8
 8003a2e:	af00      	add	r7, sp, #0
 8003a30:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003a32:	6878      	ldr	r0, [r7, #4]
 8003a34:	f7ff ff4c 	bl	80038d0 <__NVIC_SetPriorityGrouping>
}
 8003a38:	bf00      	nop
 8003a3a:	3708      	adds	r7, #8
 8003a3c:	46bd      	mov	sp, r7
 8003a3e:	bd80      	pop	{r7, pc}

08003a40 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003a40:	b580      	push	{r7, lr}
 8003a42:	b086      	sub	sp, #24
 8003a44:	af00      	add	r7, sp, #0
 8003a46:	4603      	mov	r3, r0
 8003a48:	60b9      	str	r1, [r7, #8]
 8003a4a:	607a      	str	r2, [r7, #4]
 8003a4c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003a4e:	2300      	movs	r3, #0
 8003a50:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003a52:	f7ff ff61 	bl	8003918 <__NVIC_GetPriorityGrouping>
 8003a56:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003a58:	687a      	ldr	r2, [r7, #4]
 8003a5a:	68b9      	ldr	r1, [r7, #8]
 8003a5c:	6978      	ldr	r0, [r7, #20]
 8003a5e:	f7ff ffb1 	bl	80039c4 <NVIC_EncodePriority>
 8003a62:	4602      	mov	r2, r0
 8003a64:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003a68:	4611      	mov	r1, r2
 8003a6a:	4618      	mov	r0, r3
 8003a6c:	f7ff ff80 	bl	8003970 <__NVIC_SetPriority>
}
 8003a70:	bf00      	nop
 8003a72:	3718      	adds	r7, #24
 8003a74:	46bd      	mov	sp, r7
 8003a76:	bd80      	pop	{r7, pc}

08003a78 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003a78:	b580      	push	{r7, lr}
 8003a7a:	b082      	sub	sp, #8
 8003a7c:	af00      	add	r7, sp, #0
 8003a7e:	4603      	mov	r3, r0
 8003a80:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003a82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a86:	4618      	mov	r0, r3
 8003a88:	f7ff ff54 	bl	8003934 <__NVIC_EnableIRQ>
}
 8003a8c:	bf00      	nop
 8003a8e:	3708      	adds	r7, #8
 8003a90:	46bd      	mov	sp, r7
 8003a92:	bd80      	pop	{r7, pc}

08003a94 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003a94:	b480      	push	{r7}
 8003a96:	b089      	sub	sp, #36	; 0x24
 8003a98:	af00      	add	r7, sp, #0
 8003a9a:	6078      	str	r0, [r7, #4]
 8003a9c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8003a9e:	2300      	movs	r3, #0
 8003aa0:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8003aa2:	2300      	movs	r3, #0
 8003aa4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8003aa6:	2300      	movs	r3, #0
 8003aa8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8003aaa:	2300      	movs	r3, #0
 8003aac:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8003aae:	2300      	movs	r3, #0
 8003ab0:	61fb      	str	r3, [r7, #28]
 8003ab2:	e175      	b.n	8003da0 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8003ab4:	2201      	movs	r2, #1
 8003ab6:	69fb      	ldr	r3, [r7, #28]
 8003ab8:	fa02 f303 	lsl.w	r3, r2, r3
 8003abc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003abe:	683b      	ldr	r3, [r7, #0]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	697a      	ldr	r2, [r7, #20]
 8003ac4:	4013      	ands	r3, r2
 8003ac6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003ac8:	693a      	ldr	r2, [r7, #16]
 8003aca:	697b      	ldr	r3, [r7, #20]
 8003acc:	429a      	cmp	r2, r3
 8003ace:	f040 8164 	bne.w	8003d9a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003ad2:	683b      	ldr	r3, [r7, #0]
 8003ad4:	685b      	ldr	r3, [r3, #4]
 8003ad6:	2b01      	cmp	r3, #1
 8003ad8:	d00b      	beq.n	8003af2 <HAL_GPIO_Init+0x5e>
 8003ada:	683b      	ldr	r3, [r7, #0]
 8003adc:	685b      	ldr	r3, [r3, #4]
 8003ade:	2b02      	cmp	r3, #2
 8003ae0:	d007      	beq.n	8003af2 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003ae2:	683b      	ldr	r3, [r7, #0]
 8003ae4:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003ae6:	2b11      	cmp	r3, #17
 8003ae8:	d003      	beq.n	8003af2 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003aea:	683b      	ldr	r3, [r7, #0]
 8003aec:	685b      	ldr	r3, [r3, #4]
 8003aee:	2b12      	cmp	r3, #18
 8003af0:	d130      	bne.n	8003b54 <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	689b      	ldr	r3, [r3, #8]
 8003af6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8003af8:	69fb      	ldr	r3, [r7, #28]
 8003afa:	005b      	lsls	r3, r3, #1
 8003afc:	2203      	movs	r2, #3
 8003afe:	fa02 f303 	lsl.w	r3, r2, r3
 8003b02:	43db      	mvns	r3, r3
 8003b04:	69ba      	ldr	r2, [r7, #24]
 8003b06:	4013      	ands	r3, r2
 8003b08:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8003b0a:	683b      	ldr	r3, [r7, #0]
 8003b0c:	68da      	ldr	r2, [r3, #12]
 8003b0e:	69fb      	ldr	r3, [r7, #28]
 8003b10:	005b      	lsls	r3, r3, #1
 8003b12:	fa02 f303 	lsl.w	r3, r2, r3
 8003b16:	69ba      	ldr	r2, [r7, #24]
 8003b18:	4313      	orrs	r3, r2
 8003b1a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	69ba      	ldr	r2, [r7, #24]
 8003b20:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	685b      	ldr	r3, [r3, #4]
 8003b26:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003b28:	2201      	movs	r2, #1
 8003b2a:	69fb      	ldr	r3, [r7, #28]
 8003b2c:	fa02 f303 	lsl.w	r3, r2, r3
 8003b30:	43db      	mvns	r3, r3
 8003b32:	69ba      	ldr	r2, [r7, #24]
 8003b34:	4013      	ands	r3, r2
 8003b36:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8003b38:	683b      	ldr	r3, [r7, #0]
 8003b3a:	685b      	ldr	r3, [r3, #4]
 8003b3c:	091b      	lsrs	r3, r3, #4
 8003b3e:	f003 0201 	and.w	r2, r3, #1
 8003b42:	69fb      	ldr	r3, [r7, #28]
 8003b44:	fa02 f303 	lsl.w	r3, r2, r3
 8003b48:	69ba      	ldr	r2, [r7, #24]
 8003b4a:	4313      	orrs	r3, r2
 8003b4c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	69ba      	ldr	r2, [r7, #24]
 8003b52:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	68db      	ldr	r3, [r3, #12]
 8003b58:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8003b5a:	69fb      	ldr	r3, [r7, #28]
 8003b5c:	005b      	lsls	r3, r3, #1
 8003b5e:	2203      	movs	r2, #3
 8003b60:	fa02 f303 	lsl.w	r3, r2, r3
 8003b64:	43db      	mvns	r3, r3
 8003b66:	69ba      	ldr	r2, [r7, #24]
 8003b68:	4013      	ands	r3, r2
 8003b6a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8003b6c:	683b      	ldr	r3, [r7, #0]
 8003b6e:	689a      	ldr	r2, [r3, #8]
 8003b70:	69fb      	ldr	r3, [r7, #28]
 8003b72:	005b      	lsls	r3, r3, #1
 8003b74:	fa02 f303 	lsl.w	r3, r2, r3
 8003b78:	69ba      	ldr	r2, [r7, #24]
 8003b7a:	4313      	orrs	r3, r2
 8003b7c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	69ba      	ldr	r2, [r7, #24]
 8003b82:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003b84:	683b      	ldr	r3, [r7, #0]
 8003b86:	685b      	ldr	r3, [r3, #4]
 8003b88:	2b02      	cmp	r3, #2
 8003b8a:	d003      	beq.n	8003b94 <HAL_GPIO_Init+0x100>
 8003b8c:	683b      	ldr	r3, [r7, #0]
 8003b8e:	685b      	ldr	r3, [r3, #4]
 8003b90:	2b12      	cmp	r3, #18
 8003b92:	d123      	bne.n	8003bdc <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8003b94:	69fb      	ldr	r3, [r7, #28]
 8003b96:	08da      	lsrs	r2, r3, #3
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	3208      	adds	r2, #8
 8003b9c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003ba0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8003ba2:	69fb      	ldr	r3, [r7, #28]
 8003ba4:	f003 0307 	and.w	r3, r3, #7
 8003ba8:	009b      	lsls	r3, r3, #2
 8003baa:	220f      	movs	r2, #15
 8003bac:	fa02 f303 	lsl.w	r3, r2, r3
 8003bb0:	43db      	mvns	r3, r3
 8003bb2:	69ba      	ldr	r2, [r7, #24]
 8003bb4:	4013      	ands	r3, r2
 8003bb6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8003bb8:	683b      	ldr	r3, [r7, #0]
 8003bba:	691a      	ldr	r2, [r3, #16]
 8003bbc:	69fb      	ldr	r3, [r7, #28]
 8003bbe:	f003 0307 	and.w	r3, r3, #7
 8003bc2:	009b      	lsls	r3, r3, #2
 8003bc4:	fa02 f303 	lsl.w	r3, r2, r3
 8003bc8:	69ba      	ldr	r2, [r7, #24]
 8003bca:	4313      	orrs	r3, r2
 8003bcc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8003bce:	69fb      	ldr	r3, [r7, #28]
 8003bd0:	08da      	lsrs	r2, r3, #3
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	3208      	adds	r2, #8
 8003bd6:	69b9      	ldr	r1, [r7, #24]
 8003bd8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8003be2:	69fb      	ldr	r3, [r7, #28]
 8003be4:	005b      	lsls	r3, r3, #1
 8003be6:	2203      	movs	r2, #3
 8003be8:	fa02 f303 	lsl.w	r3, r2, r3
 8003bec:	43db      	mvns	r3, r3
 8003bee:	69ba      	ldr	r2, [r7, #24]
 8003bf0:	4013      	ands	r3, r2
 8003bf2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8003bf4:	683b      	ldr	r3, [r7, #0]
 8003bf6:	685b      	ldr	r3, [r3, #4]
 8003bf8:	f003 0203 	and.w	r2, r3, #3
 8003bfc:	69fb      	ldr	r3, [r7, #28]
 8003bfe:	005b      	lsls	r3, r3, #1
 8003c00:	fa02 f303 	lsl.w	r3, r2, r3
 8003c04:	69ba      	ldr	r2, [r7, #24]
 8003c06:	4313      	orrs	r3, r2
 8003c08:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	69ba      	ldr	r2, [r7, #24]
 8003c0e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003c10:	683b      	ldr	r3, [r7, #0]
 8003c12:	685b      	ldr	r3, [r3, #4]
 8003c14:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	f000 80be 	beq.w	8003d9a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003c1e:	4b66      	ldr	r3, [pc, #408]	; (8003db8 <HAL_GPIO_Init+0x324>)
 8003c20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c22:	4a65      	ldr	r2, [pc, #404]	; (8003db8 <HAL_GPIO_Init+0x324>)
 8003c24:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003c28:	6453      	str	r3, [r2, #68]	; 0x44
 8003c2a:	4b63      	ldr	r3, [pc, #396]	; (8003db8 <HAL_GPIO_Init+0x324>)
 8003c2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c2e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003c32:	60fb      	str	r3, [r7, #12]
 8003c34:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8003c36:	4a61      	ldr	r2, [pc, #388]	; (8003dbc <HAL_GPIO_Init+0x328>)
 8003c38:	69fb      	ldr	r3, [r7, #28]
 8003c3a:	089b      	lsrs	r3, r3, #2
 8003c3c:	3302      	adds	r3, #2
 8003c3e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003c42:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8003c44:	69fb      	ldr	r3, [r7, #28]
 8003c46:	f003 0303 	and.w	r3, r3, #3
 8003c4a:	009b      	lsls	r3, r3, #2
 8003c4c:	220f      	movs	r2, #15
 8003c4e:	fa02 f303 	lsl.w	r3, r2, r3
 8003c52:	43db      	mvns	r3, r3
 8003c54:	69ba      	ldr	r2, [r7, #24]
 8003c56:	4013      	ands	r3, r2
 8003c58:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	4a58      	ldr	r2, [pc, #352]	; (8003dc0 <HAL_GPIO_Init+0x32c>)
 8003c5e:	4293      	cmp	r3, r2
 8003c60:	d037      	beq.n	8003cd2 <HAL_GPIO_Init+0x23e>
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	4a57      	ldr	r2, [pc, #348]	; (8003dc4 <HAL_GPIO_Init+0x330>)
 8003c66:	4293      	cmp	r3, r2
 8003c68:	d031      	beq.n	8003cce <HAL_GPIO_Init+0x23a>
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	4a56      	ldr	r2, [pc, #344]	; (8003dc8 <HAL_GPIO_Init+0x334>)
 8003c6e:	4293      	cmp	r3, r2
 8003c70:	d02b      	beq.n	8003cca <HAL_GPIO_Init+0x236>
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	4a55      	ldr	r2, [pc, #340]	; (8003dcc <HAL_GPIO_Init+0x338>)
 8003c76:	4293      	cmp	r3, r2
 8003c78:	d025      	beq.n	8003cc6 <HAL_GPIO_Init+0x232>
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	4a54      	ldr	r2, [pc, #336]	; (8003dd0 <HAL_GPIO_Init+0x33c>)
 8003c7e:	4293      	cmp	r3, r2
 8003c80:	d01f      	beq.n	8003cc2 <HAL_GPIO_Init+0x22e>
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	4a53      	ldr	r2, [pc, #332]	; (8003dd4 <HAL_GPIO_Init+0x340>)
 8003c86:	4293      	cmp	r3, r2
 8003c88:	d019      	beq.n	8003cbe <HAL_GPIO_Init+0x22a>
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	4a52      	ldr	r2, [pc, #328]	; (8003dd8 <HAL_GPIO_Init+0x344>)
 8003c8e:	4293      	cmp	r3, r2
 8003c90:	d013      	beq.n	8003cba <HAL_GPIO_Init+0x226>
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	4a51      	ldr	r2, [pc, #324]	; (8003ddc <HAL_GPIO_Init+0x348>)
 8003c96:	4293      	cmp	r3, r2
 8003c98:	d00d      	beq.n	8003cb6 <HAL_GPIO_Init+0x222>
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	4a50      	ldr	r2, [pc, #320]	; (8003de0 <HAL_GPIO_Init+0x34c>)
 8003c9e:	4293      	cmp	r3, r2
 8003ca0:	d007      	beq.n	8003cb2 <HAL_GPIO_Init+0x21e>
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	4a4f      	ldr	r2, [pc, #316]	; (8003de4 <HAL_GPIO_Init+0x350>)
 8003ca6:	4293      	cmp	r3, r2
 8003ca8:	d101      	bne.n	8003cae <HAL_GPIO_Init+0x21a>
 8003caa:	2309      	movs	r3, #9
 8003cac:	e012      	b.n	8003cd4 <HAL_GPIO_Init+0x240>
 8003cae:	230a      	movs	r3, #10
 8003cb0:	e010      	b.n	8003cd4 <HAL_GPIO_Init+0x240>
 8003cb2:	2308      	movs	r3, #8
 8003cb4:	e00e      	b.n	8003cd4 <HAL_GPIO_Init+0x240>
 8003cb6:	2307      	movs	r3, #7
 8003cb8:	e00c      	b.n	8003cd4 <HAL_GPIO_Init+0x240>
 8003cba:	2306      	movs	r3, #6
 8003cbc:	e00a      	b.n	8003cd4 <HAL_GPIO_Init+0x240>
 8003cbe:	2305      	movs	r3, #5
 8003cc0:	e008      	b.n	8003cd4 <HAL_GPIO_Init+0x240>
 8003cc2:	2304      	movs	r3, #4
 8003cc4:	e006      	b.n	8003cd4 <HAL_GPIO_Init+0x240>
 8003cc6:	2303      	movs	r3, #3
 8003cc8:	e004      	b.n	8003cd4 <HAL_GPIO_Init+0x240>
 8003cca:	2302      	movs	r3, #2
 8003ccc:	e002      	b.n	8003cd4 <HAL_GPIO_Init+0x240>
 8003cce:	2301      	movs	r3, #1
 8003cd0:	e000      	b.n	8003cd4 <HAL_GPIO_Init+0x240>
 8003cd2:	2300      	movs	r3, #0
 8003cd4:	69fa      	ldr	r2, [r7, #28]
 8003cd6:	f002 0203 	and.w	r2, r2, #3
 8003cda:	0092      	lsls	r2, r2, #2
 8003cdc:	4093      	lsls	r3, r2
 8003cde:	69ba      	ldr	r2, [r7, #24]
 8003ce0:	4313      	orrs	r3, r2
 8003ce2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8003ce4:	4935      	ldr	r1, [pc, #212]	; (8003dbc <HAL_GPIO_Init+0x328>)
 8003ce6:	69fb      	ldr	r3, [r7, #28]
 8003ce8:	089b      	lsrs	r3, r3, #2
 8003cea:	3302      	adds	r3, #2
 8003cec:	69ba      	ldr	r2, [r7, #24]
 8003cee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003cf2:	4b3d      	ldr	r3, [pc, #244]	; (8003de8 <HAL_GPIO_Init+0x354>)
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003cf8:	693b      	ldr	r3, [r7, #16]
 8003cfa:	43db      	mvns	r3, r3
 8003cfc:	69ba      	ldr	r2, [r7, #24]
 8003cfe:	4013      	ands	r3, r2
 8003d00:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003d02:	683b      	ldr	r3, [r7, #0]
 8003d04:	685b      	ldr	r3, [r3, #4]
 8003d06:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d003      	beq.n	8003d16 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8003d0e:	69ba      	ldr	r2, [r7, #24]
 8003d10:	693b      	ldr	r3, [r7, #16]
 8003d12:	4313      	orrs	r3, r2
 8003d14:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003d16:	4a34      	ldr	r2, [pc, #208]	; (8003de8 <HAL_GPIO_Init+0x354>)
 8003d18:	69bb      	ldr	r3, [r7, #24]
 8003d1a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003d1c:	4b32      	ldr	r3, [pc, #200]	; (8003de8 <HAL_GPIO_Init+0x354>)
 8003d1e:	685b      	ldr	r3, [r3, #4]
 8003d20:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003d22:	693b      	ldr	r3, [r7, #16]
 8003d24:	43db      	mvns	r3, r3
 8003d26:	69ba      	ldr	r2, [r7, #24]
 8003d28:	4013      	ands	r3, r2
 8003d2a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003d2c:	683b      	ldr	r3, [r7, #0]
 8003d2e:	685b      	ldr	r3, [r3, #4]
 8003d30:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d003      	beq.n	8003d40 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003d38:	69ba      	ldr	r2, [r7, #24]
 8003d3a:	693b      	ldr	r3, [r7, #16]
 8003d3c:	4313      	orrs	r3, r2
 8003d3e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003d40:	4a29      	ldr	r2, [pc, #164]	; (8003de8 <HAL_GPIO_Init+0x354>)
 8003d42:	69bb      	ldr	r3, [r7, #24]
 8003d44:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003d46:	4b28      	ldr	r3, [pc, #160]	; (8003de8 <HAL_GPIO_Init+0x354>)
 8003d48:	689b      	ldr	r3, [r3, #8]
 8003d4a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003d4c:	693b      	ldr	r3, [r7, #16]
 8003d4e:	43db      	mvns	r3, r3
 8003d50:	69ba      	ldr	r2, [r7, #24]
 8003d52:	4013      	ands	r3, r2
 8003d54:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003d56:	683b      	ldr	r3, [r7, #0]
 8003d58:	685b      	ldr	r3, [r3, #4]
 8003d5a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d003      	beq.n	8003d6a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8003d62:	69ba      	ldr	r2, [r7, #24]
 8003d64:	693b      	ldr	r3, [r7, #16]
 8003d66:	4313      	orrs	r3, r2
 8003d68:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003d6a:	4a1f      	ldr	r2, [pc, #124]	; (8003de8 <HAL_GPIO_Init+0x354>)
 8003d6c:	69bb      	ldr	r3, [r7, #24]
 8003d6e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003d70:	4b1d      	ldr	r3, [pc, #116]	; (8003de8 <HAL_GPIO_Init+0x354>)
 8003d72:	68db      	ldr	r3, [r3, #12]
 8003d74:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003d76:	693b      	ldr	r3, [r7, #16]
 8003d78:	43db      	mvns	r3, r3
 8003d7a:	69ba      	ldr	r2, [r7, #24]
 8003d7c:	4013      	ands	r3, r2
 8003d7e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003d80:	683b      	ldr	r3, [r7, #0]
 8003d82:	685b      	ldr	r3, [r3, #4]
 8003d84:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d003      	beq.n	8003d94 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003d8c:	69ba      	ldr	r2, [r7, #24]
 8003d8e:	693b      	ldr	r3, [r7, #16]
 8003d90:	4313      	orrs	r3, r2
 8003d92:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003d94:	4a14      	ldr	r2, [pc, #80]	; (8003de8 <HAL_GPIO_Init+0x354>)
 8003d96:	69bb      	ldr	r3, [r7, #24]
 8003d98:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8003d9a:	69fb      	ldr	r3, [r7, #28]
 8003d9c:	3301      	adds	r3, #1
 8003d9e:	61fb      	str	r3, [r7, #28]
 8003da0:	69fb      	ldr	r3, [r7, #28]
 8003da2:	2b0f      	cmp	r3, #15
 8003da4:	f67f ae86 	bls.w	8003ab4 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8003da8:	bf00      	nop
 8003daa:	bf00      	nop
 8003dac:	3724      	adds	r7, #36	; 0x24
 8003dae:	46bd      	mov	sp, r7
 8003db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db4:	4770      	bx	lr
 8003db6:	bf00      	nop
 8003db8:	40023800 	.word	0x40023800
 8003dbc:	40013800 	.word	0x40013800
 8003dc0:	40020000 	.word	0x40020000
 8003dc4:	40020400 	.word	0x40020400
 8003dc8:	40020800 	.word	0x40020800
 8003dcc:	40020c00 	.word	0x40020c00
 8003dd0:	40021000 	.word	0x40021000
 8003dd4:	40021400 	.word	0x40021400
 8003dd8:	40021800 	.word	0x40021800
 8003ddc:	40021c00 	.word	0x40021c00
 8003de0:	40022000 	.word	0x40022000
 8003de4:	40022400 	.word	0x40022400
 8003de8:	40013c00 	.word	0x40013c00

08003dec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003dec:	b480      	push	{r7}
 8003dee:	b083      	sub	sp, #12
 8003df0:	af00      	add	r7, sp, #0
 8003df2:	6078      	str	r0, [r7, #4]
 8003df4:	460b      	mov	r3, r1
 8003df6:	807b      	strh	r3, [r7, #2]
 8003df8:	4613      	mov	r3, r2
 8003dfa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003dfc:	787b      	ldrb	r3, [r7, #1]
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d003      	beq.n	8003e0a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003e02:	887a      	ldrh	r2, [r7, #2]
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8003e08:	e003      	b.n	8003e12 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8003e0a:	887b      	ldrh	r3, [r7, #2]
 8003e0c:	041a      	lsls	r2, r3, #16
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	619a      	str	r2, [r3, #24]
}
 8003e12:	bf00      	nop
 8003e14:	370c      	adds	r7, #12
 8003e16:	46bd      	mov	sp, r7
 8003e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e1c:	4770      	bx	lr
	...

08003e20 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8003e20:	b580      	push	{r7, lr}
 8003e22:	b082      	sub	sp, #8
 8003e24:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8003e26:	2300      	movs	r3, #0
 8003e28:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8003e2a:	4b23      	ldr	r3, [pc, #140]	; (8003eb8 <HAL_PWREx_EnableOverDrive+0x98>)
 8003e2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e2e:	4a22      	ldr	r2, [pc, #136]	; (8003eb8 <HAL_PWREx_EnableOverDrive+0x98>)
 8003e30:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e34:	6413      	str	r3, [r2, #64]	; 0x40
 8003e36:	4b20      	ldr	r3, [pc, #128]	; (8003eb8 <HAL_PWREx_EnableOverDrive+0x98>)
 8003e38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e3e:	603b      	str	r3, [r7, #0]
 8003e40:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8003e42:	4b1e      	ldr	r3, [pc, #120]	; (8003ebc <HAL_PWREx_EnableOverDrive+0x9c>)
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	4a1d      	ldr	r2, [pc, #116]	; (8003ebc <HAL_PWREx_EnableOverDrive+0x9c>)
 8003e48:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e4c:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003e4e:	f7fe fbe3 	bl	8002618 <HAL_GetTick>
 8003e52:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003e54:	e009      	b.n	8003e6a <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003e56:	f7fe fbdf 	bl	8002618 <HAL_GetTick>
 8003e5a:	4602      	mov	r2, r0
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	1ad3      	subs	r3, r2, r3
 8003e60:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003e64:	d901      	bls.n	8003e6a <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8003e66:	2303      	movs	r3, #3
 8003e68:	e022      	b.n	8003eb0 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003e6a:	4b14      	ldr	r3, [pc, #80]	; (8003ebc <HAL_PWREx_EnableOverDrive+0x9c>)
 8003e6c:	685b      	ldr	r3, [r3, #4]
 8003e6e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003e72:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003e76:	d1ee      	bne.n	8003e56 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8003e78:	4b10      	ldr	r3, [pc, #64]	; (8003ebc <HAL_PWREx_EnableOverDrive+0x9c>)
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	4a0f      	ldr	r2, [pc, #60]	; (8003ebc <HAL_PWREx_EnableOverDrive+0x9c>)
 8003e7e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003e82:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003e84:	f7fe fbc8 	bl	8002618 <HAL_GetTick>
 8003e88:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003e8a:	e009      	b.n	8003ea0 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003e8c:	f7fe fbc4 	bl	8002618 <HAL_GetTick>
 8003e90:	4602      	mov	r2, r0
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	1ad3      	subs	r3, r2, r3
 8003e96:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003e9a:	d901      	bls.n	8003ea0 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8003e9c:	2303      	movs	r3, #3
 8003e9e:	e007      	b.n	8003eb0 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003ea0:	4b06      	ldr	r3, [pc, #24]	; (8003ebc <HAL_PWREx_EnableOverDrive+0x9c>)
 8003ea2:	685b      	ldr	r3, [r3, #4]
 8003ea4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ea8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003eac:	d1ee      	bne.n	8003e8c <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8003eae:	2300      	movs	r3, #0
}
 8003eb0:	4618      	mov	r0, r3
 8003eb2:	3708      	adds	r7, #8
 8003eb4:	46bd      	mov	sp, r7
 8003eb6:	bd80      	pop	{r7, pc}
 8003eb8:	40023800 	.word	0x40023800
 8003ebc:	40007000 	.word	0x40007000

08003ec0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003ec0:	b580      	push	{r7, lr}
 8003ec2:	b086      	sub	sp, #24
 8003ec4:	af00      	add	r7, sp, #0
 8003ec6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8003ec8:	2300      	movs	r3, #0
 8003eca:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d101      	bne.n	8003ed6 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8003ed2:	2301      	movs	r3, #1
 8003ed4:	e291      	b.n	80043fa <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	f003 0301 	and.w	r3, r3, #1
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	f000 8087 	beq.w	8003ff2 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003ee4:	4b96      	ldr	r3, [pc, #600]	; (8004140 <HAL_RCC_OscConfig+0x280>)
 8003ee6:	689b      	ldr	r3, [r3, #8]
 8003ee8:	f003 030c 	and.w	r3, r3, #12
 8003eec:	2b04      	cmp	r3, #4
 8003eee:	d00c      	beq.n	8003f0a <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003ef0:	4b93      	ldr	r3, [pc, #588]	; (8004140 <HAL_RCC_OscConfig+0x280>)
 8003ef2:	689b      	ldr	r3, [r3, #8]
 8003ef4:	f003 030c 	and.w	r3, r3, #12
 8003ef8:	2b08      	cmp	r3, #8
 8003efa:	d112      	bne.n	8003f22 <HAL_RCC_OscConfig+0x62>
 8003efc:	4b90      	ldr	r3, [pc, #576]	; (8004140 <HAL_RCC_OscConfig+0x280>)
 8003efe:	685b      	ldr	r3, [r3, #4]
 8003f00:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003f04:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003f08:	d10b      	bne.n	8003f22 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003f0a:	4b8d      	ldr	r3, [pc, #564]	; (8004140 <HAL_RCC_OscConfig+0x280>)
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d06c      	beq.n	8003ff0 <HAL_RCC_OscConfig+0x130>
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	685b      	ldr	r3, [r3, #4]
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d168      	bne.n	8003ff0 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8003f1e:	2301      	movs	r3, #1
 8003f20:	e26b      	b.n	80043fa <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	685b      	ldr	r3, [r3, #4]
 8003f26:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003f2a:	d106      	bne.n	8003f3a <HAL_RCC_OscConfig+0x7a>
 8003f2c:	4b84      	ldr	r3, [pc, #528]	; (8004140 <HAL_RCC_OscConfig+0x280>)
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	4a83      	ldr	r2, [pc, #524]	; (8004140 <HAL_RCC_OscConfig+0x280>)
 8003f32:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f36:	6013      	str	r3, [r2, #0]
 8003f38:	e02e      	b.n	8003f98 <HAL_RCC_OscConfig+0xd8>
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	685b      	ldr	r3, [r3, #4]
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d10c      	bne.n	8003f5c <HAL_RCC_OscConfig+0x9c>
 8003f42:	4b7f      	ldr	r3, [pc, #508]	; (8004140 <HAL_RCC_OscConfig+0x280>)
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	4a7e      	ldr	r2, [pc, #504]	; (8004140 <HAL_RCC_OscConfig+0x280>)
 8003f48:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003f4c:	6013      	str	r3, [r2, #0]
 8003f4e:	4b7c      	ldr	r3, [pc, #496]	; (8004140 <HAL_RCC_OscConfig+0x280>)
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	4a7b      	ldr	r2, [pc, #492]	; (8004140 <HAL_RCC_OscConfig+0x280>)
 8003f54:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003f58:	6013      	str	r3, [r2, #0]
 8003f5a:	e01d      	b.n	8003f98 <HAL_RCC_OscConfig+0xd8>
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	685b      	ldr	r3, [r3, #4]
 8003f60:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003f64:	d10c      	bne.n	8003f80 <HAL_RCC_OscConfig+0xc0>
 8003f66:	4b76      	ldr	r3, [pc, #472]	; (8004140 <HAL_RCC_OscConfig+0x280>)
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	4a75      	ldr	r2, [pc, #468]	; (8004140 <HAL_RCC_OscConfig+0x280>)
 8003f6c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003f70:	6013      	str	r3, [r2, #0]
 8003f72:	4b73      	ldr	r3, [pc, #460]	; (8004140 <HAL_RCC_OscConfig+0x280>)
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	4a72      	ldr	r2, [pc, #456]	; (8004140 <HAL_RCC_OscConfig+0x280>)
 8003f78:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f7c:	6013      	str	r3, [r2, #0]
 8003f7e:	e00b      	b.n	8003f98 <HAL_RCC_OscConfig+0xd8>
 8003f80:	4b6f      	ldr	r3, [pc, #444]	; (8004140 <HAL_RCC_OscConfig+0x280>)
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	4a6e      	ldr	r2, [pc, #440]	; (8004140 <HAL_RCC_OscConfig+0x280>)
 8003f86:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003f8a:	6013      	str	r3, [r2, #0]
 8003f8c:	4b6c      	ldr	r3, [pc, #432]	; (8004140 <HAL_RCC_OscConfig+0x280>)
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	4a6b      	ldr	r2, [pc, #428]	; (8004140 <HAL_RCC_OscConfig+0x280>)
 8003f92:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003f96:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	685b      	ldr	r3, [r3, #4]
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d013      	beq.n	8003fc8 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fa0:	f7fe fb3a 	bl	8002618 <HAL_GetTick>
 8003fa4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003fa6:	e008      	b.n	8003fba <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003fa8:	f7fe fb36 	bl	8002618 <HAL_GetTick>
 8003fac:	4602      	mov	r2, r0
 8003fae:	693b      	ldr	r3, [r7, #16]
 8003fb0:	1ad3      	subs	r3, r2, r3
 8003fb2:	2b64      	cmp	r3, #100	; 0x64
 8003fb4:	d901      	bls.n	8003fba <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003fb6:	2303      	movs	r3, #3
 8003fb8:	e21f      	b.n	80043fa <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003fba:	4b61      	ldr	r3, [pc, #388]	; (8004140 <HAL_RCC_OscConfig+0x280>)
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d0f0      	beq.n	8003fa8 <HAL_RCC_OscConfig+0xe8>
 8003fc6:	e014      	b.n	8003ff2 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fc8:	f7fe fb26 	bl	8002618 <HAL_GetTick>
 8003fcc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003fce:	e008      	b.n	8003fe2 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003fd0:	f7fe fb22 	bl	8002618 <HAL_GetTick>
 8003fd4:	4602      	mov	r2, r0
 8003fd6:	693b      	ldr	r3, [r7, #16]
 8003fd8:	1ad3      	subs	r3, r2, r3
 8003fda:	2b64      	cmp	r3, #100	; 0x64
 8003fdc:	d901      	bls.n	8003fe2 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8003fde:	2303      	movs	r3, #3
 8003fe0:	e20b      	b.n	80043fa <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003fe2:	4b57      	ldr	r3, [pc, #348]	; (8004140 <HAL_RCC_OscConfig+0x280>)
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d1f0      	bne.n	8003fd0 <HAL_RCC_OscConfig+0x110>
 8003fee:	e000      	b.n	8003ff2 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ff0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	f003 0302 	and.w	r3, r3, #2
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d069      	beq.n	80040d2 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003ffe:	4b50      	ldr	r3, [pc, #320]	; (8004140 <HAL_RCC_OscConfig+0x280>)
 8004000:	689b      	ldr	r3, [r3, #8]
 8004002:	f003 030c 	and.w	r3, r3, #12
 8004006:	2b00      	cmp	r3, #0
 8004008:	d00b      	beq.n	8004022 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800400a:	4b4d      	ldr	r3, [pc, #308]	; (8004140 <HAL_RCC_OscConfig+0x280>)
 800400c:	689b      	ldr	r3, [r3, #8]
 800400e:	f003 030c 	and.w	r3, r3, #12
 8004012:	2b08      	cmp	r3, #8
 8004014:	d11c      	bne.n	8004050 <HAL_RCC_OscConfig+0x190>
 8004016:	4b4a      	ldr	r3, [pc, #296]	; (8004140 <HAL_RCC_OscConfig+0x280>)
 8004018:	685b      	ldr	r3, [r3, #4]
 800401a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800401e:	2b00      	cmp	r3, #0
 8004020:	d116      	bne.n	8004050 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004022:	4b47      	ldr	r3, [pc, #284]	; (8004140 <HAL_RCC_OscConfig+0x280>)
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	f003 0302 	and.w	r3, r3, #2
 800402a:	2b00      	cmp	r3, #0
 800402c:	d005      	beq.n	800403a <HAL_RCC_OscConfig+0x17a>
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	68db      	ldr	r3, [r3, #12]
 8004032:	2b01      	cmp	r3, #1
 8004034:	d001      	beq.n	800403a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8004036:	2301      	movs	r3, #1
 8004038:	e1df      	b.n	80043fa <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800403a:	4b41      	ldr	r3, [pc, #260]	; (8004140 <HAL_RCC_OscConfig+0x280>)
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	691b      	ldr	r3, [r3, #16]
 8004046:	00db      	lsls	r3, r3, #3
 8004048:	493d      	ldr	r1, [pc, #244]	; (8004140 <HAL_RCC_OscConfig+0x280>)
 800404a:	4313      	orrs	r3, r2
 800404c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800404e:	e040      	b.n	80040d2 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	68db      	ldr	r3, [r3, #12]
 8004054:	2b00      	cmp	r3, #0
 8004056:	d023      	beq.n	80040a0 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004058:	4b39      	ldr	r3, [pc, #228]	; (8004140 <HAL_RCC_OscConfig+0x280>)
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	4a38      	ldr	r2, [pc, #224]	; (8004140 <HAL_RCC_OscConfig+0x280>)
 800405e:	f043 0301 	orr.w	r3, r3, #1
 8004062:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004064:	f7fe fad8 	bl	8002618 <HAL_GetTick>
 8004068:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800406a:	e008      	b.n	800407e <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800406c:	f7fe fad4 	bl	8002618 <HAL_GetTick>
 8004070:	4602      	mov	r2, r0
 8004072:	693b      	ldr	r3, [r7, #16]
 8004074:	1ad3      	subs	r3, r2, r3
 8004076:	2b02      	cmp	r3, #2
 8004078:	d901      	bls.n	800407e <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800407a:	2303      	movs	r3, #3
 800407c:	e1bd      	b.n	80043fa <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800407e:	4b30      	ldr	r3, [pc, #192]	; (8004140 <HAL_RCC_OscConfig+0x280>)
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	f003 0302 	and.w	r3, r3, #2
 8004086:	2b00      	cmp	r3, #0
 8004088:	d0f0      	beq.n	800406c <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800408a:	4b2d      	ldr	r3, [pc, #180]	; (8004140 <HAL_RCC_OscConfig+0x280>)
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	691b      	ldr	r3, [r3, #16]
 8004096:	00db      	lsls	r3, r3, #3
 8004098:	4929      	ldr	r1, [pc, #164]	; (8004140 <HAL_RCC_OscConfig+0x280>)
 800409a:	4313      	orrs	r3, r2
 800409c:	600b      	str	r3, [r1, #0]
 800409e:	e018      	b.n	80040d2 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80040a0:	4b27      	ldr	r3, [pc, #156]	; (8004140 <HAL_RCC_OscConfig+0x280>)
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	4a26      	ldr	r2, [pc, #152]	; (8004140 <HAL_RCC_OscConfig+0x280>)
 80040a6:	f023 0301 	bic.w	r3, r3, #1
 80040aa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040ac:	f7fe fab4 	bl	8002618 <HAL_GetTick>
 80040b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80040b2:	e008      	b.n	80040c6 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80040b4:	f7fe fab0 	bl	8002618 <HAL_GetTick>
 80040b8:	4602      	mov	r2, r0
 80040ba:	693b      	ldr	r3, [r7, #16]
 80040bc:	1ad3      	subs	r3, r2, r3
 80040be:	2b02      	cmp	r3, #2
 80040c0:	d901      	bls.n	80040c6 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80040c2:	2303      	movs	r3, #3
 80040c4:	e199      	b.n	80043fa <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80040c6:	4b1e      	ldr	r3, [pc, #120]	; (8004140 <HAL_RCC_OscConfig+0x280>)
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	f003 0302 	and.w	r3, r3, #2
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d1f0      	bne.n	80040b4 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	f003 0308 	and.w	r3, r3, #8
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d038      	beq.n	8004150 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	695b      	ldr	r3, [r3, #20]
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d019      	beq.n	800411a <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80040e6:	4b16      	ldr	r3, [pc, #88]	; (8004140 <HAL_RCC_OscConfig+0x280>)
 80040e8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80040ea:	4a15      	ldr	r2, [pc, #84]	; (8004140 <HAL_RCC_OscConfig+0x280>)
 80040ec:	f043 0301 	orr.w	r3, r3, #1
 80040f0:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80040f2:	f7fe fa91 	bl	8002618 <HAL_GetTick>
 80040f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80040f8:	e008      	b.n	800410c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80040fa:	f7fe fa8d 	bl	8002618 <HAL_GetTick>
 80040fe:	4602      	mov	r2, r0
 8004100:	693b      	ldr	r3, [r7, #16]
 8004102:	1ad3      	subs	r3, r2, r3
 8004104:	2b02      	cmp	r3, #2
 8004106:	d901      	bls.n	800410c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004108:	2303      	movs	r3, #3
 800410a:	e176      	b.n	80043fa <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800410c:	4b0c      	ldr	r3, [pc, #48]	; (8004140 <HAL_RCC_OscConfig+0x280>)
 800410e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004110:	f003 0302 	and.w	r3, r3, #2
 8004114:	2b00      	cmp	r3, #0
 8004116:	d0f0      	beq.n	80040fa <HAL_RCC_OscConfig+0x23a>
 8004118:	e01a      	b.n	8004150 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800411a:	4b09      	ldr	r3, [pc, #36]	; (8004140 <HAL_RCC_OscConfig+0x280>)
 800411c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800411e:	4a08      	ldr	r2, [pc, #32]	; (8004140 <HAL_RCC_OscConfig+0x280>)
 8004120:	f023 0301 	bic.w	r3, r3, #1
 8004124:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004126:	f7fe fa77 	bl	8002618 <HAL_GetTick>
 800412a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800412c:	e00a      	b.n	8004144 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800412e:	f7fe fa73 	bl	8002618 <HAL_GetTick>
 8004132:	4602      	mov	r2, r0
 8004134:	693b      	ldr	r3, [r7, #16]
 8004136:	1ad3      	subs	r3, r2, r3
 8004138:	2b02      	cmp	r3, #2
 800413a:	d903      	bls.n	8004144 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800413c:	2303      	movs	r3, #3
 800413e:	e15c      	b.n	80043fa <HAL_RCC_OscConfig+0x53a>
 8004140:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004144:	4b91      	ldr	r3, [pc, #580]	; (800438c <HAL_RCC_OscConfig+0x4cc>)
 8004146:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004148:	f003 0302 	and.w	r3, r3, #2
 800414c:	2b00      	cmp	r3, #0
 800414e:	d1ee      	bne.n	800412e <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	f003 0304 	and.w	r3, r3, #4
 8004158:	2b00      	cmp	r3, #0
 800415a:	f000 80a4 	beq.w	80042a6 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800415e:	4b8b      	ldr	r3, [pc, #556]	; (800438c <HAL_RCC_OscConfig+0x4cc>)
 8004160:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004162:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004166:	2b00      	cmp	r3, #0
 8004168:	d10d      	bne.n	8004186 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800416a:	4b88      	ldr	r3, [pc, #544]	; (800438c <HAL_RCC_OscConfig+0x4cc>)
 800416c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800416e:	4a87      	ldr	r2, [pc, #540]	; (800438c <HAL_RCC_OscConfig+0x4cc>)
 8004170:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004174:	6413      	str	r3, [r2, #64]	; 0x40
 8004176:	4b85      	ldr	r3, [pc, #532]	; (800438c <HAL_RCC_OscConfig+0x4cc>)
 8004178:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800417a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800417e:	60bb      	str	r3, [r7, #8]
 8004180:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004182:	2301      	movs	r3, #1
 8004184:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004186:	4b82      	ldr	r3, [pc, #520]	; (8004390 <HAL_RCC_OscConfig+0x4d0>)
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800418e:	2b00      	cmp	r3, #0
 8004190:	d118      	bne.n	80041c4 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8004192:	4b7f      	ldr	r3, [pc, #508]	; (8004390 <HAL_RCC_OscConfig+0x4d0>)
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	4a7e      	ldr	r2, [pc, #504]	; (8004390 <HAL_RCC_OscConfig+0x4d0>)
 8004198:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800419c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800419e:	f7fe fa3b 	bl	8002618 <HAL_GetTick>
 80041a2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80041a4:	e008      	b.n	80041b8 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80041a6:	f7fe fa37 	bl	8002618 <HAL_GetTick>
 80041aa:	4602      	mov	r2, r0
 80041ac:	693b      	ldr	r3, [r7, #16]
 80041ae:	1ad3      	subs	r3, r2, r3
 80041b0:	2b64      	cmp	r3, #100	; 0x64
 80041b2:	d901      	bls.n	80041b8 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80041b4:	2303      	movs	r3, #3
 80041b6:	e120      	b.n	80043fa <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80041b8:	4b75      	ldr	r3, [pc, #468]	; (8004390 <HAL_RCC_OscConfig+0x4d0>)
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d0f0      	beq.n	80041a6 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	689b      	ldr	r3, [r3, #8]
 80041c8:	2b01      	cmp	r3, #1
 80041ca:	d106      	bne.n	80041da <HAL_RCC_OscConfig+0x31a>
 80041cc:	4b6f      	ldr	r3, [pc, #444]	; (800438c <HAL_RCC_OscConfig+0x4cc>)
 80041ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041d0:	4a6e      	ldr	r2, [pc, #440]	; (800438c <HAL_RCC_OscConfig+0x4cc>)
 80041d2:	f043 0301 	orr.w	r3, r3, #1
 80041d6:	6713      	str	r3, [r2, #112]	; 0x70
 80041d8:	e02d      	b.n	8004236 <HAL_RCC_OscConfig+0x376>
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	689b      	ldr	r3, [r3, #8]
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d10c      	bne.n	80041fc <HAL_RCC_OscConfig+0x33c>
 80041e2:	4b6a      	ldr	r3, [pc, #424]	; (800438c <HAL_RCC_OscConfig+0x4cc>)
 80041e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041e6:	4a69      	ldr	r2, [pc, #420]	; (800438c <HAL_RCC_OscConfig+0x4cc>)
 80041e8:	f023 0301 	bic.w	r3, r3, #1
 80041ec:	6713      	str	r3, [r2, #112]	; 0x70
 80041ee:	4b67      	ldr	r3, [pc, #412]	; (800438c <HAL_RCC_OscConfig+0x4cc>)
 80041f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041f2:	4a66      	ldr	r2, [pc, #408]	; (800438c <HAL_RCC_OscConfig+0x4cc>)
 80041f4:	f023 0304 	bic.w	r3, r3, #4
 80041f8:	6713      	str	r3, [r2, #112]	; 0x70
 80041fa:	e01c      	b.n	8004236 <HAL_RCC_OscConfig+0x376>
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	689b      	ldr	r3, [r3, #8]
 8004200:	2b05      	cmp	r3, #5
 8004202:	d10c      	bne.n	800421e <HAL_RCC_OscConfig+0x35e>
 8004204:	4b61      	ldr	r3, [pc, #388]	; (800438c <HAL_RCC_OscConfig+0x4cc>)
 8004206:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004208:	4a60      	ldr	r2, [pc, #384]	; (800438c <HAL_RCC_OscConfig+0x4cc>)
 800420a:	f043 0304 	orr.w	r3, r3, #4
 800420e:	6713      	str	r3, [r2, #112]	; 0x70
 8004210:	4b5e      	ldr	r3, [pc, #376]	; (800438c <HAL_RCC_OscConfig+0x4cc>)
 8004212:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004214:	4a5d      	ldr	r2, [pc, #372]	; (800438c <HAL_RCC_OscConfig+0x4cc>)
 8004216:	f043 0301 	orr.w	r3, r3, #1
 800421a:	6713      	str	r3, [r2, #112]	; 0x70
 800421c:	e00b      	b.n	8004236 <HAL_RCC_OscConfig+0x376>
 800421e:	4b5b      	ldr	r3, [pc, #364]	; (800438c <HAL_RCC_OscConfig+0x4cc>)
 8004220:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004222:	4a5a      	ldr	r2, [pc, #360]	; (800438c <HAL_RCC_OscConfig+0x4cc>)
 8004224:	f023 0301 	bic.w	r3, r3, #1
 8004228:	6713      	str	r3, [r2, #112]	; 0x70
 800422a:	4b58      	ldr	r3, [pc, #352]	; (800438c <HAL_RCC_OscConfig+0x4cc>)
 800422c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800422e:	4a57      	ldr	r2, [pc, #348]	; (800438c <HAL_RCC_OscConfig+0x4cc>)
 8004230:	f023 0304 	bic.w	r3, r3, #4
 8004234:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	689b      	ldr	r3, [r3, #8]
 800423a:	2b00      	cmp	r3, #0
 800423c:	d015      	beq.n	800426a <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800423e:	f7fe f9eb 	bl	8002618 <HAL_GetTick>
 8004242:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004244:	e00a      	b.n	800425c <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004246:	f7fe f9e7 	bl	8002618 <HAL_GetTick>
 800424a:	4602      	mov	r2, r0
 800424c:	693b      	ldr	r3, [r7, #16]
 800424e:	1ad3      	subs	r3, r2, r3
 8004250:	f241 3288 	movw	r2, #5000	; 0x1388
 8004254:	4293      	cmp	r3, r2
 8004256:	d901      	bls.n	800425c <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8004258:	2303      	movs	r3, #3
 800425a:	e0ce      	b.n	80043fa <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800425c:	4b4b      	ldr	r3, [pc, #300]	; (800438c <HAL_RCC_OscConfig+0x4cc>)
 800425e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004260:	f003 0302 	and.w	r3, r3, #2
 8004264:	2b00      	cmp	r3, #0
 8004266:	d0ee      	beq.n	8004246 <HAL_RCC_OscConfig+0x386>
 8004268:	e014      	b.n	8004294 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800426a:	f7fe f9d5 	bl	8002618 <HAL_GetTick>
 800426e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004270:	e00a      	b.n	8004288 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004272:	f7fe f9d1 	bl	8002618 <HAL_GetTick>
 8004276:	4602      	mov	r2, r0
 8004278:	693b      	ldr	r3, [r7, #16]
 800427a:	1ad3      	subs	r3, r2, r3
 800427c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004280:	4293      	cmp	r3, r2
 8004282:	d901      	bls.n	8004288 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8004284:	2303      	movs	r3, #3
 8004286:	e0b8      	b.n	80043fa <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004288:	4b40      	ldr	r3, [pc, #256]	; (800438c <HAL_RCC_OscConfig+0x4cc>)
 800428a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800428c:	f003 0302 	and.w	r3, r3, #2
 8004290:	2b00      	cmp	r3, #0
 8004292:	d1ee      	bne.n	8004272 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004294:	7dfb      	ldrb	r3, [r7, #23]
 8004296:	2b01      	cmp	r3, #1
 8004298:	d105      	bne.n	80042a6 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800429a:	4b3c      	ldr	r3, [pc, #240]	; (800438c <HAL_RCC_OscConfig+0x4cc>)
 800429c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800429e:	4a3b      	ldr	r2, [pc, #236]	; (800438c <HAL_RCC_OscConfig+0x4cc>)
 80042a0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80042a4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	699b      	ldr	r3, [r3, #24]
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	f000 80a4 	beq.w	80043f8 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80042b0:	4b36      	ldr	r3, [pc, #216]	; (800438c <HAL_RCC_OscConfig+0x4cc>)
 80042b2:	689b      	ldr	r3, [r3, #8]
 80042b4:	f003 030c 	and.w	r3, r3, #12
 80042b8:	2b08      	cmp	r3, #8
 80042ba:	d06b      	beq.n	8004394 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	699b      	ldr	r3, [r3, #24]
 80042c0:	2b02      	cmp	r3, #2
 80042c2:	d149      	bne.n	8004358 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80042c4:	4b31      	ldr	r3, [pc, #196]	; (800438c <HAL_RCC_OscConfig+0x4cc>)
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	4a30      	ldr	r2, [pc, #192]	; (800438c <HAL_RCC_OscConfig+0x4cc>)
 80042ca:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80042ce:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042d0:	f7fe f9a2 	bl	8002618 <HAL_GetTick>
 80042d4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80042d6:	e008      	b.n	80042ea <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80042d8:	f7fe f99e 	bl	8002618 <HAL_GetTick>
 80042dc:	4602      	mov	r2, r0
 80042de:	693b      	ldr	r3, [r7, #16]
 80042e0:	1ad3      	subs	r3, r2, r3
 80042e2:	2b02      	cmp	r3, #2
 80042e4:	d901      	bls.n	80042ea <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80042e6:	2303      	movs	r3, #3
 80042e8:	e087      	b.n	80043fa <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80042ea:	4b28      	ldr	r3, [pc, #160]	; (800438c <HAL_RCC_OscConfig+0x4cc>)
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d1f0      	bne.n	80042d8 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	69da      	ldr	r2, [r3, #28]
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	6a1b      	ldr	r3, [r3, #32]
 80042fe:	431a      	orrs	r2, r3
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004304:	019b      	lsls	r3, r3, #6
 8004306:	431a      	orrs	r2, r3
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800430c:	085b      	lsrs	r3, r3, #1
 800430e:	3b01      	subs	r3, #1
 8004310:	041b      	lsls	r3, r3, #16
 8004312:	431a      	orrs	r2, r3
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004318:	061b      	lsls	r3, r3, #24
 800431a:	4313      	orrs	r3, r2
 800431c:	4a1b      	ldr	r2, [pc, #108]	; (800438c <HAL_RCC_OscConfig+0x4cc>)
 800431e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004322:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004324:	4b19      	ldr	r3, [pc, #100]	; (800438c <HAL_RCC_OscConfig+0x4cc>)
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	4a18      	ldr	r2, [pc, #96]	; (800438c <HAL_RCC_OscConfig+0x4cc>)
 800432a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800432e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004330:	f7fe f972 	bl	8002618 <HAL_GetTick>
 8004334:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004336:	e008      	b.n	800434a <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004338:	f7fe f96e 	bl	8002618 <HAL_GetTick>
 800433c:	4602      	mov	r2, r0
 800433e:	693b      	ldr	r3, [r7, #16]
 8004340:	1ad3      	subs	r3, r2, r3
 8004342:	2b02      	cmp	r3, #2
 8004344:	d901      	bls.n	800434a <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8004346:	2303      	movs	r3, #3
 8004348:	e057      	b.n	80043fa <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800434a:	4b10      	ldr	r3, [pc, #64]	; (800438c <HAL_RCC_OscConfig+0x4cc>)
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004352:	2b00      	cmp	r3, #0
 8004354:	d0f0      	beq.n	8004338 <HAL_RCC_OscConfig+0x478>
 8004356:	e04f      	b.n	80043f8 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004358:	4b0c      	ldr	r3, [pc, #48]	; (800438c <HAL_RCC_OscConfig+0x4cc>)
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	4a0b      	ldr	r2, [pc, #44]	; (800438c <HAL_RCC_OscConfig+0x4cc>)
 800435e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004362:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004364:	f7fe f958 	bl	8002618 <HAL_GetTick>
 8004368:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800436a:	e008      	b.n	800437e <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800436c:	f7fe f954 	bl	8002618 <HAL_GetTick>
 8004370:	4602      	mov	r2, r0
 8004372:	693b      	ldr	r3, [r7, #16]
 8004374:	1ad3      	subs	r3, r2, r3
 8004376:	2b02      	cmp	r3, #2
 8004378:	d901      	bls.n	800437e <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 800437a:	2303      	movs	r3, #3
 800437c:	e03d      	b.n	80043fa <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800437e:	4b03      	ldr	r3, [pc, #12]	; (800438c <HAL_RCC_OscConfig+0x4cc>)
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004386:	2b00      	cmp	r3, #0
 8004388:	d1f0      	bne.n	800436c <HAL_RCC_OscConfig+0x4ac>
 800438a:	e035      	b.n	80043f8 <HAL_RCC_OscConfig+0x538>
 800438c:	40023800 	.word	0x40023800
 8004390:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8004394:	4b1b      	ldr	r3, [pc, #108]	; (8004404 <HAL_RCC_OscConfig+0x544>)
 8004396:	685b      	ldr	r3, [r3, #4]
 8004398:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	699b      	ldr	r3, [r3, #24]
 800439e:	2b01      	cmp	r3, #1
 80043a0:	d028      	beq.n	80043f4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80043ac:	429a      	cmp	r2, r3
 80043ae:	d121      	bne.n	80043f4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80043ba:	429a      	cmp	r2, r3
 80043bc:	d11a      	bne.n	80043f4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80043be:	68fa      	ldr	r2, [r7, #12]
 80043c0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80043c4:	4013      	ands	r3, r2
 80043c6:	687a      	ldr	r2, [r7, #4]
 80043c8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80043ca:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80043cc:	4293      	cmp	r3, r2
 80043ce:	d111      	bne.n	80043f4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043da:	085b      	lsrs	r3, r3, #1
 80043dc:	3b01      	subs	r3, #1
 80043de:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80043e0:	429a      	cmp	r2, r3
 80043e2:	d107      	bne.n	80043f4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043ee:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80043f0:	429a      	cmp	r2, r3
 80043f2:	d001      	beq.n	80043f8 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 80043f4:	2301      	movs	r3, #1
 80043f6:	e000      	b.n	80043fa <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 80043f8:	2300      	movs	r3, #0
}
 80043fa:	4618      	mov	r0, r3
 80043fc:	3718      	adds	r7, #24
 80043fe:	46bd      	mov	sp, r7
 8004400:	bd80      	pop	{r7, pc}
 8004402:	bf00      	nop
 8004404:	40023800 	.word	0x40023800

08004408 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004408:	b580      	push	{r7, lr}
 800440a:	b084      	sub	sp, #16
 800440c:	af00      	add	r7, sp, #0
 800440e:	6078      	str	r0, [r7, #4]
 8004410:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8004412:	2300      	movs	r3, #0
 8004414:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	2b00      	cmp	r3, #0
 800441a:	d101      	bne.n	8004420 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800441c:	2301      	movs	r3, #1
 800441e:	e0d0      	b.n	80045c2 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004420:	4b6a      	ldr	r3, [pc, #424]	; (80045cc <HAL_RCC_ClockConfig+0x1c4>)
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	f003 030f 	and.w	r3, r3, #15
 8004428:	683a      	ldr	r2, [r7, #0]
 800442a:	429a      	cmp	r2, r3
 800442c:	d910      	bls.n	8004450 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800442e:	4b67      	ldr	r3, [pc, #412]	; (80045cc <HAL_RCC_ClockConfig+0x1c4>)
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	f023 020f 	bic.w	r2, r3, #15
 8004436:	4965      	ldr	r1, [pc, #404]	; (80045cc <HAL_RCC_ClockConfig+0x1c4>)
 8004438:	683b      	ldr	r3, [r7, #0]
 800443a:	4313      	orrs	r3, r2
 800443c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800443e:	4b63      	ldr	r3, [pc, #396]	; (80045cc <HAL_RCC_ClockConfig+0x1c4>)
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	f003 030f 	and.w	r3, r3, #15
 8004446:	683a      	ldr	r2, [r7, #0]
 8004448:	429a      	cmp	r2, r3
 800444a:	d001      	beq.n	8004450 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800444c:	2301      	movs	r3, #1
 800444e:	e0b8      	b.n	80045c2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	f003 0302 	and.w	r3, r3, #2
 8004458:	2b00      	cmp	r3, #0
 800445a:	d020      	beq.n	800449e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	f003 0304 	and.w	r3, r3, #4
 8004464:	2b00      	cmp	r3, #0
 8004466:	d005      	beq.n	8004474 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004468:	4b59      	ldr	r3, [pc, #356]	; (80045d0 <HAL_RCC_ClockConfig+0x1c8>)
 800446a:	689b      	ldr	r3, [r3, #8]
 800446c:	4a58      	ldr	r2, [pc, #352]	; (80045d0 <HAL_RCC_ClockConfig+0x1c8>)
 800446e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004472:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	f003 0308 	and.w	r3, r3, #8
 800447c:	2b00      	cmp	r3, #0
 800447e:	d005      	beq.n	800448c <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004480:	4b53      	ldr	r3, [pc, #332]	; (80045d0 <HAL_RCC_ClockConfig+0x1c8>)
 8004482:	689b      	ldr	r3, [r3, #8]
 8004484:	4a52      	ldr	r2, [pc, #328]	; (80045d0 <HAL_RCC_ClockConfig+0x1c8>)
 8004486:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800448a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800448c:	4b50      	ldr	r3, [pc, #320]	; (80045d0 <HAL_RCC_ClockConfig+0x1c8>)
 800448e:	689b      	ldr	r3, [r3, #8]
 8004490:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	689b      	ldr	r3, [r3, #8]
 8004498:	494d      	ldr	r1, [pc, #308]	; (80045d0 <HAL_RCC_ClockConfig+0x1c8>)
 800449a:	4313      	orrs	r3, r2
 800449c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	f003 0301 	and.w	r3, r3, #1
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d040      	beq.n	800452c <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	685b      	ldr	r3, [r3, #4]
 80044ae:	2b01      	cmp	r3, #1
 80044b0:	d107      	bne.n	80044c2 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80044b2:	4b47      	ldr	r3, [pc, #284]	; (80045d0 <HAL_RCC_ClockConfig+0x1c8>)
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d115      	bne.n	80044ea <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80044be:	2301      	movs	r3, #1
 80044c0:	e07f      	b.n	80045c2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	685b      	ldr	r3, [r3, #4]
 80044c6:	2b02      	cmp	r3, #2
 80044c8:	d107      	bne.n	80044da <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80044ca:	4b41      	ldr	r3, [pc, #260]	; (80045d0 <HAL_RCC_ClockConfig+0x1c8>)
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d109      	bne.n	80044ea <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80044d6:	2301      	movs	r3, #1
 80044d8:	e073      	b.n	80045c2 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80044da:	4b3d      	ldr	r3, [pc, #244]	; (80045d0 <HAL_RCC_ClockConfig+0x1c8>)
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	f003 0302 	and.w	r3, r3, #2
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d101      	bne.n	80044ea <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80044e6:	2301      	movs	r3, #1
 80044e8:	e06b      	b.n	80045c2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80044ea:	4b39      	ldr	r3, [pc, #228]	; (80045d0 <HAL_RCC_ClockConfig+0x1c8>)
 80044ec:	689b      	ldr	r3, [r3, #8]
 80044ee:	f023 0203 	bic.w	r2, r3, #3
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	685b      	ldr	r3, [r3, #4]
 80044f6:	4936      	ldr	r1, [pc, #216]	; (80045d0 <HAL_RCC_ClockConfig+0x1c8>)
 80044f8:	4313      	orrs	r3, r2
 80044fa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80044fc:	f7fe f88c 	bl	8002618 <HAL_GetTick>
 8004500:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004502:	e00a      	b.n	800451a <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004504:	f7fe f888 	bl	8002618 <HAL_GetTick>
 8004508:	4602      	mov	r2, r0
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	1ad3      	subs	r3, r2, r3
 800450e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004512:	4293      	cmp	r3, r2
 8004514:	d901      	bls.n	800451a <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8004516:	2303      	movs	r3, #3
 8004518:	e053      	b.n	80045c2 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800451a:	4b2d      	ldr	r3, [pc, #180]	; (80045d0 <HAL_RCC_ClockConfig+0x1c8>)
 800451c:	689b      	ldr	r3, [r3, #8]
 800451e:	f003 020c 	and.w	r2, r3, #12
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	685b      	ldr	r3, [r3, #4]
 8004526:	009b      	lsls	r3, r3, #2
 8004528:	429a      	cmp	r2, r3
 800452a:	d1eb      	bne.n	8004504 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800452c:	4b27      	ldr	r3, [pc, #156]	; (80045cc <HAL_RCC_ClockConfig+0x1c4>)
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	f003 030f 	and.w	r3, r3, #15
 8004534:	683a      	ldr	r2, [r7, #0]
 8004536:	429a      	cmp	r2, r3
 8004538:	d210      	bcs.n	800455c <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800453a:	4b24      	ldr	r3, [pc, #144]	; (80045cc <HAL_RCC_ClockConfig+0x1c4>)
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	f023 020f 	bic.w	r2, r3, #15
 8004542:	4922      	ldr	r1, [pc, #136]	; (80045cc <HAL_RCC_ClockConfig+0x1c4>)
 8004544:	683b      	ldr	r3, [r7, #0]
 8004546:	4313      	orrs	r3, r2
 8004548:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800454a:	4b20      	ldr	r3, [pc, #128]	; (80045cc <HAL_RCC_ClockConfig+0x1c4>)
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	f003 030f 	and.w	r3, r3, #15
 8004552:	683a      	ldr	r2, [r7, #0]
 8004554:	429a      	cmp	r2, r3
 8004556:	d001      	beq.n	800455c <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8004558:	2301      	movs	r3, #1
 800455a:	e032      	b.n	80045c2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	f003 0304 	and.w	r3, r3, #4
 8004564:	2b00      	cmp	r3, #0
 8004566:	d008      	beq.n	800457a <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004568:	4b19      	ldr	r3, [pc, #100]	; (80045d0 <HAL_RCC_ClockConfig+0x1c8>)
 800456a:	689b      	ldr	r3, [r3, #8]
 800456c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	68db      	ldr	r3, [r3, #12]
 8004574:	4916      	ldr	r1, [pc, #88]	; (80045d0 <HAL_RCC_ClockConfig+0x1c8>)
 8004576:	4313      	orrs	r3, r2
 8004578:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	f003 0308 	and.w	r3, r3, #8
 8004582:	2b00      	cmp	r3, #0
 8004584:	d009      	beq.n	800459a <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004586:	4b12      	ldr	r3, [pc, #72]	; (80045d0 <HAL_RCC_ClockConfig+0x1c8>)
 8004588:	689b      	ldr	r3, [r3, #8]
 800458a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	691b      	ldr	r3, [r3, #16]
 8004592:	00db      	lsls	r3, r3, #3
 8004594:	490e      	ldr	r1, [pc, #56]	; (80045d0 <HAL_RCC_ClockConfig+0x1c8>)
 8004596:	4313      	orrs	r3, r2
 8004598:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800459a:	f000 f821 	bl	80045e0 <HAL_RCC_GetSysClockFreq>
 800459e:	4602      	mov	r2, r0
 80045a0:	4b0b      	ldr	r3, [pc, #44]	; (80045d0 <HAL_RCC_ClockConfig+0x1c8>)
 80045a2:	689b      	ldr	r3, [r3, #8]
 80045a4:	091b      	lsrs	r3, r3, #4
 80045a6:	f003 030f 	and.w	r3, r3, #15
 80045aa:	490a      	ldr	r1, [pc, #40]	; (80045d4 <HAL_RCC_ClockConfig+0x1cc>)
 80045ac:	5ccb      	ldrb	r3, [r1, r3]
 80045ae:	fa22 f303 	lsr.w	r3, r2, r3
 80045b2:	4a09      	ldr	r2, [pc, #36]	; (80045d8 <HAL_RCC_ClockConfig+0x1d0>)
 80045b4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80045b6:	4b09      	ldr	r3, [pc, #36]	; (80045dc <HAL_RCC_ClockConfig+0x1d4>)
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	4618      	mov	r0, r3
 80045bc:	f7fc ffc6 	bl	800154c <HAL_InitTick>

  return HAL_OK;
 80045c0:	2300      	movs	r3, #0
}
 80045c2:	4618      	mov	r0, r3
 80045c4:	3710      	adds	r7, #16
 80045c6:	46bd      	mov	sp, r7
 80045c8:	bd80      	pop	{r7, pc}
 80045ca:	bf00      	nop
 80045cc:	40023c00 	.word	0x40023c00
 80045d0:	40023800 	.word	0x40023800
 80045d4:	080071c4 	.word	0x080071c4
 80045d8:	20000014 	.word	0x20000014
 80045dc:	200003b8 	.word	0x200003b8

080045e0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80045e0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80045e4:	b090      	sub	sp, #64	; 0x40
 80045e6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80045e8:	2300      	movs	r3, #0
 80045ea:	637b      	str	r3, [r7, #52]	; 0x34
 80045ec:	2300      	movs	r3, #0
 80045ee:	63fb      	str	r3, [r7, #60]	; 0x3c
 80045f0:	2300      	movs	r3, #0
 80045f2:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0;
 80045f4:	2300      	movs	r3, #0
 80045f6:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80045f8:	4b59      	ldr	r3, [pc, #356]	; (8004760 <HAL_RCC_GetSysClockFreq+0x180>)
 80045fa:	689b      	ldr	r3, [r3, #8]
 80045fc:	f003 030c 	and.w	r3, r3, #12
 8004600:	2b08      	cmp	r3, #8
 8004602:	d00d      	beq.n	8004620 <HAL_RCC_GetSysClockFreq+0x40>
 8004604:	2b08      	cmp	r3, #8
 8004606:	f200 80a1 	bhi.w	800474c <HAL_RCC_GetSysClockFreq+0x16c>
 800460a:	2b00      	cmp	r3, #0
 800460c:	d002      	beq.n	8004614 <HAL_RCC_GetSysClockFreq+0x34>
 800460e:	2b04      	cmp	r3, #4
 8004610:	d003      	beq.n	800461a <HAL_RCC_GetSysClockFreq+0x3a>
 8004612:	e09b      	b.n	800474c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004614:	4b53      	ldr	r3, [pc, #332]	; (8004764 <HAL_RCC_GetSysClockFreq+0x184>)
 8004616:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004618:	e09b      	b.n	8004752 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800461a:	4b53      	ldr	r3, [pc, #332]	; (8004768 <HAL_RCC_GetSysClockFreq+0x188>)
 800461c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800461e:	e098      	b.n	8004752 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004620:	4b4f      	ldr	r3, [pc, #316]	; (8004760 <HAL_RCC_GetSysClockFreq+0x180>)
 8004622:	685b      	ldr	r3, [r3, #4]
 8004624:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004628:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800462a:	4b4d      	ldr	r3, [pc, #308]	; (8004760 <HAL_RCC_GetSysClockFreq+0x180>)
 800462c:	685b      	ldr	r3, [r3, #4]
 800462e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004632:	2b00      	cmp	r3, #0
 8004634:	d028      	beq.n	8004688 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004636:	4b4a      	ldr	r3, [pc, #296]	; (8004760 <HAL_RCC_GetSysClockFreq+0x180>)
 8004638:	685b      	ldr	r3, [r3, #4]
 800463a:	099b      	lsrs	r3, r3, #6
 800463c:	2200      	movs	r2, #0
 800463e:	623b      	str	r3, [r7, #32]
 8004640:	627a      	str	r2, [r7, #36]	; 0x24
 8004642:	6a3b      	ldr	r3, [r7, #32]
 8004644:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8004648:	2100      	movs	r1, #0
 800464a:	4b47      	ldr	r3, [pc, #284]	; (8004768 <HAL_RCC_GetSysClockFreq+0x188>)
 800464c:	fb03 f201 	mul.w	r2, r3, r1
 8004650:	2300      	movs	r3, #0
 8004652:	fb00 f303 	mul.w	r3, r0, r3
 8004656:	4413      	add	r3, r2
 8004658:	4a43      	ldr	r2, [pc, #268]	; (8004768 <HAL_RCC_GetSysClockFreq+0x188>)
 800465a:	fba0 1202 	umull	r1, r2, r0, r2
 800465e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004660:	460a      	mov	r2, r1
 8004662:	62ba      	str	r2, [r7, #40]	; 0x28
 8004664:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004666:	4413      	add	r3, r2
 8004668:	62fb      	str	r3, [r7, #44]	; 0x2c
 800466a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800466c:	2200      	movs	r2, #0
 800466e:	61bb      	str	r3, [r7, #24]
 8004670:	61fa      	str	r2, [r7, #28]
 8004672:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004676:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800467a:	f7fb fdc9 	bl	8000210 <__aeabi_uldivmod>
 800467e:	4602      	mov	r2, r0
 8004680:	460b      	mov	r3, r1
 8004682:	4613      	mov	r3, r2
 8004684:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004686:	e053      	b.n	8004730 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004688:	4b35      	ldr	r3, [pc, #212]	; (8004760 <HAL_RCC_GetSysClockFreq+0x180>)
 800468a:	685b      	ldr	r3, [r3, #4]
 800468c:	099b      	lsrs	r3, r3, #6
 800468e:	2200      	movs	r2, #0
 8004690:	613b      	str	r3, [r7, #16]
 8004692:	617a      	str	r2, [r7, #20]
 8004694:	693b      	ldr	r3, [r7, #16]
 8004696:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800469a:	f04f 0b00 	mov.w	fp, #0
 800469e:	4652      	mov	r2, sl
 80046a0:	465b      	mov	r3, fp
 80046a2:	f04f 0000 	mov.w	r0, #0
 80046a6:	f04f 0100 	mov.w	r1, #0
 80046aa:	0159      	lsls	r1, r3, #5
 80046ac:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80046b0:	0150      	lsls	r0, r2, #5
 80046b2:	4602      	mov	r2, r0
 80046b4:	460b      	mov	r3, r1
 80046b6:	ebb2 080a 	subs.w	r8, r2, sl
 80046ba:	eb63 090b 	sbc.w	r9, r3, fp
 80046be:	f04f 0200 	mov.w	r2, #0
 80046c2:	f04f 0300 	mov.w	r3, #0
 80046c6:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80046ca:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80046ce:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80046d2:	ebb2 0408 	subs.w	r4, r2, r8
 80046d6:	eb63 0509 	sbc.w	r5, r3, r9
 80046da:	f04f 0200 	mov.w	r2, #0
 80046de:	f04f 0300 	mov.w	r3, #0
 80046e2:	00eb      	lsls	r3, r5, #3
 80046e4:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80046e8:	00e2      	lsls	r2, r4, #3
 80046ea:	4614      	mov	r4, r2
 80046ec:	461d      	mov	r5, r3
 80046ee:	eb14 030a 	adds.w	r3, r4, sl
 80046f2:	603b      	str	r3, [r7, #0]
 80046f4:	eb45 030b 	adc.w	r3, r5, fp
 80046f8:	607b      	str	r3, [r7, #4]
 80046fa:	f04f 0200 	mov.w	r2, #0
 80046fe:	f04f 0300 	mov.w	r3, #0
 8004702:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004706:	4629      	mov	r1, r5
 8004708:	028b      	lsls	r3, r1, #10
 800470a:	4621      	mov	r1, r4
 800470c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004710:	4621      	mov	r1, r4
 8004712:	028a      	lsls	r2, r1, #10
 8004714:	4610      	mov	r0, r2
 8004716:	4619      	mov	r1, r3
 8004718:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800471a:	2200      	movs	r2, #0
 800471c:	60bb      	str	r3, [r7, #8]
 800471e:	60fa      	str	r2, [r7, #12]
 8004720:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004724:	f7fb fd74 	bl	8000210 <__aeabi_uldivmod>
 8004728:	4602      	mov	r2, r0
 800472a:	460b      	mov	r3, r1
 800472c:	4613      	mov	r3, r2
 800472e:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8004730:	4b0b      	ldr	r3, [pc, #44]	; (8004760 <HAL_RCC_GetSysClockFreq+0x180>)
 8004732:	685b      	ldr	r3, [r3, #4]
 8004734:	0c1b      	lsrs	r3, r3, #16
 8004736:	f003 0303 	and.w	r3, r3, #3
 800473a:	3301      	adds	r3, #1
 800473c:	005b      	lsls	r3, r3, #1
 800473e:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco / pllp;
 8004740:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004742:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004744:	fbb2 f3f3 	udiv	r3, r2, r3
 8004748:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800474a:	e002      	b.n	8004752 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800474c:	4b05      	ldr	r3, [pc, #20]	; (8004764 <HAL_RCC_GetSysClockFreq+0x184>)
 800474e:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004750:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004752:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8004754:	4618      	mov	r0, r3
 8004756:	3740      	adds	r7, #64	; 0x40
 8004758:	46bd      	mov	sp, r7
 800475a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800475e:	bf00      	nop
 8004760:	40023800 	.word	0x40023800
 8004764:	00f42400 	.word	0x00f42400
 8004768:	016e3600 	.word	0x016e3600

0800476c <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800476c:	b480      	push	{r7}
 800476e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004770:	4b03      	ldr	r3, [pc, #12]	; (8004780 <HAL_RCC_GetHCLKFreq+0x14>)
 8004772:	681b      	ldr	r3, [r3, #0]
}
 8004774:	4618      	mov	r0, r3
 8004776:	46bd      	mov	sp, r7
 8004778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800477c:	4770      	bx	lr
 800477e:	bf00      	nop
 8004780:	20000014 	.word	0x20000014

08004784 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004784:	b580      	push	{r7, lr}
 8004786:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004788:	f7ff fff0 	bl	800476c <HAL_RCC_GetHCLKFreq>
 800478c:	4602      	mov	r2, r0
 800478e:	4b05      	ldr	r3, [pc, #20]	; (80047a4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004790:	689b      	ldr	r3, [r3, #8]
 8004792:	0a9b      	lsrs	r3, r3, #10
 8004794:	f003 0307 	and.w	r3, r3, #7
 8004798:	4903      	ldr	r1, [pc, #12]	; (80047a8 <HAL_RCC_GetPCLK1Freq+0x24>)
 800479a:	5ccb      	ldrb	r3, [r1, r3]
 800479c:	fa22 f303 	lsr.w	r3, r2, r3
}
 80047a0:	4618      	mov	r0, r3
 80047a2:	bd80      	pop	{r7, pc}
 80047a4:	40023800 	.word	0x40023800
 80047a8:	080071d4 	.word	0x080071d4

080047ac <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80047ac:	b480      	push	{r7}
 80047ae:	b083      	sub	sp, #12
 80047b0:	af00      	add	r7, sp, #0
 80047b2:	6078      	str	r0, [r7, #4]
 80047b4:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	220f      	movs	r2, #15
 80047ba:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80047bc:	4b12      	ldr	r3, [pc, #72]	; (8004808 <HAL_RCC_GetClockConfig+0x5c>)
 80047be:	689b      	ldr	r3, [r3, #8]
 80047c0:	f003 0203 	and.w	r2, r3, #3
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80047c8:	4b0f      	ldr	r3, [pc, #60]	; (8004808 <HAL_RCC_GetClockConfig+0x5c>)
 80047ca:	689b      	ldr	r3, [r3, #8]
 80047cc:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80047d4:	4b0c      	ldr	r3, [pc, #48]	; (8004808 <HAL_RCC_GetClockConfig+0x5c>)
 80047d6:	689b      	ldr	r3, [r3, #8]
 80047d8:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 80047e0:	4b09      	ldr	r3, [pc, #36]	; (8004808 <HAL_RCC_GetClockConfig+0x5c>)
 80047e2:	689b      	ldr	r3, [r3, #8]
 80047e4:	08db      	lsrs	r3, r3, #3
 80047e6:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80047ee:	4b07      	ldr	r3, [pc, #28]	; (800480c <HAL_RCC_GetClockConfig+0x60>)
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	f003 020f 	and.w	r2, r3, #15
 80047f6:	683b      	ldr	r3, [r7, #0]
 80047f8:	601a      	str	r2, [r3, #0]
}
 80047fa:	bf00      	nop
 80047fc:	370c      	adds	r7, #12
 80047fe:	46bd      	mov	sp, r7
 8004800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004804:	4770      	bx	lr
 8004806:	bf00      	nop
 8004808:	40023800 	.word	0x40023800
 800480c:	40023c00 	.word	0x40023c00

08004810 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004810:	b580      	push	{r7, lr}
 8004812:	b082      	sub	sp, #8
 8004814:	af00      	add	r7, sp, #0
 8004816:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	2b00      	cmp	r3, #0
 800481c:	d101      	bne.n	8004822 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800481e:	2301      	movs	r3, #1
 8004820:	e049      	b.n	80048b6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004828:	b2db      	uxtb	r3, r3
 800482a:	2b00      	cmp	r3, #0
 800482c:	d106      	bne.n	800483c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	2200      	movs	r2, #0
 8004832:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004836:	6878      	ldr	r0, [r7, #4]
 8004838:	f7fc fdfa 	bl	8001430 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	2202      	movs	r2, #2
 8004840:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681a      	ldr	r2, [r3, #0]
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	3304      	adds	r3, #4
 800484c:	4619      	mov	r1, r3
 800484e:	4610      	mov	r0, r2
 8004850:	f000 fd28 	bl	80052a4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	2201      	movs	r2, #1
 8004858:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	2201      	movs	r2, #1
 8004860:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	2201      	movs	r2, #1
 8004868:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	2201      	movs	r2, #1
 8004870:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	2201      	movs	r2, #1
 8004878:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	2201      	movs	r2, #1
 8004880:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	2201      	movs	r2, #1
 8004888:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	2201      	movs	r2, #1
 8004890:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	2201      	movs	r2, #1
 8004898:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	2201      	movs	r2, #1
 80048a0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	2201      	movs	r2, #1
 80048a8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	2201      	movs	r2, #1
 80048b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80048b4:	2300      	movs	r3, #0
}
 80048b6:	4618      	mov	r0, r3
 80048b8:	3708      	adds	r7, #8
 80048ba:	46bd      	mov	sp, r7
 80048bc:	bd80      	pop	{r7, pc}
	...

080048c0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80048c0:	b480      	push	{r7}
 80048c2:	b085      	sub	sp, #20
 80048c4:	af00      	add	r7, sp, #0
 80048c6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80048ce:	b2db      	uxtb	r3, r3
 80048d0:	2b01      	cmp	r3, #1
 80048d2:	d001      	beq.n	80048d8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80048d4:	2301      	movs	r3, #1
 80048d6:	e054      	b.n	8004982 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	2202      	movs	r2, #2
 80048dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	68da      	ldr	r2, [r3, #12]
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	f042 0201 	orr.w	r2, r2, #1
 80048ee:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	4a26      	ldr	r2, [pc, #152]	; (8004990 <HAL_TIM_Base_Start_IT+0xd0>)
 80048f6:	4293      	cmp	r3, r2
 80048f8:	d022      	beq.n	8004940 <HAL_TIM_Base_Start_IT+0x80>
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004902:	d01d      	beq.n	8004940 <HAL_TIM_Base_Start_IT+0x80>
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	4a22      	ldr	r2, [pc, #136]	; (8004994 <HAL_TIM_Base_Start_IT+0xd4>)
 800490a:	4293      	cmp	r3, r2
 800490c:	d018      	beq.n	8004940 <HAL_TIM_Base_Start_IT+0x80>
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	4a21      	ldr	r2, [pc, #132]	; (8004998 <HAL_TIM_Base_Start_IT+0xd8>)
 8004914:	4293      	cmp	r3, r2
 8004916:	d013      	beq.n	8004940 <HAL_TIM_Base_Start_IT+0x80>
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	4a1f      	ldr	r2, [pc, #124]	; (800499c <HAL_TIM_Base_Start_IT+0xdc>)
 800491e:	4293      	cmp	r3, r2
 8004920:	d00e      	beq.n	8004940 <HAL_TIM_Base_Start_IT+0x80>
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	4a1e      	ldr	r2, [pc, #120]	; (80049a0 <HAL_TIM_Base_Start_IT+0xe0>)
 8004928:	4293      	cmp	r3, r2
 800492a:	d009      	beq.n	8004940 <HAL_TIM_Base_Start_IT+0x80>
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	4a1c      	ldr	r2, [pc, #112]	; (80049a4 <HAL_TIM_Base_Start_IT+0xe4>)
 8004932:	4293      	cmp	r3, r2
 8004934:	d004      	beq.n	8004940 <HAL_TIM_Base_Start_IT+0x80>
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	4a1b      	ldr	r2, [pc, #108]	; (80049a8 <HAL_TIM_Base_Start_IT+0xe8>)
 800493c:	4293      	cmp	r3, r2
 800493e:	d115      	bne.n	800496c <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	689a      	ldr	r2, [r3, #8]
 8004946:	4b19      	ldr	r3, [pc, #100]	; (80049ac <HAL_TIM_Base_Start_IT+0xec>)
 8004948:	4013      	ands	r3, r2
 800494a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	2b06      	cmp	r3, #6
 8004950:	d015      	beq.n	800497e <HAL_TIM_Base_Start_IT+0xbe>
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004958:	d011      	beq.n	800497e <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	681a      	ldr	r2, [r3, #0]
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	f042 0201 	orr.w	r2, r2, #1
 8004968:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800496a:	e008      	b.n	800497e <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	681a      	ldr	r2, [r3, #0]
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	f042 0201 	orr.w	r2, r2, #1
 800497a:	601a      	str	r2, [r3, #0]
 800497c:	e000      	b.n	8004980 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800497e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004980:	2300      	movs	r3, #0
}
 8004982:	4618      	mov	r0, r3
 8004984:	3714      	adds	r7, #20
 8004986:	46bd      	mov	sp, r7
 8004988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800498c:	4770      	bx	lr
 800498e:	bf00      	nop
 8004990:	40010000 	.word	0x40010000
 8004994:	40000400 	.word	0x40000400
 8004998:	40000800 	.word	0x40000800
 800499c:	40000c00 	.word	0x40000c00
 80049a0:	40010400 	.word	0x40010400
 80049a4:	40014000 	.word	0x40014000
 80049a8:	40001800 	.word	0x40001800
 80049ac:	00010007 	.word	0x00010007

080049b0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80049b0:	b580      	push	{r7, lr}
 80049b2:	b082      	sub	sp, #8
 80049b4:	af00      	add	r7, sp, #0
 80049b6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d101      	bne.n	80049c2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80049be:	2301      	movs	r3, #1
 80049c0:	e049      	b.n	8004a56 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80049c8:	b2db      	uxtb	r3, r3
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d106      	bne.n	80049dc <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	2200      	movs	r2, #0
 80049d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80049d6:	6878      	ldr	r0, [r7, #4]
 80049d8:	f000 f841 	bl	8004a5e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	2202      	movs	r2, #2
 80049e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681a      	ldr	r2, [r3, #0]
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	3304      	adds	r3, #4
 80049ec:	4619      	mov	r1, r3
 80049ee:	4610      	mov	r0, r2
 80049f0:	f000 fc58 	bl	80052a4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	2201      	movs	r2, #1
 80049f8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	2201      	movs	r2, #1
 8004a00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	2201      	movs	r2, #1
 8004a08:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	2201      	movs	r2, #1
 8004a10:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	2201      	movs	r2, #1
 8004a18:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	2201      	movs	r2, #1
 8004a20:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	2201      	movs	r2, #1
 8004a28:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	2201      	movs	r2, #1
 8004a30:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	2201      	movs	r2, #1
 8004a38:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	2201      	movs	r2, #1
 8004a40:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	2201      	movs	r2, #1
 8004a48:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	2201      	movs	r2, #1
 8004a50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004a54:	2300      	movs	r3, #0
}
 8004a56:	4618      	mov	r0, r3
 8004a58:	3708      	adds	r7, #8
 8004a5a:	46bd      	mov	sp, r7
 8004a5c:	bd80      	pop	{r7, pc}

08004a5e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004a5e:	b480      	push	{r7}
 8004a60:	b083      	sub	sp, #12
 8004a62:	af00      	add	r7, sp, #0
 8004a64:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004a66:	bf00      	nop
 8004a68:	370c      	adds	r7, #12
 8004a6a:	46bd      	mov	sp, r7
 8004a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a70:	4770      	bx	lr
	...

08004a74 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004a74:	b580      	push	{r7, lr}
 8004a76:	b084      	sub	sp, #16
 8004a78:	af00      	add	r7, sp, #0
 8004a7a:	6078      	str	r0, [r7, #4]
 8004a7c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004a7e:	683b      	ldr	r3, [r7, #0]
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d109      	bne.n	8004a98 <HAL_TIM_PWM_Start+0x24>
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004a8a:	b2db      	uxtb	r3, r3
 8004a8c:	2b01      	cmp	r3, #1
 8004a8e:	bf14      	ite	ne
 8004a90:	2301      	movne	r3, #1
 8004a92:	2300      	moveq	r3, #0
 8004a94:	b2db      	uxtb	r3, r3
 8004a96:	e03c      	b.n	8004b12 <HAL_TIM_PWM_Start+0x9e>
 8004a98:	683b      	ldr	r3, [r7, #0]
 8004a9a:	2b04      	cmp	r3, #4
 8004a9c:	d109      	bne.n	8004ab2 <HAL_TIM_PWM_Start+0x3e>
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004aa4:	b2db      	uxtb	r3, r3
 8004aa6:	2b01      	cmp	r3, #1
 8004aa8:	bf14      	ite	ne
 8004aaa:	2301      	movne	r3, #1
 8004aac:	2300      	moveq	r3, #0
 8004aae:	b2db      	uxtb	r3, r3
 8004ab0:	e02f      	b.n	8004b12 <HAL_TIM_PWM_Start+0x9e>
 8004ab2:	683b      	ldr	r3, [r7, #0]
 8004ab4:	2b08      	cmp	r3, #8
 8004ab6:	d109      	bne.n	8004acc <HAL_TIM_PWM_Start+0x58>
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004abe:	b2db      	uxtb	r3, r3
 8004ac0:	2b01      	cmp	r3, #1
 8004ac2:	bf14      	ite	ne
 8004ac4:	2301      	movne	r3, #1
 8004ac6:	2300      	moveq	r3, #0
 8004ac8:	b2db      	uxtb	r3, r3
 8004aca:	e022      	b.n	8004b12 <HAL_TIM_PWM_Start+0x9e>
 8004acc:	683b      	ldr	r3, [r7, #0]
 8004ace:	2b0c      	cmp	r3, #12
 8004ad0:	d109      	bne.n	8004ae6 <HAL_TIM_PWM_Start+0x72>
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004ad8:	b2db      	uxtb	r3, r3
 8004ada:	2b01      	cmp	r3, #1
 8004adc:	bf14      	ite	ne
 8004ade:	2301      	movne	r3, #1
 8004ae0:	2300      	moveq	r3, #0
 8004ae2:	b2db      	uxtb	r3, r3
 8004ae4:	e015      	b.n	8004b12 <HAL_TIM_PWM_Start+0x9e>
 8004ae6:	683b      	ldr	r3, [r7, #0]
 8004ae8:	2b10      	cmp	r3, #16
 8004aea:	d109      	bne.n	8004b00 <HAL_TIM_PWM_Start+0x8c>
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004af2:	b2db      	uxtb	r3, r3
 8004af4:	2b01      	cmp	r3, #1
 8004af6:	bf14      	ite	ne
 8004af8:	2301      	movne	r3, #1
 8004afa:	2300      	moveq	r3, #0
 8004afc:	b2db      	uxtb	r3, r3
 8004afe:	e008      	b.n	8004b12 <HAL_TIM_PWM_Start+0x9e>
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8004b06:	b2db      	uxtb	r3, r3
 8004b08:	2b01      	cmp	r3, #1
 8004b0a:	bf14      	ite	ne
 8004b0c:	2301      	movne	r3, #1
 8004b0e:	2300      	moveq	r3, #0
 8004b10:	b2db      	uxtb	r3, r3
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d001      	beq.n	8004b1a <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8004b16:	2301      	movs	r3, #1
 8004b18:	e092      	b.n	8004c40 <HAL_TIM_PWM_Start+0x1cc>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004b1a:	683b      	ldr	r3, [r7, #0]
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d104      	bne.n	8004b2a <HAL_TIM_PWM_Start+0xb6>
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	2202      	movs	r2, #2
 8004b24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004b28:	e023      	b.n	8004b72 <HAL_TIM_PWM_Start+0xfe>
 8004b2a:	683b      	ldr	r3, [r7, #0]
 8004b2c:	2b04      	cmp	r3, #4
 8004b2e:	d104      	bne.n	8004b3a <HAL_TIM_PWM_Start+0xc6>
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	2202      	movs	r2, #2
 8004b34:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004b38:	e01b      	b.n	8004b72 <HAL_TIM_PWM_Start+0xfe>
 8004b3a:	683b      	ldr	r3, [r7, #0]
 8004b3c:	2b08      	cmp	r3, #8
 8004b3e:	d104      	bne.n	8004b4a <HAL_TIM_PWM_Start+0xd6>
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	2202      	movs	r2, #2
 8004b44:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004b48:	e013      	b.n	8004b72 <HAL_TIM_PWM_Start+0xfe>
 8004b4a:	683b      	ldr	r3, [r7, #0]
 8004b4c:	2b0c      	cmp	r3, #12
 8004b4e:	d104      	bne.n	8004b5a <HAL_TIM_PWM_Start+0xe6>
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	2202      	movs	r2, #2
 8004b54:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004b58:	e00b      	b.n	8004b72 <HAL_TIM_PWM_Start+0xfe>
 8004b5a:	683b      	ldr	r3, [r7, #0]
 8004b5c:	2b10      	cmp	r3, #16
 8004b5e:	d104      	bne.n	8004b6a <HAL_TIM_PWM_Start+0xf6>
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	2202      	movs	r2, #2
 8004b64:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004b68:	e003      	b.n	8004b72 <HAL_TIM_PWM_Start+0xfe>
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	2202      	movs	r2, #2
 8004b6e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	2201      	movs	r2, #1
 8004b78:	6839      	ldr	r1, [r7, #0]
 8004b7a:	4618      	mov	r0, r3
 8004b7c:	f000 ff2a 	bl	80059d4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	4a30      	ldr	r2, [pc, #192]	; (8004c48 <HAL_TIM_PWM_Start+0x1d4>)
 8004b86:	4293      	cmp	r3, r2
 8004b88:	d004      	beq.n	8004b94 <HAL_TIM_PWM_Start+0x120>
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	4a2f      	ldr	r2, [pc, #188]	; (8004c4c <HAL_TIM_PWM_Start+0x1d8>)
 8004b90:	4293      	cmp	r3, r2
 8004b92:	d101      	bne.n	8004b98 <HAL_TIM_PWM_Start+0x124>
 8004b94:	2301      	movs	r3, #1
 8004b96:	e000      	b.n	8004b9a <HAL_TIM_PWM_Start+0x126>
 8004b98:	2300      	movs	r3, #0
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d007      	beq.n	8004bae <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004bac:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	4a25      	ldr	r2, [pc, #148]	; (8004c48 <HAL_TIM_PWM_Start+0x1d4>)
 8004bb4:	4293      	cmp	r3, r2
 8004bb6:	d022      	beq.n	8004bfe <HAL_TIM_PWM_Start+0x18a>
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004bc0:	d01d      	beq.n	8004bfe <HAL_TIM_PWM_Start+0x18a>
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	4a22      	ldr	r2, [pc, #136]	; (8004c50 <HAL_TIM_PWM_Start+0x1dc>)
 8004bc8:	4293      	cmp	r3, r2
 8004bca:	d018      	beq.n	8004bfe <HAL_TIM_PWM_Start+0x18a>
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	4a20      	ldr	r2, [pc, #128]	; (8004c54 <HAL_TIM_PWM_Start+0x1e0>)
 8004bd2:	4293      	cmp	r3, r2
 8004bd4:	d013      	beq.n	8004bfe <HAL_TIM_PWM_Start+0x18a>
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	4a1f      	ldr	r2, [pc, #124]	; (8004c58 <HAL_TIM_PWM_Start+0x1e4>)
 8004bdc:	4293      	cmp	r3, r2
 8004bde:	d00e      	beq.n	8004bfe <HAL_TIM_PWM_Start+0x18a>
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	4a19      	ldr	r2, [pc, #100]	; (8004c4c <HAL_TIM_PWM_Start+0x1d8>)
 8004be6:	4293      	cmp	r3, r2
 8004be8:	d009      	beq.n	8004bfe <HAL_TIM_PWM_Start+0x18a>
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	4a1b      	ldr	r2, [pc, #108]	; (8004c5c <HAL_TIM_PWM_Start+0x1e8>)
 8004bf0:	4293      	cmp	r3, r2
 8004bf2:	d004      	beq.n	8004bfe <HAL_TIM_PWM_Start+0x18a>
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	4a19      	ldr	r2, [pc, #100]	; (8004c60 <HAL_TIM_PWM_Start+0x1ec>)
 8004bfa:	4293      	cmp	r3, r2
 8004bfc:	d115      	bne.n	8004c2a <HAL_TIM_PWM_Start+0x1b6>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	689a      	ldr	r2, [r3, #8]
 8004c04:	4b17      	ldr	r3, [pc, #92]	; (8004c64 <HAL_TIM_PWM_Start+0x1f0>)
 8004c06:	4013      	ands	r3, r2
 8004c08:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	2b06      	cmp	r3, #6
 8004c0e:	d015      	beq.n	8004c3c <HAL_TIM_PWM_Start+0x1c8>
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004c16:	d011      	beq.n	8004c3c <HAL_TIM_PWM_Start+0x1c8>
    {
      __HAL_TIM_ENABLE(htim);
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	681a      	ldr	r2, [r3, #0]
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	f042 0201 	orr.w	r2, r2, #1
 8004c26:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004c28:	e008      	b.n	8004c3c <HAL_TIM_PWM_Start+0x1c8>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	681a      	ldr	r2, [r3, #0]
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	f042 0201 	orr.w	r2, r2, #1
 8004c38:	601a      	str	r2, [r3, #0]
 8004c3a:	e000      	b.n	8004c3e <HAL_TIM_PWM_Start+0x1ca>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004c3c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004c3e:	2300      	movs	r3, #0
}
 8004c40:	4618      	mov	r0, r3
 8004c42:	3710      	adds	r7, #16
 8004c44:	46bd      	mov	sp, r7
 8004c46:	bd80      	pop	{r7, pc}
 8004c48:	40010000 	.word	0x40010000
 8004c4c:	40010400 	.word	0x40010400
 8004c50:	40000400 	.word	0x40000400
 8004c54:	40000800 	.word	0x40000800
 8004c58:	40000c00 	.word	0x40000c00
 8004c5c:	40014000 	.word	0x40014000
 8004c60:	40001800 	.word	0x40001800
 8004c64:	00010007 	.word	0x00010007

08004c68 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004c68:	b580      	push	{r7, lr}
 8004c6a:	b082      	sub	sp, #8
 8004c6c:	af00      	add	r7, sp, #0
 8004c6e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	691b      	ldr	r3, [r3, #16]
 8004c76:	f003 0302 	and.w	r3, r3, #2
 8004c7a:	2b02      	cmp	r3, #2
 8004c7c:	d122      	bne.n	8004cc4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	68db      	ldr	r3, [r3, #12]
 8004c84:	f003 0302 	and.w	r3, r3, #2
 8004c88:	2b02      	cmp	r3, #2
 8004c8a:	d11b      	bne.n	8004cc4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	f06f 0202 	mvn.w	r2, #2
 8004c94:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	2201      	movs	r2, #1
 8004c9a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	699b      	ldr	r3, [r3, #24]
 8004ca2:	f003 0303 	and.w	r3, r3, #3
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d003      	beq.n	8004cb2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004caa:	6878      	ldr	r0, [r7, #4]
 8004cac:	f000 fadc 	bl	8005268 <HAL_TIM_IC_CaptureCallback>
 8004cb0:	e005      	b.n	8004cbe <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004cb2:	6878      	ldr	r0, [r7, #4]
 8004cb4:	f000 face 	bl	8005254 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004cb8:	6878      	ldr	r0, [r7, #4]
 8004cba:	f000 fadf 	bl	800527c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	2200      	movs	r2, #0
 8004cc2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	691b      	ldr	r3, [r3, #16]
 8004cca:	f003 0304 	and.w	r3, r3, #4
 8004cce:	2b04      	cmp	r3, #4
 8004cd0:	d122      	bne.n	8004d18 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	68db      	ldr	r3, [r3, #12]
 8004cd8:	f003 0304 	and.w	r3, r3, #4
 8004cdc:	2b04      	cmp	r3, #4
 8004cde:	d11b      	bne.n	8004d18 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	f06f 0204 	mvn.w	r2, #4
 8004ce8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	2202      	movs	r2, #2
 8004cee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	699b      	ldr	r3, [r3, #24]
 8004cf6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d003      	beq.n	8004d06 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004cfe:	6878      	ldr	r0, [r7, #4]
 8004d00:	f000 fab2 	bl	8005268 <HAL_TIM_IC_CaptureCallback>
 8004d04:	e005      	b.n	8004d12 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004d06:	6878      	ldr	r0, [r7, #4]
 8004d08:	f000 faa4 	bl	8005254 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004d0c:	6878      	ldr	r0, [r7, #4]
 8004d0e:	f000 fab5 	bl	800527c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	2200      	movs	r2, #0
 8004d16:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	691b      	ldr	r3, [r3, #16]
 8004d1e:	f003 0308 	and.w	r3, r3, #8
 8004d22:	2b08      	cmp	r3, #8
 8004d24:	d122      	bne.n	8004d6c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	68db      	ldr	r3, [r3, #12]
 8004d2c:	f003 0308 	and.w	r3, r3, #8
 8004d30:	2b08      	cmp	r3, #8
 8004d32:	d11b      	bne.n	8004d6c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	f06f 0208 	mvn.w	r2, #8
 8004d3c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	2204      	movs	r2, #4
 8004d42:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	69db      	ldr	r3, [r3, #28]
 8004d4a:	f003 0303 	and.w	r3, r3, #3
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d003      	beq.n	8004d5a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004d52:	6878      	ldr	r0, [r7, #4]
 8004d54:	f000 fa88 	bl	8005268 <HAL_TIM_IC_CaptureCallback>
 8004d58:	e005      	b.n	8004d66 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004d5a:	6878      	ldr	r0, [r7, #4]
 8004d5c:	f000 fa7a 	bl	8005254 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004d60:	6878      	ldr	r0, [r7, #4]
 8004d62:	f000 fa8b 	bl	800527c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	2200      	movs	r2, #0
 8004d6a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	691b      	ldr	r3, [r3, #16]
 8004d72:	f003 0310 	and.w	r3, r3, #16
 8004d76:	2b10      	cmp	r3, #16
 8004d78:	d122      	bne.n	8004dc0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	68db      	ldr	r3, [r3, #12]
 8004d80:	f003 0310 	and.w	r3, r3, #16
 8004d84:	2b10      	cmp	r3, #16
 8004d86:	d11b      	bne.n	8004dc0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	f06f 0210 	mvn.w	r2, #16
 8004d90:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	2208      	movs	r2, #8
 8004d96:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	69db      	ldr	r3, [r3, #28]
 8004d9e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d003      	beq.n	8004dae <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004da6:	6878      	ldr	r0, [r7, #4]
 8004da8:	f000 fa5e 	bl	8005268 <HAL_TIM_IC_CaptureCallback>
 8004dac:	e005      	b.n	8004dba <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004dae:	6878      	ldr	r0, [r7, #4]
 8004db0:	f000 fa50 	bl	8005254 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004db4:	6878      	ldr	r0, [r7, #4]
 8004db6:	f000 fa61 	bl	800527c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	2200      	movs	r2, #0
 8004dbe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	691b      	ldr	r3, [r3, #16]
 8004dc6:	f003 0301 	and.w	r3, r3, #1
 8004dca:	2b01      	cmp	r3, #1
 8004dcc:	d10e      	bne.n	8004dec <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	68db      	ldr	r3, [r3, #12]
 8004dd4:	f003 0301 	and.w	r3, r3, #1
 8004dd8:	2b01      	cmp	r3, #1
 8004dda:	d107      	bne.n	8004dec <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	f06f 0201 	mvn.w	r2, #1
 8004de4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004de6:	6878      	ldr	r0, [r7, #4]
 8004de8:	f7fc f9e4 	bl	80011b4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	691b      	ldr	r3, [r3, #16]
 8004df2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004df6:	2b80      	cmp	r3, #128	; 0x80
 8004df8:	d10e      	bne.n	8004e18 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	68db      	ldr	r3, [r3, #12]
 8004e00:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e04:	2b80      	cmp	r3, #128	; 0x80
 8004e06:	d107      	bne.n	8004e18 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004e10:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004e12:	6878      	ldr	r0, [r7, #4]
 8004e14:	f000 ff1a 	bl	8005c4c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	691b      	ldr	r3, [r3, #16]
 8004e1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e22:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004e26:	d10e      	bne.n	8004e46 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	68db      	ldr	r3, [r3, #12]
 8004e2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e32:	2b80      	cmp	r3, #128	; 0x80
 8004e34:	d107      	bne.n	8004e46 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004e3e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004e40:	6878      	ldr	r0, [r7, #4]
 8004e42:	f000 ff0d 	bl	8005c60 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	691b      	ldr	r3, [r3, #16]
 8004e4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e50:	2b40      	cmp	r3, #64	; 0x40
 8004e52:	d10e      	bne.n	8004e72 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	68db      	ldr	r3, [r3, #12]
 8004e5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e5e:	2b40      	cmp	r3, #64	; 0x40
 8004e60:	d107      	bne.n	8004e72 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004e6a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004e6c:	6878      	ldr	r0, [r7, #4]
 8004e6e:	f000 fa0f 	bl	8005290 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	691b      	ldr	r3, [r3, #16]
 8004e78:	f003 0320 	and.w	r3, r3, #32
 8004e7c:	2b20      	cmp	r3, #32
 8004e7e:	d10e      	bne.n	8004e9e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	68db      	ldr	r3, [r3, #12]
 8004e86:	f003 0320 	and.w	r3, r3, #32
 8004e8a:	2b20      	cmp	r3, #32
 8004e8c:	d107      	bne.n	8004e9e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	f06f 0220 	mvn.w	r2, #32
 8004e96:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004e98:	6878      	ldr	r0, [r7, #4]
 8004e9a:	f000 fecd 	bl	8005c38 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004e9e:	bf00      	nop
 8004ea0:	3708      	adds	r7, #8
 8004ea2:	46bd      	mov	sp, r7
 8004ea4:	bd80      	pop	{r7, pc}
	...

08004ea8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004ea8:	b580      	push	{r7, lr}
 8004eaa:	b084      	sub	sp, #16
 8004eac:	af00      	add	r7, sp, #0
 8004eae:	60f8      	str	r0, [r7, #12]
 8004eb0:	60b9      	str	r1, [r7, #8]
 8004eb2:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004eba:	2b01      	cmp	r3, #1
 8004ebc:	d101      	bne.n	8004ec2 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8004ebe:	2302      	movs	r3, #2
 8004ec0:	e0fd      	b.n	80050be <HAL_TIM_PWM_ConfigChannel+0x216>
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	2201      	movs	r2, #1
 8004ec6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	2b14      	cmp	r3, #20
 8004ece:	f200 80f0 	bhi.w	80050b2 <HAL_TIM_PWM_ConfigChannel+0x20a>
 8004ed2:	a201      	add	r2, pc, #4	; (adr r2, 8004ed8 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8004ed4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ed8:	08004f2d 	.word	0x08004f2d
 8004edc:	080050b3 	.word	0x080050b3
 8004ee0:	080050b3 	.word	0x080050b3
 8004ee4:	080050b3 	.word	0x080050b3
 8004ee8:	08004f6d 	.word	0x08004f6d
 8004eec:	080050b3 	.word	0x080050b3
 8004ef0:	080050b3 	.word	0x080050b3
 8004ef4:	080050b3 	.word	0x080050b3
 8004ef8:	08004faf 	.word	0x08004faf
 8004efc:	080050b3 	.word	0x080050b3
 8004f00:	080050b3 	.word	0x080050b3
 8004f04:	080050b3 	.word	0x080050b3
 8004f08:	08004fef 	.word	0x08004fef
 8004f0c:	080050b3 	.word	0x080050b3
 8004f10:	080050b3 	.word	0x080050b3
 8004f14:	080050b3 	.word	0x080050b3
 8004f18:	08005031 	.word	0x08005031
 8004f1c:	080050b3 	.word	0x080050b3
 8004f20:	080050b3 	.word	0x080050b3
 8004f24:	080050b3 	.word	0x080050b3
 8004f28:	08005071 	.word	0x08005071
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	68b9      	ldr	r1, [r7, #8]
 8004f32:	4618      	mov	r0, r3
 8004f34:	f000 fa56 	bl	80053e4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	699a      	ldr	r2, [r3, #24]
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	f042 0208 	orr.w	r2, r2, #8
 8004f46:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	699a      	ldr	r2, [r3, #24]
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	f022 0204 	bic.w	r2, r2, #4
 8004f56:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	6999      	ldr	r1, [r3, #24]
 8004f5e:	68bb      	ldr	r3, [r7, #8]
 8004f60:	691a      	ldr	r2, [r3, #16]
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	430a      	orrs	r2, r1
 8004f68:	619a      	str	r2, [r3, #24]
      break;
 8004f6a:	e0a3      	b.n	80050b4 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	68b9      	ldr	r1, [r7, #8]
 8004f72:	4618      	mov	r0, r3
 8004f74:	f000 faa8 	bl	80054c8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	699a      	ldr	r2, [r3, #24]
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004f86:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	699a      	ldr	r2, [r3, #24]
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004f96:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	6999      	ldr	r1, [r3, #24]
 8004f9e:	68bb      	ldr	r3, [r7, #8]
 8004fa0:	691b      	ldr	r3, [r3, #16]
 8004fa2:	021a      	lsls	r2, r3, #8
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	430a      	orrs	r2, r1
 8004faa:	619a      	str	r2, [r3, #24]
      break;
 8004fac:	e082      	b.n	80050b4 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	68b9      	ldr	r1, [r7, #8]
 8004fb4:	4618      	mov	r0, r3
 8004fb6:	f000 faff 	bl	80055b8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	69da      	ldr	r2, [r3, #28]
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	f042 0208 	orr.w	r2, r2, #8
 8004fc8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	69da      	ldr	r2, [r3, #28]
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	f022 0204 	bic.w	r2, r2, #4
 8004fd8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	69d9      	ldr	r1, [r3, #28]
 8004fe0:	68bb      	ldr	r3, [r7, #8]
 8004fe2:	691a      	ldr	r2, [r3, #16]
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	430a      	orrs	r2, r1
 8004fea:	61da      	str	r2, [r3, #28]
      break;
 8004fec:	e062      	b.n	80050b4 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	68b9      	ldr	r1, [r7, #8]
 8004ff4:	4618      	mov	r0, r3
 8004ff6:	f000 fb55 	bl	80056a4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	69da      	ldr	r2, [r3, #28]
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005008:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	69da      	ldr	r2, [r3, #28]
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005018:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	69d9      	ldr	r1, [r3, #28]
 8005020:	68bb      	ldr	r3, [r7, #8]
 8005022:	691b      	ldr	r3, [r3, #16]
 8005024:	021a      	lsls	r2, r3, #8
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	430a      	orrs	r2, r1
 800502c:	61da      	str	r2, [r3, #28]
      break;
 800502e:	e041      	b.n	80050b4 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	68b9      	ldr	r1, [r7, #8]
 8005036:	4618      	mov	r0, r3
 8005038:	f000 fb8c 	bl	8005754 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	f042 0208 	orr.w	r2, r2, #8
 800504a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	f022 0204 	bic.w	r2, r2, #4
 800505a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005062:	68bb      	ldr	r3, [r7, #8]
 8005064:	691a      	ldr	r2, [r3, #16]
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	430a      	orrs	r2, r1
 800506c:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800506e:	e021      	b.n	80050b4 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	68b9      	ldr	r1, [r7, #8]
 8005076:	4618      	mov	r0, r3
 8005078:	f000 fbbe 	bl	80057f8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800508a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800509a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80050a2:	68bb      	ldr	r3, [r7, #8]
 80050a4:	691b      	ldr	r3, [r3, #16]
 80050a6:	021a      	lsls	r2, r3, #8
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	430a      	orrs	r2, r1
 80050ae:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80050b0:	e000      	b.n	80050b4 <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 80050b2:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	2200      	movs	r2, #0
 80050b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80050bc:	2300      	movs	r3, #0
}
 80050be:	4618      	mov	r0, r3
 80050c0:	3710      	adds	r7, #16
 80050c2:	46bd      	mov	sp, r7
 80050c4:	bd80      	pop	{r7, pc}
 80050c6:	bf00      	nop

080050c8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80050c8:	b580      	push	{r7, lr}
 80050ca:	b084      	sub	sp, #16
 80050cc:	af00      	add	r7, sp, #0
 80050ce:	6078      	str	r0, [r7, #4]
 80050d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80050d8:	2b01      	cmp	r3, #1
 80050da:	d101      	bne.n	80050e0 <HAL_TIM_ConfigClockSource+0x18>
 80050dc:	2302      	movs	r3, #2
 80050de:	e0b3      	b.n	8005248 <HAL_TIM_ConfigClockSource+0x180>
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	2201      	movs	r2, #1
 80050e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	2202      	movs	r2, #2
 80050ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	689b      	ldr	r3, [r3, #8]
 80050f6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80050f8:	68fa      	ldr	r2, [r7, #12]
 80050fa:	4b55      	ldr	r3, [pc, #340]	; (8005250 <HAL_TIM_ConfigClockSource+0x188>)
 80050fc:	4013      	ands	r3, r2
 80050fe:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005106:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	68fa      	ldr	r2, [r7, #12]
 800510e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005110:	683b      	ldr	r3, [r7, #0]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005118:	d03e      	beq.n	8005198 <HAL_TIM_ConfigClockSource+0xd0>
 800511a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800511e:	f200 8087 	bhi.w	8005230 <HAL_TIM_ConfigClockSource+0x168>
 8005122:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005126:	f000 8085 	beq.w	8005234 <HAL_TIM_ConfigClockSource+0x16c>
 800512a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800512e:	d87f      	bhi.n	8005230 <HAL_TIM_ConfigClockSource+0x168>
 8005130:	2b70      	cmp	r3, #112	; 0x70
 8005132:	d01a      	beq.n	800516a <HAL_TIM_ConfigClockSource+0xa2>
 8005134:	2b70      	cmp	r3, #112	; 0x70
 8005136:	d87b      	bhi.n	8005230 <HAL_TIM_ConfigClockSource+0x168>
 8005138:	2b60      	cmp	r3, #96	; 0x60
 800513a:	d050      	beq.n	80051de <HAL_TIM_ConfigClockSource+0x116>
 800513c:	2b60      	cmp	r3, #96	; 0x60
 800513e:	d877      	bhi.n	8005230 <HAL_TIM_ConfigClockSource+0x168>
 8005140:	2b50      	cmp	r3, #80	; 0x50
 8005142:	d03c      	beq.n	80051be <HAL_TIM_ConfigClockSource+0xf6>
 8005144:	2b50      	cmp	r3, #80	; 0x50
 8005146:	d873      	bhi.n	8005230 <HAL_TIM_ConfigClockSource+0x168>
 8005148:	2b40      	cmp	r3, #64	; 0x40
 800514a:	d058      	beq.n	80051fe <HAL_TIM_ConfigClockSource+0x136>
 800514c:	2b40      	cmp	r3, #64	; 0x40
 800514e:	d86f      	bhi.n	8005230 <HAL_TIM_ConfigClockSource+0x168>
 8005150:	2b30      	cmp	r3, #48	; 0x30
 8005152:	d064      	beq.n	800521e <HAL_TIM_ConfigClockSource+0x156>
 8005154:	2b30      	cmp	r3, #48	; 0x30
 8005156:	d86b      	bhi.n	8005230 <HAL_TIM_ConfigClockSource+0x168>
 8005158:	2b20      	cmp	r3, #32
 800515a:	d060      	beq.n	800521e <HAL_TIM_ConfigClockSource+0x156>
 800515c:	2b20      	cmp	r3, #32
 800515e:	d867      	bhi.n	8005230 <HAL_TIM_ConfigClockSource+0x168>
 8005160:	2b00      	cmp	r3, #0
 8005162:	d05c      	beq.n	800521e <HAL_TIM_ConfigClockSource+0x156>
 8005164:	2b10      	cmp	r3, #16
 8005166:	d05a      	beq.n	800521e <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8005168:	e062      	b.n	8005230 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	6818      	ldr	r0, [r3, #0]
 800516e:	683b      	ldr	r3, [r7, #0]
 8005170:	6899      	ldr	r1, [r3, #8]
 8005172:	683b      	ldr	r3, [r7, #0]
 8005174:	685a      	ldr	r2, [r3, #4]
 8005176:	683b      	ldr	r3, [r7, #0]
 8005178:	68db      	ldr	r3, [r3, #12]
 800517a:	f000 fc0b 	bl	8005994 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	689b      	ldr	r3, [r3, #8]
 8005184:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800518c:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	68fa      	ldr	r2, [r7, #12]
 8005194:	609a      	str	r2, [r3, #8]
      break;
 8005196:	e04e      	b.n	8005236 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	6818      	ldr	r0, [r3, #0]
 800519c:	683b      	ldr	r3, [r7, #0]
 800519e:	6899      	ldr	r1, [r3, #8]
 80051a0:	683b      	ldr	r3, [r7, #0]
 80051a2:	685a      	ldr	r2, [r3, #4]
 80051a4:	683b      	ldr	r3, [r7, #0]
 80051a6:	68db      	ldr	r3, [r3, #12]
 80051a8:	f000 fbf4 	bl	8005994 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	689a      	ldr	r2, [r3, #8]
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80051ba:	609a      	str	r2, [r3, #8]
      break;
 80051bc:	e03b      	b.n	8005236 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	6818      	ldr	r0, [r3, #0]
 80051c2:	683b      	ldr	r3, [r7, #0]
 80051c4:	6859      	ldr	r1, [r3, #4]
 80051c6:	683b      	ldr	r3, [r7, #0]
 80051c8:	68db      	ldr	r3, [r3, #12]
 80051ca:	461a      	mov	r2, r3
 80051cc:	f000 fb68 	bl	80058a0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	2150      	movs	r1, #80	; 0x50
 80051d6:	4618      	mov	r0, r3
 80051d8:	f000 fbc1 	bl	800595e <TIM_ITRx_SetConfig>
      break;
 80051dc:	e02b      	b.n	8005236 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	6818      	ldr	r0, [r3, #0]
 80051e2:	683b      	ldr	r3, [r7, #0]
 80051e4:	6859      	ldr	r1, [r3, #4]
 80051e6:	683b      	ldr	r3, [r7, #0]
 80051e8:	68db      	ldr	r3, [r3, #12]
 80051ea:	461a      	mov	r2, r3
 80051ec:	f000 fb87 	bl	80058fe <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	2160      	movs	r1, #96	; 0x60
 80051f6:	4618      	mov	r0, r3
 80051f8:	f000 fbb1 	bl	800595e <TIM_ITRx_SetConfig>
      break;
 80051fc:	e01b      	b.n	8005236 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	6818      	ldr	r0, [r3, #0]
 8005202:	683b      	ldr	r3, [r7, #0]
 8005204:	6859      	ldr	r1, [r3, #4]
 8005206:	683b      	ldr	r3, [r7, #0]
 8005208:	68db      	ldr	r3, [r3, #12]
 800520a:	461a      	mov	r2, r3
 800520c:	f000 fb48 	bl	80058a0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	2140      	movs	r1, #64	; 0x40
 8005216:	4618      	mov	r0, r3
 8005218:	f000 fba1 	bl	800595e <TIM_ITRx_SetConfig>
      break;
 800521c:	e00b      	b.n	8005236 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	681a      	ldr	r2, [r3, #0]
 8005222:	683b      	ldr	r3, [r7, #0]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	4619      	mov	r1, r3
 8005228:	4610      	mov	r0, r2
 800522a:	f000 fb98 	bl	800595e <TIM_ITRx_SetConfig>
        break;
 800522e:	e002      	b.n	8005236 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8005230:	bf00      	nop
 8005232:	e000      	b.n	8005236 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8005234:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	2201      	movs	r2, #1
 800523a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	2200      	movs	r2, #0
 8005242:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005246:	2300      	movs	r3, #0
}
 8005248:	4618      	mov	r0, r3
 800524a:	3710      	adds	r7, #16
 800524c:	46bd      	mov	sp, r7
 800524e:	bd80      	pop	{r7, pc}
 8005250:	fffeff88 	.word	0xfffeff88

08005254 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005254:	b480      	push	{r7}
 8005256:	b083      	sub	sp, #12
 8005258:	af00      	add	r7, sp, #0
 800525a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800525c:	bf00      	nop
 800525e:	370c      	adds	r7, #12
 8005260:	46bd      	mov	sp, r7
 8005262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005266:	4770      	bx	lr

08005268 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005268:	b480      	push	{r7}
 800526a:	b083      	sub	sp, #12
 800526c:	af00      	add	r7, sp, #0
 800526e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005270:	bf00      	nop
 8005272:	370c      	adds	r7, #12
 8005274:	46bd      	mov	sp, r7
 8005276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800527a:	4770      	bx	lr

0800527c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800527c:	b480      	push	{r7}
 800527e:	b083      	sub	sp, #12
 8005280:	af00      	add	r7, sp, #0
 8005282:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005284:	bf00      	nop
 8005286:	370c      	adds	r7, #12
 8005288:	46bd      	mov	sp, r7
 800528a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800528e:	4770      	bx	lr

08005290 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005290:	b480      	push	{r7}
 8005292:	b083      	sub	sp, #12
 8005294:	af00      	add	r7, sp, #0
 8005296:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005298:	bf00      	nop
 800529a:	370c      	adds	r7, #12
 800529c:	46bd      	mov	sp, r7
 800529e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052a2:	4770      	bx	lr

080052a4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80052a4:	b480      	push	{r7}
 80052a6:	b085      	sub	sp, #20
 80052a8:	af00      	add	r7, sp, #0
 80052aa:	6078      	str	r0, [r7, #4]
 80052ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	4a40      	ldr	r2, [pc, #256]	; (80053b8 <TIM_Base_SetConfig+0x114>)
 80052b8:	4293      	cmp	r3, r2
 80052ba:	d013      	beq.n	80052e4 <TIM_Base_SetConfig+0x40>
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80052c2:	d00f      	beq.n	80052e4 <TIM_Base_SetConfig+0x40>
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	4a3d      	ldr	r2, [pc, #244]	; (80053bc <TIM_Base_SetConfig+0x118>)
 80052c8:	4293      	cmp	r3, r2
 80052ca:	d00b      	beq.n	80052e4 <TIM_Base_SetConfig+0x40>
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	4a3c      	ldr	r2, [pc, #240]	; (80053c0 <TIM_Base_SetConfig+0x11c>)
 80052d0:	4293      	cmp	r3, r2
 80052d2:	d007      	beq.n	80052e4 <TIM_Base_SetConfig+0x40>
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	4a3b      	ldr	r2, [pc, #236]	; (80053c4 <TIM_Base_SetConfig+0x120>)
 80052d8:	4293      	cmp	r3, r2
 80052da:	d003      	beq.n	80052e4 <TIM_Base_SetConfig+0x40>
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	4a3a      	ldr	r2, [pc, #232]	; (80053c8 <TIM_Base_SetConfig+0x124>)
 80052e0:	4293      	cmp	r3, r2
 80052e2:	d108      	bne.n	80052f6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80052ea:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80052ec:	683b      	ldr	r3, [r7, #0]
 80052ee:	685b      	ldr	r3, [r3, #4]
 80052f0:	68fa      	ldr	r2, [r7, #12]
 80052f2:	4313      	orrs	r3, r2
 80052f4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	4a2f      	ldr	r2, [pc, #188]	; (80053b8 <TIM_Base_SetConfig+0x114>)
 80052fa:	4293      	cmp	r3, r2
 80052fc:	d02b      	beq.n	8005356 <TIM_Base_SetConfig+0xb2>
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005304:	d027      	beq.n	8005356 <TIM_Base_SetConfig+0xb2>
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	4a2c      	ldr	r2, [pc, #176]	; (80053bc <TIM_Base_SetConfig+0x118>)
 800530a:	4293      	cmp	r3, r2
 800530c:	d023      	beq.n	8005356 <TIM_Base_SetConfig+0xb2>
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	4a2b      	ldr	r2, [pc, #172]	; (80053c0 <TIM_Base_SetConfig+0x11c>)
 8005312:	4293      	cmp	r3, r2
 8005314:	d01f      	beq.n	8005356 <TIM_Base_SetConfig+0xb2>
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	4a2a      	ldr	r2, [pc, #168]	; (80053c4 <TIM_Base_SetConfig+0x120>)
 800531a:	4293      	cmp	r3, r2
 800531c:	d01b      	beq.n	8005356 <TIM_Base_SetConfig+0xb2>
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	4a29      	ldr	r2, [pc, #164]	; (80053c8 <TIM_Base_SetConfig+0x124>)
 8005322:	4293      	cmp	r3, r2
 8005324:	d017      	beq.n	8005356 <TIM_Base_SetConfig+0xb2>
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	4a28      	ldr	r2, [pc, #160]	; (80053cc <TIM_Base_SetConfig+0x128>)
 800532a:	4293      	cmp	r3, r2
 800532c:	d013      	beq.n	8005356 <TIM_Base_SetConfig+0xb2>
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	4a27      	ldr	r2, [pc, #156]	; (80053d0 <TIM_Base_SetConfig+0x12c>)
 8005332:	4293      	cmp	r3, r2
 8005334:	d00f      	beq.n	8005356 <TIM_Base_SetConfig+0xb2>
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	4a26      	ldr	r2, [pc, #152]	; (80053d4 <TIM_Base_SetConfig+0x130>)
 800533a:	4293      	cmp	r3, r2
 800533c:	d00b      	beq.n	8005356 <TIM_Base_SetConfig+0xb2>
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	4a25      	ldr	r2, [pc, #148]	; (80053d8 <TIM_Base_SetConfig+0x134>)
 8005342:	4293      	cmp	r3, r2
 8005344:	d007      	beq.n	8005356 <TIM_Base_SetConfig+0xb2>
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	4a24      	ldr	r2, [pc, #144]	; (80053dc <TIM_Base_SetConfig+0x138>)
 800534a:	4293      	cmp	r3, r2
 800534c:	d003      	beq.n	8005356 <TIM_Base_SetConfig+0xb2>
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	4a23      	ldr	r2, [pc, #140]	; (80053e0 <TIM_Base_SetConfig+0x13c>)
 8005352:	4293      	cmp	r3, r2
 8005354:	d108      	bne.n	8005368 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800535c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800535e:	683b      	ldr	r3, [r7, #0]
 8005360:	68db      	ldr	r3, [r3, #12]
 8005362:	68fa      	ldr	r2, [r7, #12]
 8005364:	4313      	orrs	r3, r2
 8005366:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800536e:	683b      	ldr	r3, [r7, #0]
 8005370:	695b      	ldr	r3, [r3, #20]
 8005372:	4313      	orrs	r3, r2
 8005374:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	68fa      	ldr	r2, [r7, #12]
 800537a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800537c:	683b      	ldr	r3, [r7, #0]
 800537e:	689a      	ldr	r2, [r3, #8]
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005384:	683b      	ldr	r3, [r7, #0]
 8005386:	681a      	ldr	r2, [r3, #0]
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	4a0a      	ldr	r2, [pc, #40]	; (80053b8 <TIM_Base_SetConfig+0x114>)
 8005390:	4293      	cmp	r3, r2
 8005392:	d003      	beq.n	800539c <TIM_Base_SetConfig+0xf8>
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	4a0c      	ldr	r2, [pc, #48]	; (80053c8 <TIM_Base_SetConfig+0x124>)
 8005398:	4293      	cmp	r3, r2
 800539a:	d103      	bne.n	80053a4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800539c:	683b      	ldr	r3, [r7, #0]
 800539e:	691a      	ldr	r2, [r3, #16]
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	2201      	movs	r2, #1
 80053a8:	615a      	str	r2, [r3, #20]
}
 80053aa:	bf00      	nop
 80053ac:	3714      	adds	r7, #20
 80053ae:	46bd      	mov	sp, r7
 80053b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053b4:	4770      	bx	lr
 80053b6:	bf00      	nop
 80053b8:	40010000 	.word	0x40010000
 80053bc:	40000400 	.word	0x40000400
 80053c0:	40000800 	.word	0x40000800
 80053c4:	40000c00 	.word	0x40000c00
 80053c8:	40010400 	.word	0x40010400
 80053cc:	40014000 	.word	0x40014000
 80053d0:	40014400 	.word	0x40014400
 80053d4:	40014800 	.word	0x40014800
 80053d8:	40001800 	.word	0x40001800
 80053dc:	40001c00 	.word	0x40001c00
 80053e0:	40002000 	.word	0x40002000

080053e4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80053e4:	b480      	push	{r7}
 80053e6:	b087      	sub	sp, #28
 80053e8:	af00      	add	r7, sp, #0
 80053ea:	6078      	str	r0, [r7, #4]
 80053ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	6a1b      	ldr	r3, [r3, #32]
 80053f2:	f023 0201 	bic.w	r2, r3, #1
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	6a1b      	ldr	r3, [r3, #32]
 80053fe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	685b      	ldr	r3, [r3, #4]
 8005404:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	699b      	ldr	r3, [r3, #24]
 800540a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800540c:	68fa      	ldr	r2, [r7, #12]
 800540e:	4b2b      	ldr	r3, [pc, #172]	; (80054bc <TIM_OC1_SetConfig+0xd8>)
 8005410:	4013      	ands	r3, r2
 8005412:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	f023 0303 	bic.w	r3, r3, #3
 800541a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800541c:	683b      	ldr	r3, [r7, #0]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	68fa      	ldr	r2, [r7, #12]
 8005422:	4313      	orrs	r3, r2
 8005424:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005426:	697b      	ldr	r3, [r7, #20]
 8005428:	f023 0302 	bic.w	r3, r3, #2
 800542c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800542e:	683b      	ldr	r3, [r7, #0]
 8005430:	689b      	ldr	r3, [r3, #8]
 8005432:	697a      	ldr	r2, [r7, #20]
 8005434:	4313      	orrs	r3, r2
 8005436:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	4a21      	ldr	r2, [pc, #132]	; (80054c0 <TIM_OC1_SetConfig+0xdc>)
 800543c:	4293      	cmp	r3, r2
 800543e:	d003      	beq.n	8005448 <TIM_OC1_SetConfig+0x64>
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	4a20      	ldr	r2, [pc, #128]	; (80054c4 <TIM_OC1_SetConfig+0xe0>)
 8005444:	4293      	cmp	r3, r2
 8005446:	d10c      	bne.n	8005462 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005448:	697b      	ldr	r3, [r7, #20]
 800544a:	f023 0308 	bic.w	r3, r3, #8
 800544e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005450:	683b      	ldr	r3, [r7, #0]
 8005452:	68db      	ldr	r3, [r3, #12]
 8005454:	697a      	ldr	r2, [r7, #20]
 8005456:	4313      	orrs	r3, r2
 8005458:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800545a:	697b      	ldr	r3, [r7, #20]
 800545c:	f023 0304 	bic.w	r3, r3, #4
 8005460:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	4a16      	ldr	r2, [pc, #88]	; (80054c0 <TIM_OC1_SetConfig+0xdc>)
 8005466:	4293      	cmp	r3, r2
 8005468:	d003      	beq.n	8005472 <TIM_OC1_SetConfig+0x8e>
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	4a15      	ldr	r2, [pc, #84]	; (80054c4 <TIM_OC1_SetConfig+0xe0>)
 800546e:	4293      	cmp	r3, r2
 8005470:	d111      	bne.n	8005496 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005472:	693b      	ldr	r3, [r7, #16]
 8005474:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005478:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800547a:	693b      	ldr	r3, [r7, #16]
 800547c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005480:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005482:	683b      	ldr	r3, [r7, #0]
 8005484:	695b      	ldr	r3, [r3, #20]
 8005486:	693a      	ldr	r2, [r7, #16]
 8005488:	4313      	orrs	r3, r2
 800548a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800548c:	683b      	ldr	r3, [r7, #0]
 800548e:	699b      	ldr	r3, [r3, #24]
 8005490:	693a      	ldr	r2, [r7, #16]
 8005492:	4313      	orrs	r3, r2
 8005494:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	693a      	ldr	r2, [r7, #16]
 800549a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	68fa      	ldr	r2, [r7, #12]
 80054a0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80054a2:	683b      	ldr	r3, [r7, #0]
 80054a4:	685a      	ldr	r2, [r3, #4]
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	697a      	ldr	r2, [r7, #20]
 80054ae:	621a      	str	r2, [r3, #32]
}
 80054b0:	bf00      	nop
 80054b2:	371c      	adds	r7, #28
 80054b4:	46bd      	mov	sp, r7
 80054b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ba:	4770      	bx	lr
 80054bc:	fffeff8f 	.word	0xfffeff8f
 80054c0:	40010000 	.word	0x40010000
 80054c4:	40010400 	.word	0x40010400

080054c8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80054c8:	b480      	push	{r7}
 80054ca:	b087      	sub	sp, #28
 80054cc:	af00      	add	r7, sp, #0
 80054ce:	6078      	str	r0, [r7, #4]
 80054d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	6a1b      	ldr	r3, [r3, #32]
 80054d6:	f023 0210 	bic.w	r2, r3, #16
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	6a1b      	ldr	r3, [r3, #32]
 80054e2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	685b      	ldr	r3, [r3, #4]
 80054e8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	699b      	ldr	r3, [r3, #24]
 80054ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80054f0:	68fa      	ldr	r2, [r7, #12]
 80054f2:	4b2e      	ldr	r3, [pc, #184]	; (80055ac <TIM_OC2_SetConfig+0xe4>)
 80054f4:	4013      	ands	r3, r2
 80054f6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80054fe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005500:	683b      	ldr	r3, [r7, #0]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	021b      	lsls	r3, r3, #8
 8005506:	68fa      	ldr	r2, [r7, #12]
 8005508:	4313      	orrs	r3, r2
 800550a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800550c:	697b      	ldr	r3, [r7, #20]
 800550e:	f023 0320 	bic.w	r3, r3, #32
 8005512:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005514:	683b      	ldr	r3, [r7, #0]
 8005516:	689b      	ldr	r3, [r3, #8]
 8005518:	011b      	lsls	r3, r3, #4
 800551a:	697a      	ldr	r2, [r7, #20]
 800551c:	4313      	orrs	r3, r2
 800551e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	4a23      	ldr	r2, [pc, #140]	; (80055b0 <TIM_OC2_SetConfig+0xe8>)
 8005524:	4293      	cmp	r3, r2
 8005526:	d003      	beq.n	8005530 <TIM_OC2_SetConfig+0x68>
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	4a22      	ldr	r2, [pc, #136]	; (80055b4 <TIM_OC2_SetConfig+0xec>)
 800552c:	4293      	cmp	r3, r2
 800552e:	d10d      	bne.n	800554c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005530:	697b      	ldr	r3, [r7, #20]
 8005532:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005536:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005538:	683b      	ldr	r3, [r7, #0]
 800553a:	68db      	ldr	r3, [r3, #12]
 800553c:	011b      	lsls	r3, r3, #4
 800553e:	697a      	ldr	r2, [r7, #20]
 8005540:	4313      	orrs	r3, r2
 8005542:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005544:	697b      	ldr	r3, [r7, #20]
 8005546:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800554a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	4a18      	ldr	r2, [pc, #96]	; (80055b0 <TIM_OC2_SetConfig+0xe8>)
 8005550:	4293      	cmp	r3, r2
 8005552:	d003      	beq.n	800555c <TIM_OC2_SetConfig+0x94>
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	4a17      	ldr	r2, [pc, #92]	; (80055b4 <TIM_OC2_SetConfig+0xec>)
 8005558:	4293      	cmp	r3, r2
 800555a:	d113      	bne.n	8005584 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800555c:	693b      	ldr	r3, [r7, #16]
 800555e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005562:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005564:	693b      	ldr	r3, [r7, #16]
 8005566:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800556a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800556c:	683b      	ldr	r3, [r7, #0]
 800556e:	695b      	ldr	r3, [r3, #20]
 8005570:	009b      	lsls	r3, r3, #2
 8005572:	693a      	ldr	r2, [r7, #16]
 8005574:	4313      	orrs	r3, r2
 8005576:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005578:	683b      	ldr	r3, [r7, #0]
 800557a:	699b      	ldr	r3, [r3, #24]
 800557c:	009b      	lsls	r3, r3, #2
 800557e:	693a      	ldr	r2, [r7, #16]
 8005580:	4313      	orrs	r3, r2
 8005582:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	693a      	ldr	r2, [r7, #16]
 8005588:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	68fa      	ldr	r2, [r7, #12]
 800558e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005590:	683b      	ldr	r3, [r7, #0]
 8005592:	685a      	ldr	r2, [r3, #4]
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	697a      	ldr	r2, [r7, #20]
 800559c:	621a      	str	r2, [r3, #32]
}
 800559e:	bf00      	nop
 80055a0:	371c      	adds	r7, #28
 80055a2:	46bd      	mov	sp, r7
 80055a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055a8:	4770      	bx	lr
 80055aa:	bf00      	nop
 80055ac:	feff8fff 	.word	0xfeff8fff
 80055b0:	40010000 	.word	0x40010000
 80055b4:	40010400 	.word	0x40010400

080055b8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80055b8:	b480      	push	{r7}
 80055ba:	b087      	sub	sp, #28
 80055bc:	af00      	add	r7, sp, #0
 80055be:	6078      	str	r0, [r7, #4]
 80055c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	6a1b      	ldr	r3, [r3, #32]
 80055c6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	6a1b      	ldr	r3, [r3, #32]
 80055d2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	685b      	ldr	r3, [r3, #4]
 80055d8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	69db      	ldr	r3, [r3, #28]
 80055de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80055e0:	68fa      	ldr	r2, [r7, #12]
 80055e2:	4b2d      	ldr	r3, [pc, #180]	; (8005698 <TIM_OC3_SetConfig+0xe0>)
 80055e4:	4013      	ands	r3, r2
 80055e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	f023 0303 	bic.w	r3, r3, #3
 80055ee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80055f0:	683b      	ldr	r3, [r7, #0]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	68fa      	ldr	r2, [r7, #12]
 80055f6:	4313      	orrs	r3, r2
 80055f8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80055fa:	697b      	ldr	r3, [r7, #20]
 80055fc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005600:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005602:	683b      	ldr	r3, [r7, #0]
 8005604:	689b      	ldr	r3, [r3, #8]
 8005606:	021b      	lsls	r3, r3, #8
 8005608:	697a      	ldr	r2, [r7, #20]
 800560a:	4313      	orrs	r3, r2
 800560c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	4a22      	ldr	r2, [pc, #136]	; (800569c <TIM_OC3_SetConfig+0xe4>)
 8005612:	4293      	cmp	r3, r2
 8005614:	d003      	beq.n	800561e <TIM_OC3_SetConfig+0x66>
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	4a21      	ldr	r2, [pc, #132]	; (80056a0 <TIM_OC3_SetConfig+0xe8>)
 800561a:	4293      	cmp	r3, r2
 800561c:	d10d      	bne.n	800563a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800561e:	697b      	ldr	r3, [r7, #20]
 8005620:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005624:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005626:	683b      	ldr	r3, [r7, #0]
 8005628:	68db      	ldr	r3, [r3, #12]
 800562a:	021b      	lsls	r3, r3, #8
 800562c:	697a      	ldr	r2, [r7, #20]
 800562e:	4313      	orrs	r3, r2
 8005630:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005632:	697b      	ldr	r3, [r7, #20]
 8005634:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005638:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	4a17      	ldr	r2, [pc, #92]	; (800569c <TIM_OC3_SetConfig+0xe4>)
 800563e:	4293      	cmp	r3, r2
 8005640:	d003      	beq.n	800564a <TIM_OC3_SetConfig+0x92>
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	4a16      	ldr	r2, [pc, #88]	; (80056a0 <TIM_OC3_SetConfig+0xe8>)
 8005646:	4293      	cmp	r3, r2
 8005648:	d113      	bne.n	8005672 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800564a:	693b      	ldr	r3, [r7, #16]
 800564c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005650:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005652:	693b      	ldr	r3, [r7, #16]
 8005654:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005658:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800565a:	683b      	ldr	r3, [r7, #0]
 800565c:	695b      	ldr	r3, [r3, #20]
 800565e:	011b      	lsls	r3, r3, #4
 8005660:	693a      	ldr	r2, [r7, #16]
 8005662:	4313      	orrs	r3, r2
 8005664:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005666:	683b      	ldr	r3, [r7, #0]
 8005668:	699b      	ldr	r3, [r3, #24]
 800566a:	011b      	lsls	r3, r3, #4
 800566c:	693a      	ldr	r2, [r7, #16]
 800566e:	4313      	orrs	r3, r2
 8005670:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	693a      	ldr	r2, [r7, #16]
 8005676:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	68fa      	ldr	r2, [r7, #12]
 800567c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800567e:	683b      	ldr	r3, [r7, #0]
 8005680:	685a      	ldr	r2, [r3, #4]
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	697a      	ldr	r2, [r7, #20]
 800568a:	621a      	str	r2, [r3, #32]
}
 800568c:	bf00      	nop
 800568e:	371c      	adds	r7, #28
 8005690:	46bd      	mov	sp, r7
 8005692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005696:	4770      	bx	lr
 8005698:	fffeff8f 	.word	0xfffeff8f
 800569c:	40010000 	.word	0x40010000
 80056a0:	40010400 	.word	0x40010400

080056a4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80056a4:	b480      	push	{r7}
 80056a6:	b087      	sub	sp, #28
 80056a8:	af00      	add	r7, sp, #0
 80056aa:	6078      	str	r0, [r7, #4]
 80056ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	6a1b      	ldr	r3, [r3, #32]
 80056b2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	6a1b      	ldr	r3, [r3, #32]
 80056be:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	685b      	ldr	r3, [r3, #4]
 80056c4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	69db      	ldr	r3, [r3, #28]
 80056ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80056cc:	68fa      	ldr	r2, [r7, #12]
 80056ce:	4b1e      	ldr	r3, [pc, #120]	; (8005748 <TIM_OC4_SetConfig+0xa4>)
 80056d0:	4013      	ands	r3, r2
 80056d2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80056da:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80056dc:	683b      	ldr	r3, [r7, #0]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	021b      	lsls	r3, r3, #8
 80056e2:	68fa      	ldr	r2, [r7, #12]
 80056e4:	4313      	orrs	r3, r2
 80056e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80056e8:	693b      	ldr	r3, [r7, #16]
 80056ea:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80056ee:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80056f0:	683b      	ldr	r3, [r7, #0]
 80056f2:	689b      	ldr	r3, [r3, #8]
 80056f4:	031b      	lsls	r3, r3, #12
 80056f6:	693a      	ldr	r2, [r7, #16]
 80056f8:	4313      	orrs	r3, r2
 80056fa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	4a13      	ldr	r2, [pc, #76]	; (800574c <TIM_OC4_SetConfig+0xa8>)
 8005700:	4293      	cmp	r3, r2
 8005702:	d003      	beq.n	800570c <TIM_OC4_SetConfig+0x68>
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	4a12      	ldr	r2, [pc, #72]	; (8005750 <TIM_OC4_SetConfig+0xac>)
 8005708:	4293      	cmp	r3, r2
 800570a:	d109      	bne.n	8005720 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800570c:	697b      	ldr	r3, [r7, #20]
 800570e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005712:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005714:	683b      	ldr	r3, [r7, #0]
 8005716:	695b      	ldr	r3, [r3, #20]
 8005718:	019b      	lsls	r3, r3, #6
 800571a:	697a      	ldr	r2, [r7, #20]
 800571c:	4313      	orrs	r3, r2
 800571e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	697a      	ldr	r2, [r7, #20]
 8005724:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	68fa      	ldr	r2, [r7, #12]
 800572a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800572c:	683b      	ldr	r3, [r7, #0]
 800572e:	685a      	ldr	r2, [r3, #4]
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	693a      	ldr	r2, [r7, #16]
 8005738:	621a      	str	r2, [r3, #32]
}
 800573a:	bf00      	nop
 800573c:	371c      	adds	r7, #28
 800573e:	46bd      	mov	sp, r7
 8005740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005744:	4770      	bx	lr
 8005746:	bf00      	nop
 8005748:	feff8fff 	.word	0xfeff8fff
 800574c:	40010000 	.word	0x40010000
 8005750:	40010400 	.word	0x40010400

08005754 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8005754:	b480      	push	{r7}
 8005756:	b087      	sub	sp, #28
 8005758:	af00      	add	r7, sp, #0
 800575a:	6078      	str	r0, [r7, #4]
 800575c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	6a1b      	ldr	r3, [r3, #32]
 8005762:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	6a1b      	ldr	r3, [r3, #32]
 800576e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	685b      	ldr	r3, [r3, #4]
 8005774:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800577a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800577c:	68fa      	ldr	r2, [r7, #12]
 800577e:	4b1b      	ldr	r3, [pc, #108]	; (80057ec <TIM_OC5_SetConfig+0x98>)
 8005780:	4013      	ands	r3, r2
 8005782:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005784:	683b      	ldr	r3, [r7, #0]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	68fa      	ldr	r2, [r7, #12]
 800578a:	4313      	orrs	r3, r2
 800578c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800578e:	693b      	ldr	r3, [r7, #16]
 8005790:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8005794:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005796:	683b      	ldr	r3, [r7, #0]
 8005798:	689b      	ldr	r3, [r3, #8]
 800579a:	041b      	lsls	r3, r3, #16
 800579c:	693a      	ldr	r2, [r7, #16]
 800579e:	4313      	orrs	r3, r2
 80057a0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	4a12      	ldr	r2, [pc, #72]	; (80057f0 <TIM_OC5_SetConfig+0x9c>)
 80057a6:	4293      	cmp	r3, r2
 80057a8:	d003      	beq.n	80057b2 <TIM_OC5_SetConfig+0x5e>
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	4a11      	ldr	r2, [pc, #68]	; (80057f4 <TIM_OC5_SetConfig+0xa0>)
 80057ae:	4293      	cmp	r3, r2
 80057b0:	d109      	bne.n	80057c6 <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80057b2:	697b      	ldr	r3, [r7, #20]
 80057b4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80057b8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80057ba:	683b      	ldr	r3, [r7, #0]
 80057bc:	695b      	ldr	r3, [r3, #20]
 80057be:	021b      	lsls	r3, r3, #8
 80057c0:	697a      	ldr	r2, [r7, #20]
 80057c2:	4313      	orrs	r3, r2
 80057c4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	697a      	ldr	r2, [r7, #20]
 80057ca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	68fa      	ldr	r2, [r7, #12]
 80057d0:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80057d2:	683b      	ldr	r3, [r7, #0]
 80057d4:	685a      	ldr	r2, [r3, #4]
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	693a      	ldr	r2, [r7, #16]
 80057de:	621a      	str	r2, [r3, #32]
}
 80057e0:	bf00      	nop
 80057e2:	371c      	adds	r7, #28
 80057e4:	46bd      	mov	sp, r7
 80057e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ea:	4770      	bx	lr
 80057ec:	fffeff8f 	.word	0xfffeff8f
 80057f0:	40010000 	.word	0x40010000
 80057f4:	40010400 	.word	0x40010400

080057f8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80057f8:	b480      	push	{r7}
 80057fa:	b087      	sub	sp, #28
 80057fc:	af00      	add	r7, sp, #0
 80057fe:	6078      	str	r0, [r7, #4]
 8005800:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	6a1b      	ldr	r3, [r3, #32]
 8005806:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	6a1b      	ldr	r3, [r3, #32]
 8005812:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	685b      	ldr	r3, [r3, #4]
 8005818:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800581e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005820:	68fa      	ldr	r2, [r7, #12]
 8005822:	4b1c      	ldr	r3, [pc, #112]	; (8005894 <TIM_OC6_SetConfig+0x9c>)
 8005824:	4013      	ands	r3, r2
 8005826:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005828:	683b      	ldr	r3, [r7, #0]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	021b      	lsls	r3, r3, #8
 800582e:	68fa      	ldr	r2, [r7, #12]
 8005830:	4313      	orrs	r3, r2
 8005832:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005834:	693b      	ldr	r3, [r7, #16]
 8005836:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800583a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800583c:	683b      	ldr	r3, [r7, #0]
 800583e:	689b      	ldr	r3, [r3, #8]
 8005840:	051b      	lsls	r3, r3, #20
 8005842:	693a      	ldr	r2, [r7, #16]
 8005844:	4313      	orrs	r3, r2
 8005846:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	4a13      	ldr	r2, [pc, #76]	; (8005898 <TIM_OC6_SetConfig+0xa0>)
 800584c:	4293      	cmp	r3, r2
 800584e:	d003      	beq.n	8005858 <TIM_OC6_SetConfig+0x60>
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	4a12      	ldr	r2, [pc, #72]	; (800589c <TIM_OC6_SetConfig+0xa4>)
 8005854:	4293      	cmp	r3, r2
 8005856:	d109      	bne.n	800586c <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005858:	697b      	ldr	r3, [r7, #20]
 800585a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800585e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005860:	683b      	ldr	r3, [r7, #0]
 8005862:	695b      	ldr	r3, [r3, #20]
 8005864:	029b      	lsls	r3, r3, #10
 8005866:	697a      	ldr	r2, [r7, #20]
 8005868:	4313      	orrs	r3, r2
 800586a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	697a      	ldr	r2, [r7, #20]
 8005870:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	68fa      	ldr	r2, [r7, #12]
 8005876:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005878:	683b      	ldr	r3, [r7, #0]
 800587a:	685a      	ldr	r2, [r3, #4]
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	693a      	ldr	r2, [r7, #16]
 8005884:	621a      	str	r2, [r3, #32]
}
 8005886:	bf00      	nop
 8005888:	371c      	adds	r7, #28
 800588a:	46bd      	mov	sp, r7
 800588c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005890:	4770      	bx	lr
 8005892:	bf00      	nop
 8005894:	feff8fff 	.word	0xfeff8fff
 8005898:	40010000 	.word	0x40010000
 800589c:	40010400 	.word	0x40010400

080058a0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80058a0:	b480      	push	{r7}
 80058a2:	b087      	sub	sp, #28
 80058a4:	af00      	add	r7, sp, #0
 80058a6:	60f8      	str	r0, [r7, #12]
 80058a8:	60b9      	str	r1, [r7, #8]
 80058aa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	6a1b      	ldr	r3, [r3, #32]
 80058b0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	6a1b      	ldr	r3, [r3, #32]
 80058b6:	f023 0201 	bic.w	r2, r3, #1
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	699b      	ldr	r3, [r3, #24]
 80058c2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80058c4:	693b      	ldr	r3, [r7, #16]
 80058c6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80058ca:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	011b      	lsls	r3, r3, #4
 80058d0:	693a      	ldr	r2, [r7, #16]
 80058d2:	4313      	orrs	r3, r2
 80058d4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80058d6:	697b      	ldr	r3, [r7, #20]
 80058d8:	f023 030a 	bic.w	r3, r3, #10
 80058dc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80058de:	697a      	ldr	r2, [r7, #20]
 80058e0:	68bb      	ldr	r3, [r7, #8]
 80058e2:	4313      	orrs	r3, r2
 80058e4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	693a      	ldr	r2, [r7, #16]
 80058ea:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	697a      	ldr	r2, [r7, #20]
 80058f0:	621a      	str	r2, [r3, #32]
}
 80058f2:	bf00      	nop
 80058f4:	371c      	adds	r7, #28
 80058f6:	46bd      	mov	sp, r7
 80058f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058fc:	4770      	bx	lr

080058fe <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80058fe:	b480      	push	{r7}
 8005900:	b087      	sub	sp, #28
 8005902:	af00      	add	r7, sp, #0
 8005904:	60f8      	str	r0, [r7, #12]
 8005906:	60b9      	str	r1, [r7, #8]
 8005908:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	6a1b      	ldr	r3, [r3, #32]
 800590e:	f023 0210 	bic.w	r2, r3, #16
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	699b      	ldr	r3, [r3, #24]
 800591a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	6a1b      	ldr	r3, [r3, #32]
 8005920:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005922:	697b      	ldr	r3, [r7, #20]
 8005924:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005928:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	031b      	lsls	r3, r3, #12
 800592e:	697a      	ldr	r2, [r7, #20]
 8005930:	4313      	orrs	r3, r2
 8005932:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005934:	693b      	ldr	r3, [r7, #16]
 8005936:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800593a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800593c:	68bb      	ldr	r3, [r7, #8]
 800593e:	011b      	lsls	r3, r3, #4
 8005940:	693a      	ldr	r2, [r7, #16]
 8005942:	4313      	orrs	r3, r2
 8005944:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	697a      	ldr	r2, [r7, #20]
 800594a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	693a      	ldr	r2, [r7, #16]
 8005950:	621a      	str	r2, [r3, #32]
}
 8005952:	bf00      	nop
 8005954:	371c      	adds	r7, #28
 8005956:	46bd      	mov	sp, r7
 8005958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800595c:	4770      	bx	lr

0800595e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800595e:	b480      	push	{r7}
 8005960:	b085      	sub	sp, #20
 8005962:	af00      	add	r7, sp, #0
 8005964:	6078      	str	r0, [r7, #4]
 8005966:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	689b      	ldr	r3, [r3, #8]
 800596c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005974:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005976:	683a      	ldr	r2, [r7, #0]
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	4313      	orrs	r3, r2
 800597c:	f043 0307 	orr.w	r3, r3, #7
 8005980:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	68fa      	ldr	r2, [r7, #12]
 8005986:	609a      	str	r2, [r3, #8]
}
 8005988:	bf00      	nop
 800598a:	3714      	adds	r7, #20
 800598c:	46bd      	mov	sp, r7
 800598e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005992:	4770      	bx	lr

08005994 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005994:	b480      	push	{r7}
 8005996:	b087      	sub	sp, #28
 8005998:	af00      	add	r7, sp, #0
 800599a:	60f8      	str	r0, [r7, #12]
 800599c:	60b9      	str	r1, [r7, #8]
 800599e:	607a      	str	r2, [r7, #4]
 80059a0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	689b      	ldr	r3, [r3, #8]
 80059a6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80059a8:	697b      	ldr	r3, [r7, #20]
 80059aa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80059ae:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80059b0:	683b      	ldr	r3, [r7, #0]
 80059b2:	021a      	lsls	r2, r3, #8
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	431a      	orrs	r2, r3
 80059b8:	68bb      	ldr	r3, [r7, #8]
 80059ba:	4313      	orrs	r3, r2
 80059bc:	697a      	ldr	r2, [r7, #20]
 80059be:	4313      	orrs	r3, r2
 80059c0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	697a      	ldr	r2, [r7, #20]
 80059c6:	609a      	str	r2, [r3, #8]
}
 80059c8:	bf00      	nop
 80059ca:	371c      	adds	r7, #28
 80059cc:	46bd      	mov	sp, r7
 80059ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059d2:	4770      	bx	lr

080059d4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80059d4:	b480      	push	{r7}
 80059d6:	b087      	sub	sp, #28
 80059d8:	af00      	add	r7, sp, #0
 80059da:	60f8      	str	r0, [r7, #12]
 80059dc:	60b9      	str	r1, [r7, #8]
 80059de:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80059e0:	68bb      	ldr	r3, [r7, #8]
 80059e2:	f003 031f 	and.w	r3, r3, #31
 80059e6:	2201      	movs	r2, #1
 80059e8:	fa02 f303 	lsl.w	r3, r2, r3
 80059ec:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	6a1a      	ldr	r2, [r3, #32]
 80059f2:	697b      	ldr	r3, [r7, #20]
 80059f4:	43db      	mvns	r3, r3
 80059f6:	401a      	ands	r2, r3
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	6a1a      	ldr	r2, [r3, #32]
 8005a00:	68bb      	ldr	r3, [r7, #8]
 8005a02:	f003 031f 	and.w	r3, r3, #31
 8005a06:	6879      	ldr	r1, [r7, #4]
 8005a08:	fa01 f303 	lsl.w	r3, r1, r3
 8005a0c:	431a      	orrs	r2, r3
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	621a      	str	r2, [r3, #32]
}
 8005a12:	bf00      	nop
 8005a14:	371c      	adds	r7, #28
 8005a16:	46bd      	mov	sp, r7
 8005a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a1c:	4770      	bx	lr
	...

08005a20 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005a20:	b480      	push	{r7}
 8005a22:	b085      	sub	sp, #20
 8005a24:	af00      	add	r7, sp, #0
 8005a26:	6078      	str	r0, [r7, #4]
 8005a28:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005a30:	2b01      	cmp	r3, #1
 8005a32:	d101      	bne.n	8005a38 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005a34:	2302      	movs	r3, #2
 8005a36:	e06d      	b.n	8005b14 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	2201      	movs	r2, #1
 8005a3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	2202      	movs	r2, #2
 8005a44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	685b      	ldr	r3, [r3, #4]
 8005a4e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	689b      	ldr	r3, [r3, #8]
 8005a56:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	4a30      	ldr	r2, [pc, #192]	; (8005b20 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005a5e:	4293      	cmp	r3, r2
 8005a60:	d004      	beq.n	8005a6c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	4a2f      	ldr	r2, [pc, #188]	; (8005b24 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005a68:	4293      	cmp	r3, r2
 8005a6a:	d108      	bne.n	8005a7e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005a72:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005a74:	683b      	ldr	r3, [r7, #0]
 8005a76:	685b      	ldr	r3, [r3, #4]
 8005a78:	68fa      	ldr	r2, [r7, #12]
 8005a7a:	4313      	orrs	r3, r2
 8005a7c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a84:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005a86:	683b      	ldr	r3, [r7, #0]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	68fa      	ldr	r2, [r7, #12]
 8005a8c:	4313      	orrs	r3, r2
 8005a8e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	68fa      	ldr	r2, [r7, #12]
 8005a96:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	4a20      	ldr	r2, [pc, #128]	; (8005b20 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005a9e:	4293      	cmp	r3, r2
 8005aa0:	d022      	beq.n	8005ae8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005aaa:	d01d      	beq.n	8005ae8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	4a1d      	ldr	r2, [pc, #116]	; (8005b28 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8005ab2:	4293      	cmp	r3, r2
 8005ab4:	d018      	beq.n	8005ae8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	4a1c      	ldr	r2, [pc, #112]	; (8005b2c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8005abc:	4293      	cmp	r3, r2
 8005abe:	d013      	beq.n	8005ae8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	4a1a      	ldr	r2, [pc, #104]	; (8005b30 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8005ac6:	4293      	cmp	r3, r2
 8005ac8:	d00e      	beq.n	8005ae8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	4a15      	ldr	r2, [pc, #84]	; (8005b24 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005ad0:	4293      	cmp	r3, r2
 8005ad2:	d009      	beq.n	8005ae8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	4a16      	ldr	r2, [pc, #88]	; (8005b34 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8005ada:	4293      	cmp	r3, r2
 8005adc:	d004      	beq.n	8005ae8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	4a15      	ldr	r2, [pc, #84]	; (8005b38 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8005ae4:	4293      	cmp	r3, r2
 8005ae6:	d10c      	bne.n	8005b02 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005ae8:	68bb      	ldr	r3, [r7, #8]
 8005aea:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005aee:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005af0:	683b      	ldr	r3, [r7, #0]
 8005af2:	689b      	ldr	r3, [r3, #8]
 8005af4:	68ba      	ldr	r2, [r7, #8]
 8005af6:	4313      	orrs	r3, r2
 8005af8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	68ba      	ldr	r2, [r7, #8]
 8005b00:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	2201      	movs	r2, #1
 8005b06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	2200      	movs	r2, #0
 8005b0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005b12:	2300      	movs	r3, #0
}
 8005b14:	4618      	mov	r0, r3
 8005b16:	3714      	adds	r7, #20
 8005b18:	46bd      	mov	sp, r7
 8005b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b1e:	4770      	bx	lr
 8005b20:	40010000 	.word	0x40010000
 8005b24:	40010400 	.word	0x40010400
 8005b28:	40000400 	.word	0x40000400
 8005b2c:	40000800 	.word	0x40000800
 8005b30:	40000c00 	.word	0x40000c00
 8005b34:	40014000 	.word	0x40014000
 8005b38:	40001800 	.word	0x40001800

08005b3c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005b3c:	b480      	push	{r7}
 8005b3e:	b085      	sub	sp, #20
 8005b40:	af00      	add	r7, sp, #0
 8005b42:	6078      	str	r0, [r7, #4]
 8005b44:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8005b46:	2300      	movs	r3, #0
 8005b48:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005b50:	2b01      	cmp	r3, #1
 8005b52:	d101      	bne.n	8005b58 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005b54:	2302      	movs	r3, #2
 8005b56:	e065      	b.n	8005c24 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	2201      	movs	r2, #1
 8005b5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8005b66:	683b      	ldr	r3, [r7, #0]
 8005b68:	68db      	ldr	r3, [r3, #12]
 8005b6a:	4313      	orrs	r3, r2
 8005b6c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005b74:	683b      	ldr	r3, [r7, #0]
 8005b76:	689b      	ldr	r3, [r3, #8]
 8005b78:	4313      	orrs	r3, r2
 8005b7a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8005b82:	683b      	ldr	r3, [r7, #0]
 8005b84:	685b      	ldr	r3, [r3, #4]
 8005b86:	4313      	orrs	r3, r2
 8005b88:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8005b90:	683b      	ldr	r3, [r7, #0]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	4313      	orrs	r3, r2
 8005b96:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005b9e:	683b      	ldr	r3, [r7, #0]
 8005ba0:	691b      	ldr	r3, [r3, #16]
 8005ba2:	4313      	orrs	r3, r2
 8005ba4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8005bac:	683b      	ldr	r3, [r7, #0]
 8005bae:	695b      	ldr	r3, [r3, #20]
 8005bb0:	4313      	orrs	r3, r2
 8005bb2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8005bba:	683b      	ldr	r3, [r7, #0]
 8005bbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005bbe:	4313      	orrs	r3, r2
 8005bc0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8005bc8:	683b      	ldr	r3, [r7, #0]
 8005bca:	699b      	ldr	r3, [r3, #24]
 8005bcc:	041b      	lsls	r3, r3, #16
 8005bce:	4313      	orrs	r3, r2
 8005bd0:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	4a16      	ldr	r2, [pc, #88]	; (8005c30 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8005bd8:	4293      	cmp	r3, r2
 8005bda:	d004      	beq.n	8005be6 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	4a14      	ldr	r2, [pc, #80]	; (8005c34 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 8005be2:	4293      	cmp	r3, r2
 8005be4:	d115      	bne.n	8005c12 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8005bec:	683b      	ldr	r3, [r7, #0]
 8005bee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bf0:	051b      	lsls	r3, r3, #20
 8005bf2:	4313      	orrs	r3, r2
 8005bf4:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8005bfc:	683b      	ldr	r3, [r7, #0]
 8005bfe:	69db      	ldr	r3, [r3, #28]
 8005c00:	4313      	orrs	r3, r2
 8005c02:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8005c0a:	683b      	ldr	r3, [r7, #0]
 8005c0c:	6a1b      	ldr	r3, [r3, #32]
 8005c0e:	4313      	orrs	r3, r2
 8005c10:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	68fa      	ldr	r2, [r7, #12]
 8005c18:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	2200      	movs	r2, #0
 8005c1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005c22:	2300      	movs	r3, #0
}
 8005c24:	4618      	mov	r0, r3
 8005c26:	3714      	adds	r7, #20
 8005c28:	46bd      	mov	sp, r7
 8005c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c2e:	4770      	bx	lr
 8005c30:	40010000 	.word	0x40010000
 8005c34:	40010400 	.word	0x40010400

08005c38 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005c38:	b480      	push	{r7}
 8005c3a:	b083      	sub	sp, #12
 8005c3c:	af00      	add	r7, sp, #0
 8005c3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005c40:	bf00      	nop
 8005c42:	370c      	adds	r7, #12
 8005c44:	46bd      	mov	sp, r7
 8005c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c4a:	4770      	bx	lr

08005c4c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005c4c:	b480      	push	{r7}
 8005c4e:	b083      	sub	sp, #12
 8005c50:	af00      	add	r7, sp, #0
 8005c52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005c54:	bf00      	nop
 8005c56:	370c      	adds	r7, #12
 8005c58:	46bd      	mov	sp, r7
 8005c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c5e:	4770      	bx	lr

08005c60 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005c60:	b480      	push	{r7}
 8005c62:	b083      	sub	sp, #12
 8005c64:	af00      	add	r7, sp, #0
 8005c66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005c68:	bf00      	nop
 8005c6a:	370c      	adds	r7, #12
 8005c6c:	46bd      	mov	sp, r7
 8005c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c72:	4770      	bx	lr

08005c74 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8005c74:	b480      	push	{r7}
 8005c76:	b085      	sub	sp, #20
 8005c78:	af00      	add	r7, sp, #0
 8005c7a:	4603      	mov	r3, r0
 8005c7c:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8005c7e:	2300      	movs	r3, #0
 8005c80:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8005c82:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005c86:	2b84      	cmp	r3, #132	; 0x84
 8005c88:	d005      	beq.n	8005c96 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8005c8a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	4413      	add	r3, r2
 8005c92:	3303      	adds	r3, #3
 8005c94:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8005c96:	68fb      	ldr	r3, [r7, #12]
}
 8005c98:	4618      	mov	r0, r3
 8005c9a:	3714      	adds	r7, #20
 8005c9c:	46bd      	mov	sp, r7
 8005c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ca2:	4770      	bx	lr

08005ca4 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8005ca4:	b580      	push	{r7, lr}
 8005ca6:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8005ca8:	f000 fae8 	bl	800627c <vTaskStartScheduler>
  
  return osOK;
 8005cac:	2300      	movs	r3, #0
}
 8005cae:	4618      	mov	r0, r3
 8005cb0:	bd80      	pop	{r7, pc}

08005cb2 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8005cb2:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005cb4:	b089      	sub	sp, #36	; 0x24
 8005cb6:	af04      	add	r7, sp, #16
 8005cb8:	6078      	str	r0, [r7, #4]
 8005cba:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	695b      	ldr	r3, [r3, #20]
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	d020      	beq.n	8005d06 <osThreadCreate+0x54>
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	699b      	ldr	r3, [r3, #24]
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d01c      	beq.n	8005d06 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	685c      	ldr	r4, [r3, #4]
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	681d      	ldr	r5, [r3, #0]
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	691e      	ldr	r6, [r3, #16]
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8005cde:	4618      	mov	r0, r3
 8005ce0:	f7ff ffc8 	bl	8005c74 <makeFreeRtosPriority>
 8005ce4:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	695b      	ldr	r3, [r3, #20]
 8005cea:	687a      	ldr	r2, [r7, #4]
 8005cec:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005cee:	9202      	str	r2, [sp, #8]
 8005cf0:	9301      	str	r3, [sp, #4]
 8005cf2:	9100      	str	r1, [sp, #0]
 8005cf4:	683b      	ldr	r3, [r7, #0]
 8005cf6:	4632      	mov	r2, r6
 8005cf8:	4629      	mov	r1, r5
 8005cfa:	4620      	mov	r0, r4
 8005cfc:	f000 f8ed 	bl	8005eda <xTaskCreateStatic>
 8005d00:	4603      	mov	r3, r0
 8005d02:	60fb      	str	r3, [r7, #12]
 8005d04:	e01c      	b.n	8005d40 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	685c      	ldr	r4, [r3, #4]
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005d12:	b29e      	uxth	r6, r3
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8005d1a:	4618      	mov	r0, r3
 8005d1c:	f7ff ffaa 	bl	8005c74 <makeFreeRtosPriority>
 8005d20:	4602      	mov	r2, r0
 8005d22:	f107 030c 	add.w	r3, r7, #12
 8005d26:	9301      	str	r3, [sp, #4]
 8005d28:	9200      	str	r2, [sp, #0]
 8005d2a:	683b      	ldr	r3, [r7, #0]
 8005d2c:	4632      	mov	r2, r6
 8005d2e:	4629      	mov	r1, r5
 8005d30:	4620      	mov	r0, r4
 8005d32:	f000 f935 	bl	8005fa0 <xTaskCreate>
 8005d36:	4603      	mov	r3, r0
 8005d38:	2b01      	cmp	r3, #1
 8005d3a:	d001      	beq.n	8005d40 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8005d3c:	2300      	movs	r3, #0
 8005d3e:	e000      	b.n	8005d42 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8005d40:	68fb      	ldr	r3, [r7, #12]
}
 8005d42:	4618      	mov	r0, r3
 8005d44:	3714      	adds	r7, #20
 8005d46:	46bd      	mov	sp, r7
 8005d48:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005d4a <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8005d4a:	b580      	push	{r7, lr}
 8005d4c:	b084      	sub	sp, #16
 8005d4e:	af00      	add	r7, sp, #0
 8005d50:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d001      	beq.n	8005d60 <osDelay+0x16>
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	e000      	b.n	8005d62 <osDelay+0x18>
 8005d60:	2301      	movs	r3, #1
 8005d62:	4618      	mov	r0, r3
 8005d64:	f000 fa54 	bl	8006210 <vTaskDelay>
  
  return osOK;
 8005d68:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8005d6a:	4618      	mov	r0, r3
 8005d6c:	3710      	adds	r7, #16
 8005d6e:	46bd      	mov	sp, r7
 8005d70:	bd80      	pop	{r7, pc}

08005d72 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005d72:	b480      	push	{r7}
 8005d74:	b083      	sub	sp, #12
 8005d76:	af00      	add	r7, sp, #0
 8005d78:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	f103 0208 	add.w	r2, r3, #8
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	f04f 32ff 	mov.w	r2, #4294967295
 8005d8a:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	f103 0208 	add.w	r2, r3, #8
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	f103 0208 	add.w	r2, r3, #8
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	2200      	movs	r2, #0
 8005da4:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005da6:	bf00      	nop
 8005da8:	370c      	adds	r7, #12
 8005daa:	46bd      	mov	sp, r7
 8005dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005db0:	4770      	bx	lr

08005db2 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005db2:	b480      	push	{r7}
 8005db4:	b083      	sub	sp, #12
 8005db6:	af00      	add	r7, sp, #0
 8005db8:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	2200      	movs	r2, #0
 8005dbe:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005dc0:	bf00      	nop
 8005dc2:	370c      	adds	r7, #12
 8005dc4:	46bd      	mov	sp, r7
 8005dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dca:	4770      	bx	lr

08005dcc <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005dcc:	b480      	push	{r7}
 8005dce:	b085      	sub	sp, #20
 8005dd0:	af00      	add	r7, sp, #0
 8005dd2:	6078      	str	r0, [r7, #4]
 8005dd4:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	685b      	ldr	r3, [r3, #4]
 8005dda:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005ddc:	683b      	ldr	r3, [r7, #0]
 8005dde:	68fa      	ldr	r2, [r7, #12]
 8005de0:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	689a      	ldr	r2, [r3, #8]
 8005de6:	683b      	ldr	r3, [r7, #0]
 8005de8:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	689b      	ldr	r3, [r3, #8]
 8005dee:	683a      	ldr	r2, [r7, #0]
 8005df0:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	683a      	ldr	r2, [r7, #0]
 8005df6:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8005df8:	683b      	ldr	r3, [r7, #0]
 8005dfa:	687a      	ldr	r2, [r7, #4]
 8005dfc:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	1c5a      	adds	r2, r3, #1
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	601a      	str	r2, [r3, #0]
}
 8005e08:	bf00      	nop
 8005e0a:	3714      	adds	r7, #20
 8005e0c:	46bd      	mov	sp, r7
 8005e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e12:	4770      	bx	lr

08005e14 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005e14:	b480      	push	{r7}
 8005e16:	b085      	sub	sp, #20
 8005e18:	af00      	add	r7, sp, #0
 8005e1a:	6078      	str	r0, [r7, #4]
 8005e1c:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005e1e:	683b      	ldr	r3, [r7, #0]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005e24:	68bb      	ldr	r3, [r7, #8]
 8005e26:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e2a:	d103      	bne.n	8005e34 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	691b      	ldr	r3, [r3, #16]
 8005e30:	60fb      	str	r3, [r7, #12]
 8005e32:	e00c      	b.n	8005e4e <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	3308      	adds	r3, #8
 8005e38:	60fb      	str	r3, [r7, #12]
 8005e3a:	e002      	b.n	8005e42 <vListInsert+0x2e>
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	685b      	ldr	r3, [r3, #4]
 8005e40:	60fb      	str	r3, [r7, #12]
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	685b      	ldr	r3, [r3, #4]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	68ba      	ldr	r2, [r7, #8]
 8005e4a:	429a      	cmp	r2, r3
 8005e4c:	d2f6      	bcs.n	8005e3c <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	685a      	ldr	r2, [r3, #4]
 8005e52:	683b      	ldr	r3, [r7, #0]
 8005e54:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005e56:	683b      	ldr	r3, [r7, #0]
 8005e58:	685b      	ldr	r3, [r3, #4]
 8005e5a:	683a      	ldr	r2, [r7, #0]
 8005e5c:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005e5e:	683b      	ldr	r3, [r7, #0]
 8005e60:	68fa      	ldr	r2, [r7, #12]
 8005e62:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	683a      	ldr	r2, [r7, #0]
 8005e68:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8005e6a:	683b      	ldr	r3, [r7, #0]
 8005e6c:	687a      	ldr	r2, [r7, #4]
 8005e6e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	1c5a      	adds	r2, r3, #1
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	601a      	str	r2, [r3, #0]
}
 8005e7a:	bf00      	nop
 8005e7c:	3714      	adds	r7, #20
 8005e7e:	46bd      	mov	sp, r7
 8005e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e84:	4770      	bx	lr

08005e86 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005e86:	b480      	push	{r7}
 8005e88:	b085      	sub	sp, #20
 8005e8a:	af00      	add	r7, sp, #0
 8005e8c:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	691b      	ldr	r3, [r3, #16]
 8005e92:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	685b      	ldr	r3, [r3, #4]
 8005e98:	687a      	ldr	r2, [r7, #4]
 8005e9a:	6892      	ldr	r2, [r2, #8]
 8005e9c:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	689b      	ldr	r3, [r3, #8]
 8005ea2:	687a      	ldr	r2, [r7, #4]
 8005ea4:	6852      	ldr	r2, [r2, #4]
 8005ea6:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	685b      	ldr	r3, [r3, #4]
 8005eac:	687a      	ldr	r2, [r7, #4]
 8005eae:	429a      	cmp	r2, r3
 8005eb0:	d103      	bne.n	8005eba <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	689a      	ldr	r2, [r3, #8]
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	2200      	movs	r2, #0
 8005ebe:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	1e5a      	subs	r2, r3, #1
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	681b      	ldr	r3, [r3, #0]
}
 8005ece:	4618      	mov	r0, r3
 8005ed0:	3714      	adds	r7, #20
 8005ed2:	46bd      	mov	sp, r7
 8005ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ed8:	4770      	bx	lr

08005eda <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005eda:	b580      	push	{r7, lr}
 8005edc:	b08e      	sub	sp, #56	; 0x38
 8005ede:	af04      	add	r7, sp, #16
 8005ee0:	60f8      	str	r0, [r7, #12]
 8005ee2:	60b9      	str	r1, [r7, #8]
 8005ee4:	607a      	str	r2, [r7, #4]
 8005ee6:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8005ee8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d10c      	bne.n	8005f08 <xTaskCreateStatic+0x2e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005eee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ef2:	b672      	cpsid	i
 8005ef4:	f383 8811 	msr	BASEPRI, r3
 8005ef8:	f3bf 8f6f 	isb	sy
 8005efc:	f3bf 8f4f 	dsb	sy
 8005f00:	b662      	cpsie	i
 8005f02:	623b      	str	r3, [r7, #32]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8005f04:	bf00      	nop
 8005f06:	e7fe      	b.n	8005f06 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 8005f08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d10c      	bne.n	8005f28 <xTaskCreateStatic+0x4e>
	__asm volatile
 8005f0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f12:	b672      	cpsid	i
 8005f14:	f383 8811 	msr	BASEPRI, r3
 8005f18:	f3bf 8f6f 	isb	sy
 8005f1c:	f3bf 8f4f 	dsb	sy
 8005f20:	b662      	cpsie	i
 8005f22:	61fb      	str	r3, [r7, #28]
}
 8005f24:	bf00      	nop
 8005f26:	e7fe      	b.n	8005f26 <xTaskCreateStatic+0x4c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8005f28:	2354      	movs	r3, #84	; 0x54
 8005f2a:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8005f2c:	693b      	ldr	r3, [r7, #16]
 8005f2e:	2b54      	cmp	r3, #84	; 0x54
 8005f30:	d00c      	beq.n	8005f4c <xTaskCreateStatic+0x72>
	__asm volatile
 8005f32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f36:	b672      	cpsid	i
 8005f38:	f383 8811 	msr	BASEPRI, r3
 8005f3c:	f3bf 8f6f 	isb	sy
 8005f40:	f3bf 8f4f 	dsb	sy
 8005f44:	b662      	cpsie	i
 8005f46:	61bb      	str	r3, [r7, #24]
}
 8005f48:	bf00      	nop
 8005f4a:	e7fe      	b.n	8005f4a <xTaskCreateStatic+0x70>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8005f4c:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8005f4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	d01e      	beq.n	8005f92 <xTaskCreateStatic+0xb8>
 8005f54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d01b      	beq.n	8005f92 <xTaskCreateStatic+0xb8>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005f5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f5c:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005f5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f60:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005f62:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005f64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f66:	2202      	movs	r2, #2
 8005f68:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005f6c:	2300      	movs	r3, #0
 8005f6e:	9303      	str	r3, [sp, #12]
 8005f70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f72:	9302      	str	r3, [sp, #8]
 8005f74:	f107 0314 	add.w	r3, r7, #20
 8005f78:	9301      	str	r3, [sp, #4]
 8005f7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f7c:	9300      	str	r3, [sp, #0]
 8005f7e:	683b      	ldr	r3, [r7, #0]
 8005f80:	687a      	ldr	r2, [r7, #4]
 8005f82:	68b9      	ldr	r1, [r7, #8]
 8005f84:	68f8      	ldr	r0, [r7, #12]
 8005f86:	f000 f850 	bl	800602a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005f8a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005f8c:	f000 f8d6 	bl	800613c <prvAddNewTaskToReadyList>
 8005f90:	e001      	b.n	8005f96 <xTaskCreateStatic+0xbc>
		}
		else
		{
			xReturn = NULL;
 8005f92:	2300      	movs	r3, #0
 8005f94:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005f96:	697b      	ldr	r3, [r7, #20]
	}
 8005f98:	4618      	mov	r0, r3
 8005f9a:	3728      	adds	r7, #40	; 0x28
 8005f9c:	46bd      	mov	sp, r7
 8005f9e:	bd80      	pop	{r7, pc}

08005fa0 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005fa0:	b580      	push	{r7, lr}
 8005fa2:	b08c      	sub	sp, #48	; 0x30
 8005fa4:	af04      	add	r7, sp, #16
 8005fa6:	60f8      	str	r0, [r7, #12]
 8005fa8:	60b9      	str	r1, [r7, #8]
 8005faa:	603b      	str	r3, [r7, #0]
 8005fac:	4613      	mov	r3, r2
 8005fae:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8005fb0:	88fb      	ldrh	r3, [r7, #6]
 8005fb2:	009b      	lsls	r3, r3, #2
 8005fb4:	4618      	mov	r0, r3
 8005fb6:	f000 feb9 	bl	8006d2c <pvPortMalloc>
 8005fba:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8005fbc:	697b      	ldr	r3, [r7, #20]
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	d00e      	beq.n	8005fe0 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8005fc2:	2054      	movs	r0, #84	; 0x54
 8005fc4:	f000 feb2 	bl	8006d2c <pvPortMalloc>
 8005fc8:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005fca:	69fb      	ldr	r3, [r7, #28]
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d003      	beq.n	8005fd8 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005fd0:	69fb      	ldr	r3, [r7, #28]
 8005fd2:	697a      	ldr	r2, [r7, #20]
 8005fd4:	631a      	str	r2, [r3, #48]	; 0x30
 8005fd6:	e005      	b.n	8005fe4 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005fd8:	6978      	ldr	r0, [r7, #20]
 8005fda:	f000 ff71 	bl	8006ec0 <vPortFree>
 8005fde:	e001      	b.n	8005fe4 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005fe0:	2300      	movs	r3, #0
 8005fe2:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005fe4:	69fb      	ldr	r3, [r7, #28]
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d017      	beq.n	800601a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005fea:	69fb      	ldr	r3, [r7, #28]
 8005fec:	2200      	movs	r2, #0
 8005fee:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005ff2:	88fa      	ldrh	r2, [r7, #6]
 8005ff4:	2300      	movs	r3, #0
 8005ff6:	9303      	str	r3, [sp, #12]
 8005ff8:	69fb      	ldr	r3, [r7, #28]
 8005ffa:	9302      	str	r3, [sp, #8]
 8005ffc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ffe:	9301      	str	r3, [sp, #4]
 8006000:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006002:	9300      	str	r3, [sp, #0]
 8006004:	683b      	ldr	r3, [r7, #0]
 8006006:	68b9      	ldr	r1, [r7, #8]
 8006008:	68f8      	ldr	r0, [r7, #12]
 800600a:	f000 f80e 	bl	800602a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800600e:	69f8      	ldr	r0, [r7, #28]
 8006010:	f000 f894 	bl	800613c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8006014:	2301      	movs	r3, #1
 8006016:	61bb      	str	r3, [r7, #24]
 8006018:	e002      	b.n	8006020 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800601a:	f04f 33ff 	mov.w	r3, #4294967295
 800601e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8006020:	69bb      	ldr	r3, [r7, #24]
	}
 8006022:	4618      	mov	r0, r3
 8006024:	3720      	adds	r7, #32
 8006026:	46bd      	mov	sp, r7
 8006028:	bd80      	pop	{r7, pc}

0800602a <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800602a:	b580      	push	{r7, lr}
 800602c:	b088      	sub	sp, #32
 800602e:	af00      	add	r7, sp, #0
 8006030:	60f8      	str	r0, [r7, #12]
 8006032:	60b9      	str	r1, [r7, #8]
 8006034:	607a      	str	r2, [r7, #4]
 8006036:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8006038:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800603a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800603c:	6879      	ldr	r1, [r7, #4]
 800603e:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8006042:	440b      	add	r3, r1
 8006044:	009b      	lsls	r3, r3, #2
 8006046:	4413      	add	r3, r2
 8006048:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800604a:	69bb      	ldr	r3, [r7, #24]
 800604c:	f023 0307 	bic.w	r3, r3, #7
 8006050:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8006052:	69bb      	ldr	r3, [r7, #24]
 8006054:	f003 0307 	and.w	r3, r3, #7
 8006058:	2b00      	cmp	r3, #0
 800605a:	d00c      	beq.n	8006076 <prvInitialiseNewTask+0x4c>
	__asm volatile
 800605c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006060:	b672      	cpsid	i
 8006062:	f383 8811 	msr	BASEPRI, r3
 8006066:	f3bf 8f6f 	isb	sy
 800606a:	f3bf 8f4f 	dsb	sy
 800606e:	b662      	cpsie	i
 8006070:	617b      	str	r3, [r7, #20]
}
 8006072:	bf00      	nop
 8006074:	e7fe      	b.n	8006074 <prvInitialiseNewTask+0x4a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8006076:	68bb      	ldr	r3, [r7, #8]
 8006078:	2b00      	cmp	r3, #0
 800607a:	d01f      	beq.n	80060bc <prvInitialiseNewTask+0x92>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800607c:	2300      	movs	r3, #0
 800607e:	61fb      	str	r3, [r7, #28]
 8006080:	e012      	b.n	80060a8 <prvInitialiseNewTask+0x7e>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006082:	68ba      	ldr	r2, [r7, #8]
 8006084:	69fb      	ldr	r3, [r7, #28]
 8006086:	4413      	add	r3, r2
 8006088:	7819      	ldrb	r1, [r3, #0]
 800608a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800608c:	69fb      	ldr	r3, [r7, #28]
 800608e:	4413      	add	r3, r2
 8006090:	3334      	adds	r3, #52	; 0x34
 8006092:	460a      	mov	r2, r1
 8006094:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8006096:	68ba      	ldr	r2, [r7, #8]
 8006098:	69fb      	ldr	r3, [r7, #28]
 800609a:	4413      	add	r3, r2
 800609c:	781b      	ldrb	r3, [r3, #0]
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d006      	beq.n	80060b0 <prvInitialiseNewTask+0x86>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80060a2:	69fb      	ldr	r3, [r7, #28]
 80060a4:	3301      	adds	r3, #1
 80060a6:	61fb      	str	r3, [r7, #28]
 80060a8:	69fb      	ldr	r3, [r7, #28]
 80060aa:	2b0f      	cmp	r3, #15
 80060ac:	d9e9      	bls.n	8006082 <prvInitialiseNewTask+0x58>
 80060ae:	e000      	b.n	80060b2 <prvInitialiseNewTask+0x88>
			{
				break;
 80060b0:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80060b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060b4:	2200      	movs	r2, #0
 80060b6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80060ba:	e003      	b.n	80060c4 <prvInitialiseNewTask+0x9a>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80060bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060be:	2200      	movs	r2, #0
 80060c0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80060c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060c6:	2b06      	cmp	r3, #6
 80060c8:	d901      	bls.n	80060ce <prvInitialiseNewTask+0xa4>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80060ca:	2306      	movs	r3, #6
 80060cc:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80060ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060d0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80060d2:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80060d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060d6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80060d8:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80060da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060dc:	2200      	movs	r2, #0
 80060de:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80060e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060e2:	3304      	adds	r3, #4
 80060e4:	4618      	mov	r0, r3
 80060e6:	f7ff fe64 	bl	8005db2 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80060ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060ec:	3318      	adds	r3, #24
 80060ee:	4618      	mov	r0, r3
 80060f0:	f7ff fe5f 	bl	8005db2 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80060f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060f6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80060f8:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80060fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060fc:	f1c3 0207 	rsb	r2, r3, #7
 8006100:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006102:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006104:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006106:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006108:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800610a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800610c:	2200      	movs	r2, #0
 800610e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006110:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006112:	2200      	movs	r2, #0
 8006114:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006118:	683a      	ldr	r2, [r7, #0]
 800611a:	68f9      	ldr	r1, [r7, #12]
 800611c:	69b8      	ldr	r0, [r7, #24]
 800611e:	f000 fc13 	bl	8006948 <pxPortInitialiseStack>
 8006122:	4602      	mov	r2, r0
 8006124:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006126:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8006128:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800612a:	2b00      	cmp	r3, #0
 800612c:	d002      	beq.n	8006134 <prvInitialiseNewTask+0x10a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800612e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006130:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006132:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006134:	bf00      	nop
 8006136:	3720      	adds	r7, #32
 8006138:	46bd      	mov	sp, r7
 800613a:	bd80      	pop	{r7, pc}

0800613c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800613c:	b580      	push	{r7, lr}
 800613e:	b082      	sub	sp, #8
 8006140:	af00      	add	r7, sp, #0
 8006142:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006144:	f000 fd0a 	bl	8006b5c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006148:	4b2a      	ldr	r3, [pc, #168]	; (80061f4 <prvAddNewTaskToReadyList+0xb8>)
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	3301      	adds	r3, #1
 800614e:	4a29      	ldr	r2, [pc, #164]	; (80061f4 <prvAddNewTaskToReadyList+0xb8>)
 8006150:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8006152:	4b29      	ldr	r3, [pc, #164]	; (80061f8 <prvAddNewTaskToReadyList+0xbc>)
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	2b00      	cmp	r3, #0
 8006158:	d109      	bne.n	800616e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800615a:	4a27      	ldr	r2, [pc, #156]	; (80061f8 <prvAddNewTaskToReadyList+0xbc>)
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006160:	4b24      	ldr	r3, [pc, #144]	; (80061f4 <prvAddNewTaskToReadyList+0xb8>)
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	2b01      	cmp	r3, #1
 8006166:	d110      	bne.n	800618a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006168:	f000 fac8 	bl	80066fc <prvInitialiseTaskLists>
 800616c:	e00d      	b.n	800618a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800616e:	4b23      	ldr	r3, [pc, #140]	; (80061fc <prvAddNewTaskToReadyList+0xc0>)
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	2b00      	cmp	r3, #0
 8006174:	d109      	bne.n	800618a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8006176:	4b20      	ldr	r3, [pc, #128]	; (80061f8 <prvAddNewTaskToReadyList+0xbc>)
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006180:	429a      	cmp	r2, r3
 8006182:	d802      	bhi.n	800618a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006184:	4a1c      	ldr	r2, [pc, #112]	; (80061f8 <prvAddNewTaskToReadyList+0xbc>)
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800618a:	4b1d      	ldr	r3, [pc, #116]	; (8006200 <prvAddNewTaskToReadyList+0xc4>)
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	3301      	adds	r3, #1
 8006190:	4a1b      	ldr	r2, [pc, #108]	; (8006200 <prvAddNewTaskToReadyList+0xc4>)
 8006192:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006198:	2201      	movs	r2, #1
 800619a:	409a      	lsls	r2, r3
 800619c:	4b19      	ldr	r3, [pc, #100]	; (8006204 <prvAddNewTaskToReadyList+0xc8>)
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	4313      	orrs	r3, r2
 80061a2:	4a18      	ldr	r2, [pc, #96]	; (8006204 <prvAddNewTaskToReadyList+0xc8>)
 80061a4:	6013      	str	r3, [r2, #0]
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80061aa:	4613      	mov	r3, r2
 80061ac:	009b      	lsls	r3, r3, #2
 80061ae:	4413      	add	r3, r2
 80061b0:	009b      	lsls	r3, r3, #2
 80061b2:	4a15      	ldr	r2, [pc, #84]	; (8006208 <prvAddNewTaskToReadyList+0xcc>)
 80061b4:	441a      	add	r2, r3
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	3304      	adds	r3, #4
 80061ba:	4619      	mov	r1, r3
 80061bc:	4610      	mov	r0, r2
 80061be:	f7ff fe05 	bl	8005dcc <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80061c2:	f000 fcff 	bl	8006bc4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80061c6:	4b0d      	ldr	r3, [pc, #52]	; (80061fc <prvAddNewTaskToReadyList+0xc0>)
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d00e      	beq.n	80061ec <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80061ce:	4b0a      	ldr	r3, [pc, #40]	; (80061f8 <prvAddNewTaskToReadyList+0xbc>)
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061d8:	429a      	cmp	r2, r3
 80061da:	d207      	bcs.n	80061ec <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80061dc:	4b0b      	ldr	r3, [pc, #44]	; (800620c <prvAddNewTaskToReadyList+0xd0>)
 80061de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80061e2:	601a      	str	r2, [r3, #0]
 80061e4:	f3bf 8f4f 	dsb	sy
 80061e8:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80061ec:	bf00      	nop
 80061ee:	3708      	adds	r7, #8
 80061f0:	46bd      	mov	sp, r7
 80061f2:	bd80      	pop	{r7, pc}
 80061f4:	20001840 	.word	0x20001840
 80061f8:	20001740 	.word	0x20001740
 80061fc:	2000184c 	.word	0x2000184c
 8006200:	2000185c 	.word	0x2000185c
 8006204:	20001848 	.word	0x20001848
 8006208:	20001744 	.word	0x20001744
 800620c:	e000ed04 	.word	0xe000ed04

08006210 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8006210:	b580      	push	{r7, lr}
 8006212:	b084      	sub	sp, #16
 8006214:	af00      	add	r7, sp, #0
 8006216:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8006218:	2300      	movs	r3, #0
 800621a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	2b00      	cmp	r3, #0
 8006220:	d019      	beq.n	8006256 <vTaskDelay+0x46>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8006222:	4b14      	ldr	r3, [pc, #80]	; (8006274 <vTaskDelay+0x64>)
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	2b00      	cmp	r3, #0
 8006228:	d00c      	beq.n	8006244 <vTaskDelay+0x34>
	__asm volatile
 800622a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800622e:	b672      	cpsid	i
 8006230:	f383 8811 	msr	BASEPRI, r3
 8006234:	f3bf 8f6f 	isb	sy
 8006238:	f3bf 8f4f 	dsb	sy
 800623c:	b662      	cpsie	i
 800623e:	60bb      	str	r3, [r7, #8]
}
 8006240:	bf00      	nop
 8006242:	e7fe      	b.n	8006242 <vTaskDelay+0x32>
			vTaskSuspendAll();
 8006244:	f000 f87e 	bl	8006344 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8006248:	2100      	movs	r1, #0
 800624a:	6878      	ldr	r0, [r7, #4]
 800624c:	f000 fb16 	bl	800687c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8006250:	f000 f886 	bl	8006360 <xTaskResumeAll>
 8006254:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	2b00      	cmp	r3, #0
 800625a:	d107      	bne.n	800626c <vTaskDelay+0x5c>
		{
			portYIELD_WITHIN_API();
 800625c:	4b06      	ldr	r3, [pc, #24]	; (8006278 <vTaskDelay+0x68>)
 800625e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006262:	601a      	str	r2, [r3, #0]
 8006264:	f3bf 8f4f 	dsb	sy
 8006268:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800626c:	bf00      	nop
 800626e:	3710      	adds	r7, #16
 8006270:	46bd      	mov	sp, r7
 8006272:	bd80      	pop	{r7, pc}
 8006274:	20001868 	.word	0x20001868
 8006278:	e000ed04 	.word	0xe000ed04

0800627c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800627c:	b580      	push	{r7, lr}
 800627e:	b08a      	sub	sp, #40	; 0x28
 8006280:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8006282:	2300      	movs	r3, #0
 8006284:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8006286:	2300      	movs	r3, #0
 8006288:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800628a:	463a      	mov	r2, r7
 800628c:	1d39      	adds	r1, r7, #4
 800628e:	f107 0308 	add.w	r3, r7, #8
 8006292:	4618      	mov	r0, r3
 8006294:	f7fa fb38 	bl	8000908 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006298:	6839      	ldr	r1, [r7, #0]
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	68ba      	ldr	r2, [r7, #8]
 800629e:	9202      	str	r2, [sp, #8]
 80062a0:	9301      	str	r3, [sp, #4]
 80062a2:	2300      	movs	r3, #0
 80062a4:	9300      	str	r3, [sp, #0]
 80062a6:	2300      	movs	r3, #0
 80062a8:	460a      	mov	r2, r1
 80062aa:	4920      	ldr	r1, [pc, #128]	; (800632c <vTaskStartScheduler+0xb0>)
 80062ac:	4820      	ldr	r0, [pc, #128]	; (8006330 <vTaskStartScheduler+0xb4>)
 80062ae:	f7ff fe14 	bl	8005eda <xTaskCreateStatic>
 80062b2:	4603      	mov	r3, r0
 80062b4:	4a1f      	ldr	r2, [pc, #124]	; (8006334 <vTaskStartScheduler+0xb8>)
 80062b6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80062b8:	4b1e      	ldr	r3, [pc, #120]	; (8006334 <vTaskStartScheduler+0xb8>)
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	2b00      	cmp	r3, #0
 80062be:	d002      	beq.n	80062c6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80062c0:	2301      	movs	r3, #1
 80062c2:	617b      	str	r3, [r7, #20]
 80062c4:	e001      	b.n	80062ca <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80062c6:	2300      	movs	r3, #0
 80062c8:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80062ca:	697b      	ldr	r3, [r7, #20]
 80062cc:	2b01      	cmp	r3, #1
 80062ce:	d118      	bne.n	8006302 <vTaskStartScheduler+0x86>
	__asm volatile
 80062d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062d4:	b672      	cpsid	i
 80062d6:	f383 8811 	msr	BASEPRI, r3
 80062da:	f3bf 8f6f 	isb	sy
 80062de:	f3bf 8f4f 	dsb	sy
 80062e2:	b662      	cpsie	i
 80062e4:	613b      	str	r3, [r7, #16]
}
 80062e6:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80062e8:	4b13      	ldr	r3, [pc, #76]	; (8006338 <vTaskStartScheduler+0xbc>)
 80062ea:	f04f 32ff 	mov.w	r2, #4294967295
 80062ee:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80062f0:	4b12      	ldr	r3, [pc, #72]	; (800633c <vTaskStartScheduler+0xc0>)
 80062f2:	2201      	movs	r2, #1
 80062f4:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80062f6:	4b12      	ldr	r3, [pc, #72]	; (8006340 <vTaskStartScheduler+0xc4>)
 80062f8:	2200      	movs	r2, #0
 80062fa:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80062fc:	f000 fbb0 	bl	8006a60 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8006300:	e010      	b.n	8006324 <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006302:	697b      	ldr	r3, [r7, #20]
 8006304:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006308:	d10c      	bne.n	8006324 <vTaskStartScheduler+0xa8>
	__asm volatile
 800630a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800630e:	b672      	cpsid	i
 8006310:	f383 8811 	msr	BASEPRI, r3
 8006314:	f3bf 8f6f 	isb	sy
 8006318:	f3bf 8f4f 	dsb	sy
 800631c:	b662      	cpsie	i
 800631e:	60fb      	str	r3, [r7, #12]
}
 8006320:	bf00      	nop
 8006322:	e7fe      	b.n	8006322 <vTaskStartScheduler+0xa6>
}
 8006324:	bf00      	nop
 8006326:	3718      	adds	r7, #24
 8006328:	46bd      	mov	sp, r7
 800632a:	bd80      	pop	{r7, pc}
 800632c:	080071bc 	.word	0x080071bc
 8006330:	080066cd 	.word	0x080066cd
 8006334:	20001864 	.word	0x20001864
 8006338:	20001860 	.word	0x20001860
 800633c:	2000184c 	.word	0x2000184c
 8006340:	20001844 	.word	0x20001844

08006344 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006344:	b480      	push	{r7}
 8006346:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8006348:	4b04      	ldr	r3, [pc, #16]	; (800635c <vTaskSuspendAll+0x18>)
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	3301      	adds	r3, #1
 800634e:	4a03      	ldr	r2, [pc, #12]	; (800635c <vTaskSuspendAll+0x18>)
 8006350:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8006352:	bf00      	nop
 8006354:	46bd      	mov	sp, r7
 8006356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800635a:	4770      	bx	lr
 800635c:	20001868 	.word	0x20001868

08006360 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006360:	b580      	push	{r7, lr}
 8006362:	b084      	sub	sp, #16
 8006364:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8006366:	2300      	movs	r3, #0
 8006368:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800636a:	2300      	movs	r3, #0
 800636c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800636e:	4b42      	ldr	r3, [pc, #264]	; (8006478 <xTaskResumeAll+0x118>)
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	2b00      	cmp	r3, #0
 8006374:	d10c      	bne.n	8006390 <xTaskResumeAll+0x30>
	__asm volatile
 8006376:	f04f 0350 	mov.w	r3, #80	; 0x50
 800637a:	b672      	cpsid	i
 800637c:	f383 8811 	msr	BASEPRI, r3
 8006380:	f3bf 8f6f 	isb	sy
 8006384:	f3bf 8f4f 	dsb	sy
 8006388:	b662      	cpsie	i
 800638a:	603b      	str	r3, [r7, #0]
}
 800638c:	bf00      	nop
 800638e:	e7fe      	b.n	800638e <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006390:	f000 fbe4 	bl	8006b5c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006394:	4b38      	ldr	r3, [pc, #224]	; (8006478 <xTaskResumeAll+0x118>)
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	3b01      	subs	r3, #1
 800639a:	4a37      	ldr	r2, [pc, #220]	; (8006478 <xTaskResumeAll+0x118>)
 800639c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800639e:	4b36      	ldr	r3, [pc, #216]	; (8006478 <xTaskResumeAll+0x118>)
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	d161      	bne.n	800646a <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80063a6:	4b35      	ldr	r3, [pc, #212]	; (800647c <xTaskResumeAll+0x11c>)
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d05d      	beq.n	800646a <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80063ae:	e02e      	b.n	800640e <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80063b0:	4b33      	ldr	r3, [pc, #204]	; (8006480 <xTaskResumeAll+0x120>)
 80063b2:	68db      	ldr	r3, [r3, #12]
 80063b4:	68db      	ldr	r3, [r3, #12]
 80063b6:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	3318      	adds	r3, #24
 80063bc:	4618      	mov	r0, r3
 80063be:	f7ff fd62 	bl	8005e86 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	3304      	adds	r3, #4
 80063c6:	4618      	mov	r0, r3
 80063c8:	f7ff fd5d 	bl	8005e86 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063d0:	2201      	movs	r2, #1
 80063d2:	409a      	lsls	r2, r3
 80063d4:	4b2b      	ldr	r3, [pc, #172]	; (8006484 <xTaskResumeAll+0x124>)
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	4313      	orrs	r3, r2
 80063da:	4a2a      	ldr	r2, [pc, #168]	; (8006484 <xTaskResumeAll+0x124>)
 80063dc:	6013      	str	r3, [r2, #0]
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80063e2:	4613      	mov	r3, r2
 80063e4:	009b      	lsls	r3, r3, #2
 80063e6:	4413      	add	r3, r2
 80063e8:	009b      	lsls	r3, r3, #2
 80063ea:	4a27      	ldr	r2, [pc, #156]	; (8006488 <xTaskResumeAll+0x128>)
 80063ec:	441a      	add	r2, r3
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	3304      	adds	r3, #4
 80063f2:	4619      	mov	r1, r3
 80063f4:	4610      	mov	r0, r2
 80063f6:	f7ff fce9 	bl	8005dcc <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80063fe:	4b23      	ldr	r3, [pc, #140]	; (800648c <xTaskResumeAll+0x12c>)
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006404:	429a      	cmp	r2, r3
 8006406:	d302      	bcc.n	800640e <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8006408:	4b21      	ldr	r3, [pc, #132]	; (8006490 <xTaskResumeAll+0x130>)
 800640a:	2201      	movs	r2, #1
 800640c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800640e:	4b1c      	ldr	r3, [pc, #112]	; (8006480 <xTaskResumeAll+0x120>)
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	2b00      	cmp	r3, #0
 8006414:	d1cc      	bne.n	80063b0 <xTaskResumeAll+0x50>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	2b00      	cmp	r3, #0
 800641a:	d001      	beq.n	8006420 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800641c:	f000 fa0e 	bl	800683c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8006420:	4b1c      	ldr	r3, [pc, #112]	; (8006494 <xTaskResumeAll+0x134>)
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	2b00      	cmp	r3, #0
 800642a:	d010      	beq.n	800644e <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800642c:	f000 f836 	bl	800649c <xTaskIncrementTick>
 8006430:	4603      	mov	r3, r0
 8006432:	2b00      	cmp	r3, #0
 8006434:	d002      	beq.n	800643c <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8006436:	4b16      	ldr	r3, [pc, #88]	; (8006490 <xTaskResumeAll+0x130>)
 8006438:	2201      	movs	r2, #1
 800643a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	3b01      	subs	r3, #1
 8006440:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	2b00      	cmp	r3, #0
 8006446:	d1f1      	bne.n	800642c <xTaskResumeAll+0xcc>

						uxPendedTicks = 0;
 8006448:	4b12      	ldr	r3, [pc, #72]	; (8006494 <xTaskResumeAll+0x134>)
 800644a:	2200      	movs	r2, #0
 800644c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800644e:	4b10      	ldr	r3, [pc, #64]	; (8006490 <xTaskResumeAll+0x130>)
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	2b00      	cmp	r3, #0
 8006454:	d009      	beq.n	800646a <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8006456:	2301      	movs	r3, #1
 8006458:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800645a:	4b0f      	ldr	r3, [pc, #60]	; (8006498 <xTaskResumeAll+0x138>)
 800645c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006460:	601a      	str	r2, [r3, #0]
 8006462:	f3bf 8f4f 	dsb	sy
 8006466:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800646a:	f000 fbab 	bl	8006bc4 <vPortExitCritical>

	return xAlreadyYielded;
 800646e:	68bb      	ldr	r3, [r7, #8]
}
 8006470:	4618      	mov	r0, r3
 8006472:	3710      	adds	r7, #16
 8006474:	46bd      	mov	sp, r7
 8006476:	bd80      	pop	{r7, pc}
 8006478:	20001868 	.word	0x20001868
 800647c:	20001840 	.word	0x20001840
 8006480:	20001800 	.word	0x20001800
 8006484:	20001848 	.word	0x20001848
 8006488:	20001744 	.word	0x20001744
 800648c:	20001740 	.word	0x20001740
 8006490:	20001854 	.word	0x20001854
 8006494:	20001850 	.word	0x20001850
 8006498:	e000ed04 	.word	0xe000ed04

0800649c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800649c:	b580      	push	{r7, lr}
 800649e:	b086      	sub	sp, #24
 80064a0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80064a2:	2300      	movs	r3, #0
 80064a4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80064a6:	4b4f      	ldr	r3, [pc, #316]	; (80065e4 <xTaskIncrementTick+0x148>)
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	f040 808a 	bne.w	80065c4 <xTaskIncrementTick+0x128>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80064b0:	4b4d      	ldr	r3, [pc, #308]	; (80065e8 <xTaskIncrementTick+0x14c>)
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	3301      	adds	r3, #1
 80064b6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80064b8:	4a4b      	ldr	r2, [pc, #300]	; (80065e8 <xTaskIncrementTick+0x14c>)
 80064ba:	693b      	ldr	r3, [r7, #16]
 80064bc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80064be:	693b      	ldr	r3, [r7, #16]
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	d122      	bne.n	800650a <xTaskIncrementTick+0x6e>
		{
			taskSWITCH_DELAYED_LISTS();
 80064c4:	4b49      	ldr	r3, [pc, #292]	; (80065ec <xTaskIncrementTick+0x150>)
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	d00c      	beq.n	80064e8 <xTaskIncrementTick+0x4c>
	__asm volatile
 80064ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064d2:	b672      	cpsid	i
 80064d4:	f383 8811 	msr	BASEPRI, r3
 80064d8:	f3bf 8f6f 	isb	sy
 80064dc:	f3bf 8f4f 	dsb	sy
 80064e0:	b662      	cpsie	i
 80064e2:	603b      	str	r3, [r7, #0]
}
 80064e4:	bf00      	nop
 80064e6:	e7fe      	b.n	80064e6 <xTaskIncrementTick+0x4a>
 80064e8:	4b40      	ldr	r3, [pc, #256]	; (80065ec <xTaskIncrementTick+0x150>)
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	60fb      	str	r3, [r7, #12]
 80064ee:	4b40      	ldr	r3, [pc, #256]	; (80065f0 <xTaskIncrementTick+0x154>)
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	4a3e      	ldr	r2, [pc, #248]	; (80065ec <xTaskIncrementTick+0x150>)
 80064f4:	6013      	str	r3, [r2, #0]
 80064f6:	4a3e      	ldr	r2, [pc, #248]	; (80065f0 <xTaskIncrementTick+0x154>)
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	6013      	str	r3, [r2, #0]
 80064fc:	4b3d      	ldr	r3, [pc, #244]	; (80065f4 <xTaskIncrementTick+0x158>)
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	3301      	adds	r3, #1
 8006502:	4a3c      	ldr	r2, [pc, #240]	; (80065f4 <xTaskIncrementTick+0x158>)
 8006504:	6013      	str	r3, [r2, #0]
 8006506:	f000 f999 	bl	800683c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800650a:	4b3b      	ldr	r3, [pc, #236]	; (80065f8 <xTaskIncrementTick+0x15c>)
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	693a      	ldr	r2, [r7, #16]
 8006510:	429a      	cmp	r2, r3
 8006512:	d348      	bcc.n	80065a6 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006514:	4b35      	ldr	r3, [pc, #212]	; (80065ec <xTaskIncrementTick+0x150>)
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	2b00      	cmp	r3, #0
 800651c:	d104      	bne.n	8006528 <xTaskIncrementTick+0x8c>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800651e:	4b36      	ldr	r3, [pc, #216]	; (80065f8 <xTaskIncrementTick+0x15c>)
 8006520:	f04f 32ff 	mov.w	r2, #4294967295
 8006524:	601a      	str	r2, [r3, #0]
					break;
 8006526:	e03e      	b.n	80065a6 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006528:	4b30      	ldr	r3, [pc, #192]	; (80065ec <xTaskIncrementTick+0x150>)
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	68db      	ldr	r3, [r3, #12]
 800652e:	68db      	ldr	r3, [r3, #12]
 8006530:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006532:	68bb      	ldr	r3, [r7, #8]
 8006534:	685b      	ldr	r3, [r3, #4]
 8006536:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8006538:	693a      	ldr	r2, [r7, #16]
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	429a      	cmp	r2, r3
 800653e:	d203      	bcs.n	8006548 <xTaskIncrementTick+0xac>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8006540:	4a2d      	ldr	r2, [pc, #180]	; (80065f8 <xTaskIncrementTick+0x15c>)
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8006546:	e02e      	b.n	80065a6 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006548:	68bb      	ldr	r3, [r7, #8]
 800654a:	3304      	adds	r3, #4
 800654c:	4618      	mov	r0, r3
 800654e:	f7ff fc9a 	bl	8005e86 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006552:	68bb      	ldr	r3, [r7, #8]
 8006554:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006556:	2b00      	cmp	r3, #0
 8006558:	d004      	beq.n	8006564 <xTaskIncrementTick+0xc8>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800655a:	68bb      	ldr	r3, [r7, #8]
 800655c:	3318      	adds	r3, #24
 800655e:	4618      	mov	r0, r3
 8006560:	f7ff fc91 	bl	8005e86 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8006564:	68bb      	ldr	r3, [r7, #8]
 8006566:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006568:	2201      	movs	r2, #1
 800656a:	409a      	lsls	r2, r3
 800656c:	4b23      	ldr	r3, [pc, #140]	; (80065fc <xTaskIncrementTick+0x160>)
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	4313      	orrs	r3, r2
 8006572:	4a22      	ldr	r2, [pc, #136]	; (80065fc <xTaskIncrementTick+0x160>)
 8006574:	6013      	str	r3, [r2, #0]
 8006576:	68bb      	ldr	r3, [r7, #8]
 8006578:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800657a:	4613      	mov	r3, r2
 800657c:	009b      	lsls	r3, r3, #2
 800657e:	4413      	add	r3, r2
 8006580:	009b      	lsls	r3, r3, #2
 8006582:	4a1f      	ldr	r2, [pc, #124]	; (8006600 <xTaskIncrementTick+0x164>)
 8006584:	441a      	add	r2, r3
 8006586:	68bb      	ldr	r3, [r7, #8]
 8006588:	3304      	adds	r3, #4
 800658a:	4619      	mov	r1, r3
 800658c:	4610      	mov	r0, r2
 800658e:	f7ff fc1d 	bl	8005dcc <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006592:	68bb      	ldr	r3, [r7, #8]
 8006594:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006596:	4b1b      	ldr	r3, [pc, #108]	; (8006604 <xTaskIncrementTick+0x168>)
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800659c:	429a      	cmp	r2, r3
 800659e:	d3b9      	bcc.n	8006514 <xTaskIncrementTick+0x78>
						{
							xSwitchRequired = pdTRUE;
 80065a0:	2301      	movs	r3, #1
 80065a2:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80065a4:	e7b6      	b.n	8006514 <xTaskIncrementTick+0x78>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80065a6:	4b17      	ldr	r3, [pc, #92]	; (8006604 <xTaskIncrementTick+0x168>)
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80065ac:	4914      	ldr	r1, [pc, #80]	; (8006600 <xTaskIncrementTick+0x164>)
 80065ae:	4613      	mov	r3, r2
 80065b0:	009b      	lsls	r3, r3, #2
 80065b2:	4413      	add	r3, r2
 80065b4:	009b      	lsls	r3, r3, #2
 80065b6:	440b      	add	r3, r1
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	2b01      	cmp	r3, #1
 80065bc:	d907      	bls.n	80065ce <xTaskIncrementTick+0x132>
			{
				xSwitchRequired = pdTRUE;
 80065be:	2301      	movs	r3, #1
 80065c0:	617b      	str	r3, [r7, #20]
 80065c2:	e004      	b.n	80065ce <xTaskIncrementTick+0x132>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80065c4:	4b10      	ldr	r3, [pc, #64]	; (8006608 <xTaskIncrementTick+0x16c>)
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	3301      	adds	r3, #1
 80065ca:	4a0f      	ldr	r2, [pc, #60]	; (8006608 <xTaskIncrementTick+0x16c>)
 80065cc:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80065ce:	4b0f      	ldr	r3, [pc, #60]	; (800660c <xTaskIncrementTick+0x170>)
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d001      	beq.n	80065da <xTaskIncrementTick+0x13e>
		{
			xSwitchRequired = pdTRUE;
 80065d6:	2301      	movs	r3, #1
 80065d8:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80065da:	697b      	ldr	r3, [r7, #20]
}
 80065dc:	4618      	mov	r0, r3
 80065de:	3718      	adds	r7, #24
 80065e0:	46bd      	mov	sp, r7
 80065e2:	bd80      	pop	{r7, pc}
 80065e4:	20001868 	.word	0x20001868
 80065e8:	20001844 	.word	0x20001844
 80065ec:	200017f8 	.word	0x200017f8
 80065f0:	200017fc 	.word	0x200017fc
 80065f4:	20001858 	.word	0x20001858
 80065f8:	20001860 	.word	0x20001860
 80065fc:	20001848 	.word	0x20001848
 8006600:	20001744 	.word	0x20001744
 8006604:	20001740 	.word	0x20001740
 8006608:	20001850 	.word	0x20001850
 800660c:	20001854 	.word	0x20001854

08006610 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006610:	b480      	push	{r7}
 8006612:	b087      	sub	sp, #28
 8006614:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8006616:	4b28      	ldr	r3, [pc, #160]	; (80066b8 <vTaskSwitchContext+0xa8>)
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	2b00      	cmp	r3, #0
 800661c:	d003      	beq.n	8006626 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800661e:	4b27      	ldr	r3, [pc, #156]	; (80066bc <vTaskSwitchContext+0xac>)
 8006620:	2201      	movs	r2, #1
 8006622:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006624:	e041      	b.n	80066aa <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 8006626:	4b25      	ldr	r3, [pc, #148]	; (80066bc <vTaskSwitchContext+0xac>)
 8006628:	2200      	movs	r2, #0
 800662a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800662c:	4b24      	ldr	r3, [pc, #144]	; (80066c0 <vTaskSwitchContext+0xb0>)
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	fab3 f383 	clz	r3, r3
 8006638:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800663a:	7afb      	ldrb	r3, [r7, #11]
 800663c:	f1c3 031f 	rsb	r3, r3, #31
 8006640:	617b      	str	r3, [r7, #20]
 8006642:	4920      	ldr	r1, [pc, #128]	; (80066c4 <vTaskSwitchContext+0xb4>)
 8006644:	697a      	ldr	r2, [r7, #20]
 8006646:	4613      	mov	r3, r2
 8006648:	009b      	lsls	r3, r3, #2
 800664a:	4413      	add	r3, r2
 800664c:	009b      	lsls	r3, r3, #2
 800664e:	440b      	add	r3, r1
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	2b00      	cmp	r3, #0
 8006654:	d10c      	bne.n	8006670 <vTaskSwitchContext+0x60>
	__asm volatile
 8006656:	f04f 0350 	mov.w	r3, #80	; 0x50
 800665a:	b672      	cpsid	i
 800665c:	f383 8811 	msr	BASEPRI, r3
 8006660:	f3bf 8f6f 	isb	sy
 8006664:	f3bf 8f4f 	dsb	sy
 8006668:	b662      	cpsie	i
 800666a:	607b      	str	r3, [r7, #4]
}
 800666c:	bf00      	nop
 800666e:	e7fe      	b.n	800666e <vTaskSwitchContext+0x5e>
 8006670:	697a      	ldr	r2, [r7, #20]
 8006672:	4613      	mov	r3, r2
 8006674:	009b      	lsls	r3, r3, #2
 8006676:	4413      	add	r3, r2
 8006678:	009b      	lsls	r3, r3, #2
 800667a:	4a12      	ldr	r2, [pc, #72]	; (80066c4 <vTaskSwitchContext+0xb4>)
 800667c:	4413      	add	r3, r2
 800667e:	613b      	str	r3, [r7, #16]
 8006680:	693b      	ldr	r3, [r7, #16]
 8006682:	685b      	ldr	r3, [r3, #4]
 8006684:	685a      	ldr	r2, [r3, #4]
 8006686:	693b      	ldr	r3, [r7, #16]
 8006688:	605a      	str	r2, [r3, #4]
 800668a:	693b      	ldr	r3, [r7, #16]
 800668c:	685a      	ldr	r2, [r3, #4]
 800668e:	693b      	ldr	r3, [r7, #16]
 8006690:	3308      	adds	r3, #8
 8006692:	429a      	cmp	r2, r3
 8006694:	d104      	bne.n	80066a0 <vTaskSwitchContext+0x90>
 8006696:	693b      	ldr	r3, [r7, #16]
 8006698:	685b      	ldr	r3, [r3, #4]
 800669a:	685a      	ldr	r2, [r3, #4]
 800669c:	693b      	ldr	r3, [r7, #16]
 800669e:	605a      	str	r2, [r3, #4]
 80066a0:	693b      	ldr	r3, [r7, #16]
 80066a2:	685b      	ldr	r3, [r3, #4]
 80066a4:	68db      	ldr	r3, [r3, #12]
 80066a6:	4a08      	ldr	r2, [pc, #32]	; (80066c8 <vTaskSwitchContext+0xb8>)
 80066a8:	6013      	str	r3, [r2, #0]
}
 80066aa:	bf00      	nop
 80066ac:	371c      	adds	r7, #28
 80066ae:	46bd      	mov	sp, r7
 80066b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066b4:	4770      	bx	lr
 80066b6:	bf00      	nop
 80066b8:	20001868 	.word	0x20001868
 80066bc:	20001854 	.word	0x20001854
 80066c0:	20001848 	.word	0x20001848
 80066c4:	20001744 	.word	0x20001744
 80066c8:	20001740 	.word	0x20001740

080066cc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80066cc:	b580      	push	{r7, lr}
 80066ce:	b082      	sub	sp, #8
 80066d0:	af00      	add	r7, sp, #0
 80066d2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80066d4:	f000 f852 	bl	800677c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80066d8:	4b06      	ldr	r3, [pc, #24]	; (80066f4 <prvIdleTask+0x28>)
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	2b01      	cmp	r3, #1
 80066de:	d9f9      	bls.n	80066d4 <prvIdleTask+0x8>
			{
				taskYIELD();
 80066e0:	4b05      	ldr	r3, [pc, #20]	; (80066f8 <prvIdleTask+0x2c>)
 80066e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80066e6:	601a      	str	r2, [r3, #0]
 80066e8:	f3bf 8f4f 	dsb	sy
 80066ec:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80066f0:	e7f0      	b.n	80066d4 <prvIdleTask+0x8>
 80066f2:	bf00      	nop
 80066f4:	20001744 	.word	0x20001744
 80066f8:	e000ed04 	.word	0xe000ed04

080066fc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80066fc:	b580      	push	{r7, lr}
 80066fe:	b082      	sub	sp, #8
 8006700:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006702:	2300      	movs	r3, #0
 8006704:	607b      	str	r3, [r7, #4]
 8006706:	e00c      	b.n	8006722 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006708:	687a      	ldr	r2, [r7, #4]
 800670a:	4613      	mov	r3, r2
 800670c:	009b      	lsls	r3, r3, #2
 800670e:	4413      	add	r3, r2
 8006710:	009b      	lsls	r3, r3, #2
 8006712:	4a12      	ldr	r2, [pc, #72]	; (800675c <prvInitialiseTaskLists+0x60>)
 8006714:	4413      	add	r3, r2
 8006716:	4618      	mov	r0, r3
 8006718:	f7ff fb2b 	bl	8005d72 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	3301      	adds	r3, #1
 8006720:	607b      	str	r3, [r7, #4]
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	2b06      	cmp	r3, #6
 8006726:	d9ef      	bls.n	8006708 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006728:	480d      	ldr	r0, [pc, #52]	; (8006760 <prvInitialiseTaskLists+0x64>)
 800672a:	f7ff fb22 	bl	8005d72 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800672e:	480d      	ldr	r0, [pc, #52]	; (8006764 <prvInitialiseTaskLists+0x68>)
 8006730:	f7ff fb1f 	bl	8005d72 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006734:	480c      	ldr	r0, [pc, #48]	; (8006768 <prvInitialiseTaskLists+0x6c>)
 8006736:	f7ff fb1c 	bl	8005d72 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800673a:	480c      	ldr	r0, [pc, #48]	; (800676c <prvInitialiseTaskLists+0x70>)
 800673c:	f7ff fb19 	bl	8005d72 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006740:	480b      	ldr	r0, [pc, #44]	; (8006770 <prvInitialiseTaskLists+0x74>)
 8006742:	f7ff fb16 	bl	8005d72 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8006746:	4b0b      	ldr	r3, [pc, #44]	; (8006774 <prvInitialiseTaskLists+0x78>)
 8006748:	4a05      	ldr	r2, [pc, #20]	; (8006760 <prvInitialiseTaskLists+0x64>)
 800674a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800674c:	4b0a      	ldr	r3, [pc, #40]	; (8006778 <prvInitialiseTaskLists+0x7c>)
 800674e:	4a05      	ldr	r2, [pc, #20]	; (8006764 <prvInitialiseTaskLists+0x68>)
 8006750:	601a      	str	r2, [r3, #0]
}
 8006752:	bf00      	nop
 8006754:	3708      	adds	r7, #8
 8006756:	46bd      	mov	sp, r7
 8006758:	bd80      	pop	{r7, pc}
 800675a:	bf00      	nop
 800675c:	20001744 	.word	0x20001744
 8006760:	200017d0 	.word	0x200017d0
 8006764:	200017e4 	.word	0x200017e4
 8006768:	20001800 	.word	0x20001800
 800676c:	20001814 	.word	0x20001814
 8006770:	2000182c 	.word	0x2000182c
 8006774:	200017f8 	.word	0x200017f8
 8006778:	200017fc 	.word	0x200017fc

0800677c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800677c:	b580      	push	{r7, lr}
 800677e:	b082      	sub	sp, #8
 8006780:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006782:	e019      	b.n	80067b8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8006784:	f000 f9ea 	bl	8006b5c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006788:	4b10      	ldr	r3, [pc, #64]	; (80067cc <prvCheckTasksWaitingTermination+0x50>)
 800678a:	68db      	ldr	r3, [r3, #12]
 800678c:	68db      	ldr	r3, [r3, #12]
 800678e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	3304      	adds	r3, #4
 8006794:	4618      	mov	r0, r3
 8006796:	f7ff fb76 	bl	8005e86 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800679a:	4b0d      	ldr	r3, [pc, #52]	; (80067d0 <prvCheckTasksWaitingTermination+0x54>)
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	3b01      	subs	r3, #1
 80067a0:	4a0b      	ldr	r2, [pc, #44]	; (80067d0 <prvCheckTasksWaitingTermination+0x54>)
 80067a2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80067a4:	4b0b      	ldr	r3, [pc, #44]	; (80067d4 <prvCheckTasksWaitingTermination+0x58>)
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	3b01      	subs	r3, #1
 80067aa:	4a0a      	ldr	r2, [pc, #40]	; (80067d4 <prvCheckTasksWaitingTermination+0x58>)
 80067ac:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80067ae:	f000 fa09 	bl	8006bc4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80067b2:	6878      	ldr	r0, [r7, #4]
 80067b4:	f000 f810 	bl	80067d8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80067b8:	4b06      	ldr	r3, [pc, #24]	; (80067d4 <prvCheckTasksWaitingTermination+0x58>)
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	2b00      	cmp	r3, #0
 80067be:	d1e1      	bne.n	8006784 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80067c0:	bf00      	nop
 80067c2:	bf00      	nop
 80067c4:	3708      	adds	r7, #8
 80067c6:	46bd      	mov	sp, r7
 80067c8:	bd80      	pop	{r7, pc}
 80067ca:	bf00      	nop
 80067cc:	20001814 	.word	0x20001814
 80067d0:	20001840 	.word	0x20001840
 80067d4:	20001828 	.word	0x20001828

080067d8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80067d8:	b580      	push	{r7, lr}
 80067da:	b084      	sub	sp, #16
 80067dc:	af00      	add	r7, sp, #0
 80067de:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	d108      	bne.n	80067fc <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067ee:	4618      	mov	r0, r3
 80067f0:	f000 fb66 	bl	8006ec0 <vPortFree>
				vPortFree( pxTCB );
 80067f4:	6878      	ldr	r0, [r7, #4]
 80067f6:	f000 fb63 	bl	8006ec0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80067fa:	e01a      	b.n	8006832 <prvDeleteTCB+0x5a>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006802:	2b01      	cmp	r3, #1
 8006804:	d103      	bne.n	800680e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8006806:	6878      	ldr	r0, [r7, #4]
 8006808:	f000 fb5a 	bl	8006ec0 <vPortFree>
	}
 800680c:	e011      	b.n	8006832 <prvDeleteTCB+0x5a>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006814:	2b02      	cmp	r3, #2
 8006816:	d00c      	beq.n	8006832 <prvDeleteTCB+0x5a>
	__asm volatile
 8006818:	f04f 0350 	mov.w	r3, #80	; 0x50
 800681c:	b672      	cpsid	i
 800681e:	f383 8811 	msr	BASEPRI, r3
 8006822:	f3bf 8f6f 	isb	sy
 8006826:	f3bf 8f4f 	dsb	sy
 800682a:	b662      	cpsie	i
 800682c:	60fb      	str	r3, [r7, #12]
}
 800682e:	bf00      	nop
 8006830:	e7fe      	b.n	8006830 <prvDeleteTCB+0x58>
	}
 8006832:	bf00      	nop
 8006834:	3710      	adds	r7, #16
 8006836:	46bd      	mov	sp, r7
 8006838:	bd80      	pop	{r7, pc}
	...

0800683c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800683c:	b480      	push	{r7}
 800683e:	b083      	sub	sp, #12
 8006840:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006842:	4b0c      	ldr	r3, [pc, #48]	; (8006874 <prvResetNextTaskUnblockTime+0x38>)
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	2b00      	cmp	r3, #0
 800684a:	d104      	bne.n	8006856 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800684c:	4b0a      	ldr	r3, [pc, #40]	; (8006878 <prvResetNextTaskUnblockTime+0x3c>)
 800684e:	f04f 32ff 	mov.w	r2, #4294967295
 8006852:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006854:	e008      	b.n	8006868 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006856:	4b07      	ldr	r3, [pc, #28]	; (8006874 <prvResetNextTaskUnblockTime+0x38>)
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	68db      	ldr	r3, [r3, #12]
 800685c:	68db      	ldr	r3, [r3, #12]
 800685e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	685b      	ldr	r3, [r3, #4]
 8006864:	4a04      	ldr	r2, [pc, #16]	; (8006878 <prvResetNextTaskUnblockTime+0x3c>)
 8006866:	6013      	str	r3, [r2, #0]
}
 8006868:	bf00      	nop
 800686a:	370c      	adds	r7, #12
 800686c:	46bd      	mov	sp, r7
 800686e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006872:	4770      	bx	lr
 8006874:	200017f8 	.word	0x200017f8
 8006878:	20001860 	.word	0x20001860

0800687c <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800687c:	b580      	push	{r7, lr}
 800687e:	b084      	sub	sp, #16
 8006880:	af00      	add	r7, sp, #0
 8006882:	6078      	str	r0, [r7, #4]
 8006884:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8006886:	4b29      	ldr	r3, [pc, #164]	; (800692c <prvAddCurrentTaskToDelayedList+0xb0>)
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800688c:	4b28      	ldr	r3, [pc, #160]	; (8006930 <prvAddCurrentTaskToDelayedList+0xb4>)
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	3304      	adds	r3, #4
 8006892:	4618      	mov	r0, r3
 8006894:	f7ff faf7 	bl	8005e86 <uxListRemove>
 8006898:	4603      	mov	r3, r0
 800689a:	2b00      	cmp	r3, #0
 800689c:	d10b      	bne.n	80068b6 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800689e:	4b24      	ldr	r3, [pc, #144]	; (8006930 <prvAddCurrentTaskToDelayedList+0xb4>)
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068a4:	2201      	movs	r2, #1
 80068a6:	fa02 f303 	lsl.w	r3, r2, r3
 80068aa:	43da      	mvns	r2, r3
 80068ac:	4b21      	ldr	r3, [pc, #132]	; (8006934 <prvAddCurrentTaskToDelayedList+0xb8>)
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	4013      	ands	r3, r2
 80068b2:	4a20      	ldr	r2, [pc, #128]	; (8006934 <prvAddCurrentTaskToDelayedList+0xb8>)
 80068b4:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80068bc:	d10a      	bne.n	80068d4 <prvAddCurrentTaskToDelayedList+0x58>
 80068be:	683b      	ldr	r3, [r7, #0]
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	d007      	beq.n	80068d4 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80068c4:	4b1a      	ldr	r3, [pc, #104]	; (8006930 <prvAddCurrentTaskToDelayedList+0xb4>)
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	3304      	adds	r3, #4
 80068ca:	4619      	mov	r1, r3
 80068cc:	481a      	ldr	r0, [pc, #104]	; (8006938 <prvAddCurrentTaskToDelayedList+0xbc>)
 80068ce:	f7ff fa7d 	bl	8005dcc <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80068d2:	e026      	b.n	8006922 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80068d4:	68fa      	ldr	r2, [r7, #12]
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	4413      	add	r3, r2
 80068da:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80068dc:	4b14      	ldr	r3, [pc, #80]	; (8006930 <prvAddCurrentTaskToDelayedList+0xb4>)
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	68ba      	ldr	r2, [r7, #8]
 80068e2:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80068e4:	68ba      	ldr	r2, [r7, #8]
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	429a      	cmp	r2, r3
 80068ea:	d209      	bcs.n	8006900 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80068ec:	4b13      	ldr	r3, [pc, #76]	; (800693c <prvAddCurrentTaskToDelayedList+0xc0>)
 80068ee:	681a      	ldr	r2, [r3, #0]
 80068f0:	4b0f      	ldr	r3, [pc, #60]	; (8006930 <prvAddCurrentTaskToDelayedList+0xb4>)
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	3304      	adds	r3, #4
 80068f6:	4619      	mov	r1, r3
 80068f8:	4610      	mov	r0, r2
 80068fa:	f7ff fa8b 	bl	8005e14 <vListInsert>
}
 80068fe:	e010      	b.n	8006922 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006900:	4b0f      	ldr	r3, [pc, #60]	; (8006940 <prvAddCurrentTaskToDelayedList+0xc4>)
 8006902:	681a      	ldr	r2, [r3, #0]
 8006904:	4b0a      	ldr	r3, [pc, #40]	; (8006930 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	3304      	adds	r3, #4
 800690a:	4619      	mov	r1, r3
 800690c:	4610      	mov	r0, r2
 800690e:	f7ff fa81 	bl	8005e14 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006912:	4b0c      	ldr	r3, [pc, #48]	; (8006944 <prvAddCurrentTaskToDelayedList+0xc8>)
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	68ba      	ldr	r2, [r7, #8]
 8006918:	429a      	cmp	r2, r3
 800691a:	d202      	bcs.n	8006922 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800691c:	4a09      	ldr	r2, [pc, #36]	; (8006944 <prvAddCurrentTaskToDelayedList+0xc8>)
 800691e:	68bb      	ldr	r3, [r7, #8]
 8006920:	6013      	str	r3, [r2, #0]
}
 8006922:	bf00      	nop
 8006924:	3710      	adds	r7, #16
 8006926:	46bd      	mov	sp, r7
 8006928:	bd80      	pop	{r7, pc}
 800692a:	bf00      	nop
 800692c:	20001844 	.word	0x20001844
 8006930:	20001740 	.word	0x20001740
 8006934:	20001848 	.word	0x20001848
 8006938:	2000182c 	.word	0x2000182c
 800693c:	200017fc 	.word	0x200017fc
 8006940:	200017f8 	.word	0x200017f8
 8006944:	20001860 	.word	0x20001860

08006948 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006948:	b480      	push	{r7}
 800694a:	b085      	sub	sp, #20
 800694c:	af00      	add	r7, sp, #0
 800694e:	60f8      	str	r0, [r7, #12]
 8006950:	60b9      	str	r1, [r7, #8]
 8006952:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	3b04      	subs	r3, #4
 8006958:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006960:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	3b04      	subs	r3, #4
 8006966:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006968:	68bb      	ldr	r3, [r7, #8]
 800696a:	f023 0201 	bic.w	r2, r3, #1
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	3b04      	subs	r3, #4
 8006976:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006978:	4a0c      	ldr	r2, [pc, #48]	; (80069ac <pxPortInitialiseStack+0x64>)
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	3b14      	subs	r3, #20
 8006982:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006984:	687a      	ldr	r2, [r7, #4]
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	3b04      	subs	r3, #4
 800698e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	f06f 0202 	mvn.w	r2, #2
 8006996:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	3b20      	subs	r3, #32
 800699c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800699e:	68fb      	ldr	r3, [r7, #12]
}
 80069a0:	4618      	mov	r0, r3
 80069a2:	3714      	adds	r7, #20
 80069a4:	46bd      	mov	sp, r7
 80069a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069aa:	4770      	bx	lr
 80069ac:	080069b1 	.word	0x080069b1

080069b0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80069b0:	b480      	push	{r7}
 80069b2:	b085      	sub	sp, #20
 80069b4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80069b6:	2300      	movs	r3, #0
 80069b8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80069ba:	4b14      	ldr	r3, [pc, #80]	; (8006a0c <prvTaskExitError+0x5c>)
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80069c2:	d00c      	beq.n	80069de <prvTaskExitError+0x2e>
	__asm volatile
 80069c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069c8:	b672      	cpsid	i
 80069ca:	f383 8811 	msr	BASEPRI, r3
 80069ce:	f3bf 8f6f 	isb	sy
 80069d2:	f3bf 8f4f 	dsb	sy
 80069d6:	b662      	cpsie	i
 80069d8:	60fb      	str	r3, [r7, #12]
}
 80069da:	bf00      	nop
 80069dc:	e7fe      	b.n	80069dc <prvTaskExitError+0x2c>
	__asm volatile
 80069de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069e2:	b672      	cpsid	i
 80069e4:	f383 8811 	msr	BASEPRI, r3
 80069e8:	f3bf 8f6f 	isb	sy
 80069ec:	f3bf 8f4f 	dsb	sy
 80069f0:	b662      	cpsie	i
 80069f2:	60bb      	str	r3, [r7, #8]
}
 80069f4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80069f6:	bf00      	nop
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	d0fc      	beq.n	80069f8 <prvTaskExitError+0x48>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80069fe:	bf00      	nop
 8006a00:	bf00      	nop
 8006a02:	3714      	adds	r7, #20
 8006a04:	46bd      	mov	sp, r7
 8006a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a0a:	4770      	bx	lr
 8006a0c:	200003c0 	.word	0x200003c0

08006a10 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006a10:	4b07      	ldr	r3, [pc, #28]	; (8006a30 <pxCurrentTCBConst2>)
 8006a12:	6819      	ldr	r1, [r3, #0]
 8006a14:	6808      	ldr	r0, [r1, #0]
 8006a16:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a1a:	f380 8809 	msr	PSP, r0
 8006a1e:	f3bf 8f6f 	isb	sy
 8006a22:	f04f 0000 	mov.w	r0, #0
 8006a26:	f380 8811 	msr	BASEPRI, r0
 8006a2a:	4770      	bx	lr
 8006a2c:	f3af 8000 	nop.w

08006a30 <pxCurrentTCBConst2>:
 8006a30:	20001740 	.word	0x20001740
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006a34:	bf00      	nop
 8006a36:	bf00      	nop

08006a38 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006a38:	4808      	ldr	r0, [pc, #32]	; (8006a5c <prvPortStartFirstTask+0x24>)
 8006a3a:	6800      	ldr	r0, [r0, #0]
 8006a3c:	6800      	ldr	r0, [r0, #0]
 8006a3e:	f380 8808 	msr	MSP, r0
 8006a42:	f04f 0000 	mov.w	r0, #0
 8006a46:	f380 8814 	msr	CONTROL, r0
 8006a4a:	b662      	cpsie	i
 8006a4c:	b661      	cpsie	f
 8006a4e:	f3bf 8f4f 	dsb	sy
 8006a52:	f3bf 8f6f 	isb	sy
 8006a56:	df00      	svc	0
 8006a58:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8006a5a:	bf00      	nop
 8006a5c:	e000ed08 	.word	0xe000ed08

08006a60 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006a60:	b580      	push	{r7, lr}
 8006a62:	b084      	sub	sp, #16
 8006a64:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8006a66:	4b37      	ldr	r3, [pc, #220]	; (8006b44 <xPortStartScheduler+0xe4>)
 8006a68:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	781b      	ldrb	r3, [r3, #0]
 8006a6e:	b2db      	uxtb	r3, r3
 8006a70:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	22ff      	movs	r2, #255	; 0xff
 8006a76:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	781b      	ldrb	r3, [r3, #0]
 8006a7c:	b2db      	uxtb	r3, r3
 8006a7e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006a80:	78fb      	ldrb	r3, [r7, #3]
 8006a82:	b2db      	uxtb	r3, r3
 8006a84:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006a88:	b2da      	uxtb	r2, r3
 8006a8a:	4b2f      	ldr	r3, [pc, #188]	; (8006b48 <xPortStartScheduler+0xe8>)
 8006a8c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8006a8e:	4b2f      	ldr	r3, [pc, #188]	; (8006b4c <xPortStartScheduler+0xec>)
 8006a90:	2207      	movs	r2, #7
 8006a92:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006a94:	e009      	b.n	8006aaa <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8006a96:	4b2d      	ldr	r3, [pc, #180]	; (8006b4c <xPortStartScheduler+0xec>)
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	3b01      	subs	r3, #1
 8006a9c:	4a2b      	ldr	r2, [pc, #172]	; (8006b4c <xPortStartScheduler+0xec>)
 8006a9e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006aa0:	78fb      	ldrb	r3, [r7, #3]
 8006aa2:	b2db      	uxtb	r3, r3
 8006aa4:	005b      	lsls	r3, r3, #1
 8006aa6:	b2db      	uxtb	r3, r3
 8006aa8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006aaa:	78fb      	ldrb	r3, [r7, #3]
 8006aac:	b2db      	uxtb	r3, r3
 8006aae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006ab2:	2b80      	cmp	r3, #128	; 0x80
 8006ab4:	d0ef      	beq.n	8006a96 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006ab6:	4b25      	ldr	r3, [pc, #148]	; (8006b4c <xPortStartScheduler+0xec>)
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	f1c3 0307 	rsb	r3, r3, #7
 8006abe:	2b04      	cmp	r3, #4
 8006ac0:	d00c      	beq.n	8006adc <xPortStartScheduler+0x7c>
	__asm volatile
 8006ac2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ac6:	b672      	cpsid	i
 8006ac8:	f383 8811 	msr	BASEPRI, r3
 8006acc:	f3bf 8f6f 	isb	sy
 8006ad0:	f3bf 8f4f 	dsb	sy
 8006ad4:	b662      	cpsie	i
 8006ad6:	60bb      	str	r3, [r7, #8]
}
 8006ad8:	bf00      	nop
 8006ada:	e7fe      	b.n	8006ada <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006adc:	4b1b      	ldr	r3, [pc, #108]	; (8006b4c <xPortStartScheduler+0xec>)
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	021b      	lsls	r3, r3, #8
 8006ae2:	4a1a      	ldr	r2, [pc, #104]	; (8006b4c <xPortStartScheduler+0xec>)
 8006ae4:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006ae6:	4b19      	ldr	r3, [pc, #100]	; (8006b4c <xPortStartScheduler+0xec>)
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006aee:	4a17      	ldr	r2, [pc, #92]	; (8006b4c <xPortStartScheduler+0xec>)
 8006af0:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	b2da      	uxtb	r2, r3
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006afa:	4b15      	ldr	r3, [pc, #84]	; (8006b50 <xPortStartScheduler+0xf0>)
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	4a14      	ldr	r2, [pc, #80]	; (8006b50 <xPortStartScheduler+0xf0>)
 8006b00:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006b04:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006b06:	4b12      	ldr	r3, [pc, #72]	; (8006b50 <xPortStartScheduler+0xf0>)
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	4a11      	ldr	r2, [pc, #68]	; (8006b50 <xPortStartScheduler+0xf0>)
 8006b0c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8006b10:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8006b12:	f000 f8dd 	bl	8006cd0 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006b16:	4b0f      	ldr	r3, [pc, #60]	; (8006b54 <xPortStartScheduler+0xf4>)
 8006b18:	2200      	movs	r2, #0
 8006b1a:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8006b1c:	f000 f8fc 	bl	8006d18 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8006b20:	4b0d      	ldr	r3, [pc, #52]	; (8006b58 <xPortStartScheduler+0xf8>)
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	4a0c      	ldr	r2, [pc, #48]	; (8006b58 <xPortStartScheduler+0xf8>)
 8006b26:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8006b2a:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8006b2c:	f7ff ff84 	bl	8006a38 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8006b30:	f7ff fd6e 	bl	8006610 <vTaskSwitchContext>
	prvTaskExitError();
 8006b34:	f7ff ff3c 	bl	80069b0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8006b38:	2300      	movs	r3, #0
}
 8006b3a:	4618      	mov	r0, r3
 8006b3c:	3710      	adds	r7, #16
 8006b3e:	46bd      	mov	sp, r7
 8006b40:	bd80      	pop	{r7, pc}
 8006b42:	bf00      	nop
 8006b44:	e000e400 	.word	0xe000e400
 8006b48:	2000186c 	.word	0x2000186c
 8006b4c:	20001870 	.word	0x20001870
 8006b50:	e000ed20 	.word	0xe000ed20
 8006b54:	200003c0 	.word	0x200003c0
 8006b58:	e000ef34 	.word	0xe000ef34

08006b5c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006b5c:	b480      	push	{r7}
 8006b5e:	b083      	sub	sp, #12
 8006b60:	af00      	add	r7, sp, #0
	__asm volatile
 8006b62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b66:	b672      	cpsid	i
 8006b68:	f383 8811 	msr	BASEPRI, r3
 8006b6c:	f3bf 8f6f 	isb	sy
 8006b70:	f3bf 8f4f 	dsb	sy
 8006b74:	b662      	cpsie	i
 8006b76:	607b      	str	r3, [r7, #4]
}
 8006b78:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8006b7a:	4b10      	ldr	r3, [pc, #64]	; (8006bbc <vPortEnterCritical+0x60>)
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	3301      	adds	r3, #1
 8006b80:	4a0e      	ldr	r2, [pc, #56]	; (8006bbc <vPortEnterCritical+0x60>)
 8006b82:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8006b84:	4b0d      	ldr	r3, [pc, #52]	; (8006bbc <vPortEnterCritical+0x60>)
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	2b01      	cmp	r3, #1
 8006b8a:	d111      	bne.n	8006bb0 <vPortEnterCritical+0x54>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006b8c:	4b0c      	ldr	r3, [pc, #48]	; (8006bc0 <vPortEnterCritical+0x64>)
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	b2db      	uxtb	r3, r3
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	d00c      	beq.n	8006bb0 <vPortEnterCritical+0x54>
	__asm volatile
 8006b96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b9a:	b672      	cpsid	i
 8006b9c:	f383 8811 	msr	BASEPRI, r3
 8006ba0:	f3bf 8f6f 	isb	sy
 8006ba4:	f3bf 8f4f 	dsb	sy
 8006ba8:	b662      	cpsie	i
 8006baa:	603b      	str	r3, [r7, #0]
}
 8006bac:	bf00      	nop
 8006bae:	e7fe      	b.n	8006bae <vPortEnterCritical+0x52>
	}
}
 8006bb0:	bf00      	nop
 8006bb2:	370c      	adds	r7, #12
 8006bb4:	46bd      	mov	sp, r7
 8006bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bba:	4770      	bx	lr
 8006bbc:	200003c0 	.word	0x200003c0
 8006bc0:	e000ed04 	.word	0xe000ed04

08006bc4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006bc4:	b480      	push	{r7}
 8006bc6:	b083      	sub	sp, #12
 8006bc8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8006bca:	4b13      	ldr	r3, [pc, #76]	; (8006c18 <vPortExitCritical+0x54>)
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	d10c      	bne.n	8006bec <vPortExitCritical+0x28>
	__asm volatile
 8006bd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bd6:	b672      	cpsid	i
 8006bd8:	f383 8811 	msr	BASEPRI, r3
 8006bdc:	f3bf 8f6f 	isb	sy
 8006be0:	f3bf 8f4f 	dsb	sy
 8006be4:	b662      	cpsie	i
 8006be6:	607b      	str	r3, [r7, #4]
}
 8006be8:	bf00      	nop
 8006bea:	e7fe      	b.n	8006bea <vPortExitCritical+0x26>
	uxCriticalNesting--;
 8006bec:	4b0a      	ldr	r3, [pc, #40]	; (8006c18 <vPortExitCritical+0x54>)
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	3b01      	subs	r3, #1
 8006bf2:	4a09      	ldr	r2, [pc, #36]	; (8006c18 <vPortExitCritical+0x54>)
 8006bf4:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006bf6:	4b08      	ldr	r3, [pc, #32]	; (8006c18 <vPortExitCritical+0x54>)
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	d105      	bne.n	8006c0a <vPortExitCritical+0x46>
 8006bfe:	2300      	movs	r3, #0
 8006c00:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006c02:	683b      	ldr	r3, [r7, #0]
 8006c04:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8006c08:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8006c0a:	bf00      	nop
 8006c0c:	370c      	adds	r7, #12
 8006c0e:	46bd      	mov	sp, r7
 8006c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c14:	4770      	bx	lr
 8006c16:	bf00      	nop
 8006c18:	200003c0 	.word	0x200003c0
 8006c1c:	00000000 	.word	0x00000000

08006c20 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006c20:	f3ef 8009 	mrs	r0, PSP
 8006c24:	f3bf 8f6f 	isb	sy
 8006c28:	4b15      	ldr	r3, [pc, #84]	; (8006c80 <pxCurrentTCBConst>)
 8006c2a:	681a      	ldr	r2, [r3, #0]
 8006c2c:	f01e 0f10 	tst.w	lr, #16
 8006c30:	bf08      	it	eq
 8006c32:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006c36:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c3a:	6010      	str	r0, [r2, #0]
 8006c3c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006c40:	f04f 0050 	mov.w	r0, #80	; 0x50
 8006c44:	b672      	cpsid	i
 8006c46:	f380 8811 	msr	BASEPRI, r0
 8006c4a:	f3bf 8f4f 	dsb	sy
 8006c4e:	f3bf 8f6f 	isb	sy
 8006c52:	b662      	cpsie	i
 8006c54:	f7ff fcdc 	bl	8006610 <vTaskSwitchContext>
 8006c58:	f04f 0000 	mov.w	r0, #0
 8006c5c:	f380 8811 	msr	BASEPRI, r0
 8006c60:	bc09      	pop	{r0, r3}
 8006c62:	6819      	ldr	r1, [r3, #0]
 8006c64:	6808      	ldr	r0, [r1, #0]
 8006c66:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c6a:	f01e 0f10 	tst.w	lr, #16
 8006c6e:	bf08      	it	eq
 8006c70:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006c74:	f380 8809 	msr	PSP, r0
 8006c78:	f3bf 8f6f 	isb	sy
 8006c7c:	4770      	bx	lr
 8006c7e:	bf00      	nop

08006c80 <pxCurrentTCBConst>:
 8006c80:	20001740 	.word	0x20001740
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006c84:	bf00      	nop
 8006c86:	bf00      	nop

08006c88 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006c88:	b580      	push	{r7, lr}
 8006c8a:	b082      	sub	sp, #8
 8006c8c:	af00      	add	r7, sp, #0
	__asm volatile
 8006c8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c92:	b672      	cpsid	i
 8006c94:	f383 8811 	msr	BASEPRI, r3
 8006c98:	f3bf 8f6f 	isb	sy
 8006c9c:	f3bf 8f4f 	dsb	sy
 8006ca0:	b662      	cpsie	i
 8006ca2:	607b      	str	r3, [r7, #4]
}
 8006ca4:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006ca6:	f7ff fbf9 	bl	800649c <xTaskIncrementTick>
 8006caa:	4603      	mov	r3, r0
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	d003      	beq.n	8006cb8 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8006cb0:	4b06      	ldr	r3, [pc, #24]	; (8006ccc <SysTick_Handler+0x44>)
 8006cb2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006cb6:	601a      	str	r2, [r3, #0]
 8006cb8:	2300      	movs	r3, #0
 8006cba:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006cbc:	683b      	ldr	r3, [r7, #0]
 8006cbe:	f383 8811 	msr	BASEPRI, r3
}
 8006cc2:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006cc4:	bf00      	nop
 8006cc6:	3708      	adds	r7, #8
 8006cc8:	46bd      	mov	sp, r7
 8006cca:	bd80      	pop	{r7, pc}
 8006ccc:	e000ed04 	.word	0xe000ed04

08006cd0 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8006cd0:	b480      	push	{r7}
 8006cd2:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006cd4:	4b0b      	ldr	r3, [pc, #44]	; (8006d04 <vPortSetupTimerInterrupt+0x34>)
 8006cd6:	2200      	movs	r2, #0
 8006cd8:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006cda:	4b0b      	ldr	r3, [pc, #44]	; (8006d08 <vPortSetupTimerInterrupt+0x38>)
 8006cdc:	2200      	movs	r2, #0
 8006cde:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8006ce0:	4b0a      	ldr	r3, [pc, #40]	; (8006d0c <vPortSetupTimerInterrupt+0x3c>)
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	4a0a      	ldr	r2, [pc, #40]	; (8006d10 <vPortSetupTimerInterrupt+0x40>)
 8006ce6:	fba2 2303 	umull	r2, r3, r2, r3
 8006cea:	099b      	lsrs	r3, r3, #6
 8006cec:	4a09      	ldr	r2, [pc, #36]	; (8006d14 <vPortSetupTimerInterrupt+0x44>)
 8006cee:	3b01      	subs	r3, #1
 8006cf0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8006cf2:	4b04      	ldr	r3, [pc, #16]	; (8006d04 <vPortSetupTimerInterrupt+0x34>)
 8006cf4:	2207      	movs	r2, #7
 8006cf6:	601a      	str	r2, [r3, #0]
}
 8006cf8:	bf00      	nop
 8006cfa:	46bd      	mov	sp, r7
 8006cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d00:	4770      	bx	lr
 8006d02:	bf00      	nop
 8006d04:	e000e010 	.word	0xe000e010
 8006d08:	e000e018 	.word	0xe000e018
 8006d0c:	20000014 	.word	0x20000014
 8006d10:	10624dd3 	.word	0x10624dd3
 8006d14:	e000e014 	.word	0xe000e014

08006d18 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006d18:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8006d28 <vPortEnableVFP+0x10>
 8006d1c:	6801      	ldr	r1, [r0, #0]
 8006d1e:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8006d22:	6001      	str	r1, [r0, #0]
 8006d24:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8006d26:	bf00      	nop
 8006d28:	e000ed88 	.word	0xe000ed88

08006d2c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006d2c:	b580      	push	{r7, lr}
 8006d2e:	b08a      	sub	sp, #40	; 0x28
 8006d30:	af00      	add	r7, sp, #0
 8006d32:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006d34:	2300      	movs	r3, #0
 8006d36:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006d38:	f7ff fb04 	bl	8006344 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006d3c:	4b5b      	ldr	r3, [pc, #364]	; (8006eac <pvPortMalloc+0x180>)
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	d101      	bne.n	8006d48 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006d44:	f000 f91a 	bl	8006f7c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006d48:	4b59      	ldr	r3, [pc, #356]	; (8006eb0 <pvPortMalloc+0x184>)
 8006d4a:	681a      	ldr	r2, [r3, #0]
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	4013      	ands	r3, r2
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	f040 8092 	bne.w	8006e7a <pvPortMalloc+0x14e>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	d01f      	beq.n	8006d9c <pvPortMalloc+0x70>
			{
				xWantedSize += xHeapStructSize;
 8006d5c:	2208      	movs	r2, #8
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	4413      	add	r3, r2
 8006d62:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	f003 0307 	and.w	r3, r3, #7
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	d016      	beq.n	8006d9c <pvPortMalloc+0x70>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	f023 0307 	bic.w	r3, r3, #7
 8006d74:	3308      	adds	r3, #8
 8006d76:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	f003 0307 	and.w	r3, r3, #7
 8006d7e:	2b00      	cmp	r3, #0
 8006d80:	d00c      	beq.n	8006d9c <pvPortMalloc+0x70>
	__asm volatile
 8006d82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d86:	b672      	cpsid	i
 8006d88:	f383 8811 	msr	BASEPRI, r3
 8006d8c:	f3bf 8f6f 	isb	sy
 8006d90:	f3bf 8f4f 	dsb	sy
 8006d94:	b662      	cpsie	i
 8006d96:	617b      	str	r3, [r7, #20]
}
 8006d98:	bf00      	nop
 8006d9a:	e7fe      	b.n	8006d9a <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	d06b      	beq.n	8006e7a <pvPortMalloc+0x14e>
 8006da2:	4b44      	ldr	r3, [pc, #272]	; (8006eb4 <pvPortMalloc+0x188>)
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	687a      	ldr	r2, [r7, #4]
 8006da8:	429a      	cmp	r2, r3
 8006daa:	d866      	bhi.n	8006e7a <pvPortMalloc+0x14e>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8006dac:	4b42      	ldr	r3, [pc, #264]	; (8006eb8 <pvPortMalloc+0x18c>)
 8006dae:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8006db0:	4b41      	ldr	r3, [pc, #260]	; (8006eb8 <pvPortMalloc+0x18c>)
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006db6:	e004      	b.n	8006dc2 <pvPortMalloc+0x96>
				{
					pxPreviousBlock = pxBlock;
 8006db8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dba:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8006dbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006dc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dc4:	685b      	ldr	r3, [r3, #4]
 8006dc6:	687a      	ldr	r2, [r7, #4]
 8006dc8:	429a      	cmp	r2, r3
 8006dca:	d903      	bls.n	8006dd4 <pvPortMalloc+0xa8>
 8006dcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	2b00      	cmp	r3, #0
 8006dd2:	d1f1      	bne.n	8006db8 <pvPortMalloc+0x8c>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8006dd4:	4b35      	ldr	r3, [pc, #212]	; (8006eac <pvPortMalloc+0x180>)
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006dda:	429a      	cmp	r2, r3
 8006ddc:	d04d      	beq.n	8006e7a <pvPortMalloc+0x14e>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006dde:	6a3b      	ldr	r3, [r7, #32]
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	2208      	movs	r2, #8
 8006de4:	4413      	add	r3, r2
 8006de6:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006de8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dea:	681a      	ldr	r2, [r3, #0]
 8006dec:	6a3b      	ldr	r3, [r7, #32]
 8006dee:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006df0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006df2:	685a      	ldr	r2, [r3, #4]
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	1ad2      	subs	r2, r2, r3
 8006df8:	2308      	movs	r3, #8
 8006dfa:	005b      	lsls	r3, r3, #1
 8006dfc:	429a      	cmp	r2, r3
 8006dfe:	d921      	bls.n	8006e44 <pvPortMalloc+0x118>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006e00:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	4413      	add	r3, r2
 8006e06:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006e08:	69bb      	ldr	r3, [r7, #24]
 8006e0a:	f003 0307 	and.w	r3, r3, #7
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	d00c      	beq.n	8006e2c <pvPortMalloc+0x100>
	__asm volatile
 8006e12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e16:	b672      	cpsid	i
 8006e18:	f383 8811 	msr	BASEPRI, r3
 8006e1c:	f3bf 8f6f 	isb	sy
 8006e20:	f3bf 8f4f 	dsb	sy
 8006e24:	b662      	cpsie	i
 8006e26:	613b      	str	r3, [r7, #16]
}
 8006e28:	bf00      	nop
 8006e2a:	e7fe      	b.n	8006e2a <pvPortMalloc+0xfe>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006e2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e2e:	685a      	ldr	r2, [r3, #4]
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	1ad2      	subs	r2, r2, r3
 8006e34:	69bb      	ldr	r3, [r7, #24]
 8006e36:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006e38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e3a:	687a      	ldr	r2, [r7, #4]
 8006e3c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006e3e:	69b8      	ldr	r0, [r7, #24]
 8006e40:	f000 f8fe 	bl	8007040 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006e44:	4b1b      	ldr	r3, [pc, #108]	; (8006eb4 <pvPortMalloc+0x188>)
 8006e46:	681a      	ldr	r2, [r3, #0]
 8006e48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e4a:	685b      	ldr	r3, [r3, #4]
 8006e4c:	1ad3      	subs	r3, r2, r3
 8006e4e:	4a19      	ldr	r2, [pc, #100]	; (8006eb4 <pvPortMalloc+0x188>)
 8006e50:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006e52:	4b18      	ldr	r3, [pc, #96]	; (8006eb4 <pvPortMalloc+0x188>)
 8006e54:	681a      	ldr	r2, [r3, #0]
 8006e56:	4b19      	ldr	r3, [pc, #100]	; (8006ebc <pvPortMalloc+0x190>)
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	429a      	cmp	r2, r3
 8006e5c:	d203      	bcs.n	8006e66 <pvPortMalloc+0x13a>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006e5e:	4b15      	ldr	r3, [pc, #84]	; (8006eb4 <pvPortMalloc+0x188>)
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	4a16      	ldr	r2, [pc, #88]	; (8006ebc <pvPortMalloc+0x190>)
 8006e64:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006e66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e68:	685a      	ldr	r2, [r3, #4]
 8006e6a:	4b11      	ldr	r3, [pc, #68]	; (8006eb0 <pvPortMalloc+0x184>)
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	431a      	orrs	r2, r3
 8006e70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e72:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006e74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e76:	2200      	movs	r2, #0
 8006e78:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006e7a:	f7ff fa71 	bl	8006360 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006e7e:	69fb      	ldr	r3, [r7, #28]
 8006e80:	f003 0307 	and.w	r3, r3, #7
 8006e84:	2b00      	cmp	r3, #0
 8006e86:	d00c      	beq.n	8006ea2 <pvPortMalloc+0x176>
	__asm volatile
 8006e88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e8c:	b672      	cpsid	i
 8006e8e:	f383 8811 	msr	BASEPRI, r3
 8006e92:	f3bf 8f6f 	isb	sy
 8006e96:	f3bf 8f4f 	dsb	sy
 8006e9a:	b662      	cpsie	i
 8006e9c:	60fb      	str	r3, [r7, #12]
}
 8006e9e:	bf00      	nop
 8006ea0:	e7fe      	b.n	8006ea0 <pvPortMalloc+0x174>
	return pvReturn;
 8006ea2:	69fb      	ldr	r3, [r7, #28]
}
 8006ea4:	4618      	mov	r0, r3
 8006ea6:	3728      	adds	r7, #40	; 0x28
 8006ea8:	46bd      	mov	sp, r7
 8006eaa:	bd80      	pop	{r7, pc}
 8006eac:	2000547c 	.word	0x2000547c
 8006eb0:	20005488 	.word	0x20005488
 8006eb4:	20005480 	.word	0x20005480
 8006eb8:	20005474 	.word	0x20005474
 8006ebc:	20005484 	.word	0x20005484

08006ec0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006ec0:	b580      	push	{r7, lr}
 8006ec2:	b086      	sub	sp, #24
 8006ec4:	af00      	add	r7, sp, #0
 8006ec6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	d04c      	beq.n	8006f6c <vPortFree+0xac>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006ed2:	2308      	movs	r3, #8
 8006ed4:	425b      	negs	r3, r3
 8006ed6:	697a      	ldr	r2, [r7, #20]
 8006ed8:	4413      	add	r3, r2
 8006eda:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8006edc:	697b      	ldr	r3, [r7, #20]
 8006ede:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006ee0:	693b      	ldr	r3, [r7, #16]
 8006ee2:	685a      	ldr	r2, [r3, #4]
 8006ee4:	4b23      	ldr	r3, [pc, #140]	; (8006f74 <vPortFree+0xb4>)
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	4013      	ands	r3, r2
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	d10c      	bne.n	8006f08 <vPortFree+0x48>
	__asm volatile
 8006eee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ef2:	b672      	cpsid	i
 8006ef4:	f383 8811 	msr	BASEPRI, r3
 8006ef8:	f3bf 8f6f 	isb	sy
 8006efc:	f3bf 8f4f 	dsb	sy
 8006f00:	b662      	cpsie	i
 8006f02:	60fb      	str	r3, [r7, #12]
}
 8006f04:	bf00      	nop
 8006f06:	e7fe      	b.n	8006f06 <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006f08:	693b      	ldr	r3, [r7, #16]
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	d00c      	beq.n	8006f2a <vPortFree+0x6a>
	__asm volatile
 8006f10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f14:	b672      	cpsid	i
 8006f16:	f383 8811 	msr	BASEPRI, r3
 8006f1a:	f3bf 8f6f 	isb	sy
 8006f1e:	f3bf 8f4f 	dsb	sy
 8006f22:	b662      	cpsie	i
 8006f24:	60bb      	str	r3, [r7, #8]
}
 8006f26:	bf00      	nop
 8006f28:	e7fe      	b.n	8006f28 <vPortFree+0x68>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006f2a:	693b      	ldr	r3, [r7, #16]
 8006f2c:	685a      	ldr	r2, [r3, #4]
 8006f2e:	4b11      	ldr	r3, [pc, #68]	; (8006f74 <vPortFree+0xb4>)
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	4013      	ands	r3, r2
 8006f34:	2b00      	cmp	r3, #0
 8006f36:	d019      	beq.n	8006f6c <vPortFree+0xac>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006f38:	693b      	ldr	r3, [r7, #16]
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	2b00      	cmp	r3, #0
 8006f3e:	d115      	bne.n	8006f6c <vPortFree+0xac>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006f40:	693b      	ldr	r3, [r7, #16]
 8006f42:	685a      	ldr	r2, [r3, #4]
 8006f44:	4b0b      	ldr	r3, [pc, #44]	; (8006f74 <vPortFree+0xb4>)
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	43db      	mvns	r3, r3
 8006f4a:	401a      	ands	r2, r3
 8006f4c:	693b      	ldr	r3, [r7, #16]
 8006f4e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006f50:	f7ff f9f8 	bl	8006344 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8006f54:	693b      	ldr	r3, [r7, #16]
 8006f56:	685a      	ldr	r2, [r3, #4]
 8006f58:	4b07      	ldr	r3, [pc, #28]	; (8006f78 <vPortFree+0xb8>)
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	4413      	add	r3, r2
 8006f5e:	4a06      	ldr	r2, [pc, #24]	; (8006f78 <vPortFree+0xb8>)
 8006f60:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8006f62:	6938      	ldr	r0, [r7, #16]
 8006f64:	f000 f86c 	bl	8007040 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8006f68:	f7ff f9fa 	bl	8006360 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8006f6c:	bf00      	nop
 8006f6e:	3718      	adds	r7, #24
 8006f70:	46bd      	mov	sp, r7
 8006f72:	bd80      	pop	{r7, pc}
 8006f74:	20005488 	.word	0x20005488
 8006f78:	20005480 	.word	0x20005480

08006f7c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006f7c:	b480      	push	{r7}
 8006f7e:	b085      	sub	sp, #20
 8006f80:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8006f82:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8006f86:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006f88:	4b27      	ldr	r3, [pc, #156]	; (8007028 <prvHeapInit+0xac>)
 8006f8a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006f8c:	68fb      	ldr	r3, [r7, #12]
 8006f8e:	f003 0307 	and.w	r3, r3, #7
 8006f92:	2b00      	cmp	r3, #0
 8006f94:	d00c      	beq.n	8006fb0 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	3307      	adds	r3, #7
 8006f9a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	f023 0307 	bic.w	r3, r3, #7
 8006fa2:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8006fa4:	68ba      	ldr	r2, [r7, #8]
 8006fa6:	68fb      	ldr	r3, [r7, #12]
 8006fa8:	1ad3      	subs	r3, r2, r3
 8006faa:	4a1f      	ldr	r2, [pc, #124]	; (8007028 <prvHeapInit+0xac>)
 8006fac:	4413      	add	r3, r2
 8006fae:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006fb0:	68fb      	ldr	r3, [r7, #12]
 8006fb2:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006fb4:	4a1d      	ldr	r2, [pc, #116]	; (800702c <prvHeapInit+0xb0>)
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006fba:	4b1c      	ldr	r3, [pc, #112]	; (800702c <prvHeapInit+0xb0>)
 8006fbc:	2200      	movs	r2, #0
 8006fbe:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	68ba      	ldr	r2, [r7, #8]
 8006fc4:	4413      	add	r3, r2
 8006fc6:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006fc8:	2208      	movs	r2, #8
 8006fca:	68fb      	ldr	r3, [r7, #12]
 8006fcc:	1a9b      	subs	r3, r3, r2
 8006fce:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006fd0:	68fb      	ldr	r3, [r7, #12]
 8006fd2:	f023 0307 	bic.w	r3, r3, #7
 8006fd6:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006fd8:	68fb      	ldr	r3, [r7, #12]
 8006fda:	4a15      	ldr	r2, [pc, #84]	; (8007030 <prvHeapInit+0xb4>)
 8006fdc:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006fde:	4b14      	ldr	r3, [pc, #80]	; (8007030 <prvHeapInit+0xb4>)
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	2200      	movs	r2, #0
 8006fe4:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8006fe6:	4b12      	ldr	r3, [pc, #72]	; (8007030 <prvHeapInit+0xb4>)
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	2200      	movs	r2, #0
 8006fec:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8006ff2:	683b      	ldr	r3, [r7, #0]
 8006ff4:	68fa      	ldr	r2, [r7, #12]
 8006ff6:	1ad2      	subs	r2, r2, r3
 8006ff8:	683b      	ldr	r3, [r7, #0]
 8006ffa:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006ffc:	4b0c      	ldr	r3, [pc, #48]	; (8007030 <prvHeapInit+0xb4>)
 8006ffe:	681a      	ldr	r2, [r3, #0]
 8007000:	683b      	ldr	r3, [r7, #0]
 8007002:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007004:	683b      	ldr	r3, [r7, #0]
 8007006:	685b      	ldr	r3, [r3, #4]
 8007008:	4a0a      	ldr	r2, [pc, #40]	; (8007034 <prvHeapInit+0xb8>)
 800700a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800700c:	683b      	ldr	r3, [r7, #0]
 800700e:	685b      	ldr	r3, [r3, #4]
 8007010:	4a09      	ldr	r2, [pc, #36]	; (8007038 <prvHeapInit+0xbc>)
 8007012:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8007014:	4b09      	ldr	r3, [pc, #36]	; (800703c <prvHeapInit+0xc0>)
 8007016:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800701a:	601a      	str	r2, [r3, #0]
}
 800701c:	bf00      	nop
 800701e:	3714      	adds	r7, #20
 8007020:	46bd      	mov	sp, r7
 8007022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007026:	4770      	bx	lr
 8007028:	20001874 	.word	0x20001874
 800702c:	20005474 	.word	0x20005474
 8007030:	2000547c 	.word	0x2000547c
 8007034:	20005484 	.word	0x20005484
 8007038:	20005480 	.word	0x20005480
 800703c:	20005488 	.word	0x20005488

08007040 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007040:	b480      	push	{r7}
 8007042:	b085      	sub	sp, #20
 8007044:	af00      	add	r7, sp, #0
 8007046:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007048:	4b28      	ldr	r3, [pc, #160]	; (80070ec <prvInsertBlockIntoFreeList+0xac>)
 800704a:	60fb      	str	r3, [r7, #12]
 800704c:	e002      	b.n	8007054 <prvInsertBlockIntoFreeList+0x14>
 800704e:	68fb      	ldr	r3, [r7, #12]
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	60fb      	str	r3, [r7, #12]
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	687a      	ldr	r2, [r7, #4]
 800705a:	429a      	cmp	r2, r3
 800705c:	d8f7      	bhi.n	800704e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800705e:	68fb      	ldr	r3, [r7, #12]
 8007060:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8007062:	68fb      	ldr	r3, [r7, #12]
 8007064:	685b      	ldr	r3, [r3, #4]
 8007066:	68ba      	ldr	r2, [r7, #8]
 8007068:	4413      	add	r3, r2
 800706a:	687a      	ldr	r2, [r7, #4]
 800706c:	429a      	cmp	r2, r3
 800706e:	d108      	bne.n	8007082 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007070:	68fb      	ldr	r3, [r7, #12]
 8007072:	685a      	ldr	r2, [r3, #4]
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	685b      	ldr	r3, [r3, #4]
 8007078:	441a      	add	r2, r3
 800707a:	68fb      	ldr	r3, [r7, #12]
 800707c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800707e:	68fb      	ldr	r3, [r7, #12]
 8007080:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	685b      	ldr	r3, [r3, #4]
 800708a:	68ba      	ldr	r2, [r7, #8]
 800708c:	441a      	add	r2, r3
 800708e:	68fb      	ldr	r3, [r7, #12]
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	429a      	cmp	r2, r3
 8007094:	d118      	bne.n	80070c8 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8007096:	68fb      	ldr	r3, [r7, #12]
 8007098:	681a      	ldr	r2, [r3, #0]
 800709a:	4b15      	ldr	r3, [pc, #84]	; (80070f0 <prvInsertBlockIntoFreeList+0xb0>)
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	429a      	cmp	r2, r3
 80070a0:	d00d      	beq.n	80070be <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	685a      	ldr	r2, [r3, #4]
 80070a6:	68fb      	ldr	r3, [r7, #12]
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	685b      	ldr	r3, [r3, #4]
 80070ac:	441a      	add	r2, r3
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	681a      	ldr	r2, [r3, #0]
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	601a      	str	r2, [r3, #0]
 80070bc:	e008      	b.n	80070d0 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80070be:	4b0c      	ldr	r3, [pc, #48]	; (80070f0 <prvInsertBlockIntoFreeList+0xb0>)
 80070c0:	681a      	ldr	r2, [r3, #0]
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	601a      	str	r2, [r3, #0]
 80070c6:	e003      	b.n	80070d0 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	681a      	ldr	r2, [r3, #0]
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80070d0:	68fa      	ldr	r2, [r7, #12]
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	429a      	cmp	r2, r3
 80070d6:	d002      	beq.n	80070de <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80070d8:	68fb      	ldr	r3, [r7, #12]
 80070da:	687a      	ldr	r2, [r7, #4]
 80070dc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80070de:	bf00      	nop
 80070e0:	3714      	adds	r7, #20
 80070e2:	46bd      	mov	sp, r7
 80070e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070e8:	4770      	bx	lr
 80070ea:	bf00      	nop
 80070ec:	20005474 	.word	0x20005474
 80070f0:	2000547c 	.word	0x2000547c

080070f4 <__libc_init_array>:
 80070f4:	b570      	push	{r4, r5, r6, lr}
 80070f6:	4d0d      	ldr	r5, [pc, #52]	; (800712c <__libc_init_array+0x38>)
 80070f8:	4c0d      	ldr	r4, [pc, #52]	; (8007130 <__libc_init_array+0x3c>)
 80070fa:	1b64      	subs	r4, r4, r5
 80070fc:	10a4      	asrs	r4, r4, #2
 80070fe:	2600      	movs	r6, #0
 8007100:	42a6      	cmp	r6, r4
 8007102:	d109      	bne.n	8007118 <__libc_init_array+0x24>
 8007104:	4d0b      	ldr	r5, [pc, #44]	; (8007134 <__libc_init_array+0x40>)
 8007106:	4c0c      	ldr	r4, [pc, #48]	; (8007138 <__libc_init_array+0x44>)
 8007108:	f000 f820 	bl	800714c <_init>
 800710c:	1b64      	subs	r4, r4, r5
 800710e:	10a4      	asrs	r4, r4, #2
 8007110:	2600      	movs	r6, #0
 8007112:	42a6      	cmp	r6, r4
 8007114:	d105      	bne.n	8007122 <__libc_init_array+0x2e>
 8007116:	bd70      	pop	{r4, r5, r6, pc}
 8007118:	f855 3b04 	ldr.w	r3, [r5], #4
 800711c:	4798      	blx	r3
 800711e:	3601      	adds	r6, #1
 8007120:	e7ee      	b.n	8007100 <__libc_init_array+0xc>
 8007122:	f855 3b04 	ldr.w	r3, [r5], #4
 8007126:	4798      	blx	r3
 8007128:	3601      	adds	r6, #1
 800712a:	e7f2      	b.n	8007112 <__libc_init_array+0x1e>
 800712c:	080071e4 	.word	0x080071e4
 8007130:	080071e4 	.word	0x080071e4
 8007134:	080071e4 	.word	0x080071e4
 8007138:	080071e8 	.word	0x080071e8

0800713c <memset>:
 800713c:	4402      	add	r2, r0
 800713e:	4603      	mov	r3, r0
 8007140:	4293      	cmp	r3, r2
 8007142:	d100      	bne.n	8007146 <memset+0xa>
 8007144:	4770      	bx	lr
 8007146:	f803 1b01 	strb.w	r1, [r3], #1
 800714a:	e7f9      	b.n	8007140 <memset+0x4>

0800714c <_init>:
 800714c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800714e:	bf00      	nop
 8007150:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007152:	bc08      	pop	{r3}
 8007154:	469e      	mov	lr, r3
 8007156:	4770      	bx	lr

08007158 <_fini>:
 8007158:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800715a:	bf00      	nop
 800715c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800715e:	bc08      	pop	{r3}
 8007160:	469e      	mov	lr, r3
 8007162:	4770      	bx	lr
